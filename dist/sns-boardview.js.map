{"version":3,"file":"sns-boardview.js","sources":["../node_modules/htm/preact/index.module.js","../src/sns-boardview.ts"],"sourcesContent":["import{h as r,Component as o,render as t}from\"preact\";export{h,render,Component}from\"preact\";import e from\"htm\";var m=e.bind(r);export{m as html};\n","/*******************************************************************************\n*                                                                              *\n*                BoardView for \"Shareable Note Stickers\" (SNS)                 *\n*                                                                              *\n*******************************************************************************/\n\n  import {\n    allowBoolean,\n    allowInteger, allowOrdinal, allowCardinal,\n    allowText, allowTextline,\n    allowFunction,\n    allowListSatisfying,\n    allowOneOf,\n  } from 'javascript-interface-library'\n\n  import {\n    SNS_Board, SNS_Sticker,\n    ValueIsSticker,\n    allowBoard,\n    CSSStyleOfVisual,\n  } from 'shareable-note-stickers'\n\n  import Conversion from 'svelte-coordinate-conversion'\n  const { fromDocumentTo } = Conversion\n\n  import { html, Component } from 'htm/preact'\n\n// @ts-ignore TS7016 *C* sometimes, I hate package management\n  import { DragRecognizerFor, DragClickRecognizerFor } from 'protoux'\n\n/**** install stylesheet for this BoardView ****/\n\n  const Stylesheet = document.createElement('style')\n    Stylesheet.setAttribute('id','SNS Stylesheet')\n    Stylesheet.innerHTML = `/*******************************************************************************\n*                                                                              *\n*                        Shareable Note Stickers (SNS)                         *\n*                                                                              *\n*******************************************************************************/\n\n/**** all SNS elements are absolutely positioned ****/\n\n  .SNS {\n    display:block; position:absolute;\n    margin:0px; padding:0px;\n    background:none; border:none; border-radius:0px; outline:none;\n  }\n\n/**** Error Indicator ****/\n\n  .SNS.ErrorIndicator {\n    overflow:hidden;\n    left:0px; top:0px; width:24px; height:24px;\n    background:url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3Csvg width='24px' height='24px' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 17.0001H12.01M12 10.0001V14.0001M6.41209 21.0001H17.588C19.3696 21.0001 20.2604 21.0001 20.783 20.6254C21.2389 20.2985 21.5365 19.7951 21.6033 19.238C21.6798 18.5996 21.2505 17.819 20.3918 16.2579L14.8039 6.09805C13.8897 4.4359 13.4326 3.60482 12.8286 3.32987C12.3022 3.09024 11.6978 3.09024 11.1714 3.32987C10.5674 3.60482 10.1103 4.4359 9.19614 6.09805L3.6082 16.2579C2.74959 17.819 2.32028 18.5996 2.39677 19.238C2.46351 19.7951 2.76116 20.2985 3.21709 20.6254C3.7396 21.0001 4.63043 21.0001 6.41209 21.0001Z' stroke='orange' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' fill='white'/%3E%3C/svg%3E\");\n    pointer-events:auto;\n  }\n\n\n/**** BoardView ****/\n\n  .SNS.BoardView {\n    left:0px; top:0px; right:0px; bottom:0px;\n  }\n\n/**** Sticker and Contents, Cover ****/\n\n  .SNS.Sticker {}\n  .SNS.Sticker > .SNS {\n    display:block; position:absolute;\n    left:0px; top:0px; width:100%; height:100%; right:auto; bottom:auto;\n  }\n\n  .SNS.Cover { user-select:none; z-index:1000000 }\n\n/**** Selection Markers ****/\n\n  .SNS.Sticker.selected, .SNS.Cover[selected] {\n    outline:dotted 2px orangered;\n  }\n\n  .SNS.ShapeHandle {\n    width:8px; height:8px;\n    background:orangered; border:solid 1px darkgray;\n    z-index:1000001; /* above .SNS.Cover */\n  }\n\n/**** Selection Lasso ****/\n\n  .SNS.Lasso {\n    background:rgba(255,69,0, 0.1); /* border:dashed 2px orangered; */\n  }\n\n/**** Dragging Guides ****/\n\n  .SNS.horizontalGuide.Edge {\n    left:0px; right:0px; height:1px;\n    border-top:dashed 1px orangered;\n  }\n  .SNS.verticalGuide.Edge {\n    top:0px; bottom:0px; width:1px;\n    border-left:dashed 1px orangered;\n  }\n\n  .SNS.horizontalGuide.Center {\n    left:0px; right:0px; height:1px;\n    border-top:dotted 1px orangered;\n  }\n  .SNS.verticalGuide.Center {\n    top:0px; bottom:0px; width:1px;\n    border-left:dotted 1px orangered;\n  }\n\n/**** Placeholder ****/\n\n  .SNS.Placeholder {\n    display:block; position:relative;\n    width:100%; height:100%;\n  }\n\n  .SNS.Placeholder > * {\n    display:block; position:absolute;\n    left:50%; top:50%;\n    transform:translate(-55%,-50%);\n    white-space:nowrap;\n  }\n\n`\n  document.head.appendChild(Stylesheet)\n\n/**** make some existing types indexable ****/\n\n  interface Indexable { [Key:string]:any }\n\n//------------------------------------------------------------------------------\n//--                             Type Definitions                             --\n//------------------------------------------------------------------------------\n\n/**** geometry-related types ****/\n\n  export type SNS_Location  = number         // mainly for illustrative purposes\n  export type SNS_Dimension = number                                     // dto.\n  export type SNS_Position  = { x:SNS_Location,y:SNS_Location }\n  export type SNS_Size      = { Width:SNS_Dimension,Height:SNS_Dimension }\n  export type SNS_Geometry  = { x:SNS_Location,y:SNS_Location, Width:SNS_Dimension,Height:SNS_Dimension }\n\n//------------------------------------------------------------------------------\n//--                              SNS_BoardView                               --\n//------------------------------------------------------------------------------\n\n  export class SNS_BoardView extends Component {\n    private _Board:SNS_Board|undefined\n\n    private _StickerList:SNS_Sticker[] = []\n    private _pointedSticker:SNS_Sticker|undefined\n    private _selectedStickers:SNS_Sticker[] = []       // for dragging & shaping\n    private _SelectionLimit:number = Infinity\n\n    private _LassoStart:SNS_Position|undefined\n    private _LassoEnd:SNS_Position|undefined\n    private _SelectionBeforeLasso:SNS_Sticker[] = []\n\n    private _ShapeMode:string|undefined\n    private _shapedStickers:SNS_Sticker[]|undefined\n    private _initialGeometries:SNS_Geometry[]|undefined\n\n    private _SnapToGrid:boolean = false\n    private _GridWidth:number   = 1\n    private _GridHeight:number  = 1\n\n    private _StickerRecognizerSlot = {}\n    private _ShapeHandleRecognizerSlot = {}\n    private _LassoRecognizerSlot = {}\n\n    public state:Indexable = { Value:0 }\n\n  /**** _mountBoard ****/\n\n    private _mountBoard (Board:SNS_Board|undefined):void {\n      if ((Board != null) && ((this as Component).base != null)) {\n        Board['_View'] = (this as Component).base\n        if (Board['_onMount'] != null) {\n          Board['_onMount']()\n        }\n      }\n      this._Board = Board\n    }\n\n  /**** _unmountBoard ****/\n\n    private _unmountBoard ():void {\n      const Board = this._Board\n      if (Board != null) {\n        Board['_View'] = undefined\n        if (Board['_onUnmount'] != null) {\n          Board['_onUnmount']()\n        }\n      }\n    }\n\n  /**** componentDidMount/WillUnmount ****/\n\n    public componentDidMount    ():void { this._mountBoard(this._Board) }\n    public componentWillUnmount ():void { this._unmountBoard() }\n\n  /**** rerender ****/\n\n    public rerender ():void {\n// @ts-ignore TS2339 \"Value\" is a valid property\n      (this as Component).setState({ Value:(this as Component).state.Value + 1 })\n    }\n\n  /**** render ****/\n\n    public render (PropSet:Indexable):any {\n      const my = this\n\n      let {\n        Classes, Board, StickerList, Placeholder, Mode,\n        SelectionLimit, selectedStickers,\n        onSelectionChange, onStickerSelected, onStickerDeselected,\n        SelectionFrameStyle, SelectionHandleStyle,\n        LassoMode, onGeometryChange,\n        SnapToGrid, GridWidth, GridHeight,\n      } = PropSet\n\n      if (this._Board !== Board) {\n        this._unmountBoard()\n        this._mountBoard(Board)\n      }\n\n    /**** finishDraggingAndShaping ****/\n\n      function finishDraggingAndShaping ():void {\n        my._pointedSticker    = undefined\n        my._shapedStickers    = undefined\n        my._initialGeometries = undefined\n      }\n\n    /**** abortDraggingAndShaping ****/\n\n      function abortDraggingAndShaping ():void {\n        if (my._shapedStickers != null) {\n          changeGeometriesTo(my._shapedStickers,my._initialGeometries as SNS_Geometry[])\n        }\n        finishDraggingAndShaping()\n      }\n\n    /**** validate given properties ****/\n\n      allowTextline      ('board CSS class names',Classes)\n      allowBoard                         ('board',Board)\n      allowListSatisfying         ('sticker list',StickerList, ValueIsSticker)\n      allowTextline           ('placeholder text',Placeholder)\n      allowOneOf                    ('board mode',Mode, ['edit','run'])\n      allowOrdinal             ('selection limit',SelectionLimit)\n      allowListSatisfying('list of selected stickers',selectedStickers, ValueIsSticker)\n      allowFunction  ('selection change callback',onSelectionChange)\n      allowFunction         ('selection callback',onStickerSelected)\n      allowFunction       ('deselection callback',onStickerDeselected)\n      allowTextline  ('selection frame CSS style',SelectionFrameStyle)\n      allowText     ('selection handle CSS style',SelectionHandleStyle)\n      allowOneOf          ('lasso selection mode',LassoMode, ['touch','contain'])\n      allowFunction   ('geometry change callback',onGeometryChange)\n      allowBoolean           ('\"SnapToGrid\" mode',SnapToGrid)\n      allowCardinal                 ('grid width',GridWidth)\n      allowCardinal                ('grid height',GridHeight)\n\n    /**** provide defaults for missing properties ****/\n\n      if (Classes              == null) { Classes               = '' }\n      if (Placeholder          == null) { Placeholder           = '(empty)' }\n      if (Mode                 == null) { Mode                  = 'run' }\n      if (SelectionLimit       == null) { SelectionLimit        = Infinity }\n      if (selectedStickers     == null) { selectedStickers      = [] }\n//    if (SelectionFrameStyle  == null) { SelectionFrameStyle   = 'dotted 2px orangered' }\n      if (SelectionHandleStyle == null) { SelectionHandleStyle  = 'background:orangered; border:solid 1px darkgray' }\n      if (LassoMode            == null) { LassoMode             = 'contain' }\n      if (SnapToGrid           == null) { SnapToGrid            = false }\n      if (GridWidth            == null) { GridWidth             = 10 }\n      if (GridHeight           == null) { GridHeight            = 10 }\n\n    /**** sanitize Selections ****/\n\n      const selectedStickerSet:Set<SNS_Sticker> = new Set()\n        selectedStickers = selectedStickers.filter((selectedSticker:SNS_Sticker) => {\n          if (\n            ValueIsSticker(selectedSticker) &&\n            ! selectedStickerSet.has(selectedSticker)\n          ) {\n            selectedStickerSet.add(selectedSticker)\n            return true\n          } else {\n            abortDraggingAndShaping()\n            return false        // invalid selections don't invoke any callbacks\n          }\n        })\n      if (selectedStickers.length > SelectionLimit) {\n        selectStickers(selectedStickers.slice(0,SelectionLimit))\n      }\n\n      my._StickerList      = StickerList\n      my._selectedStickers = selectedStickers   // needed for dragging & shaping\n      my._SelectionLimit   = SelectionLimit                              // dto.\n\n      my._SnapToGrid = SnapToGrid                                        // dto.\n      my._GridWidth  = GridWidth                                         // dto.\n      my._GridHeight = GridHeight                                        // dto.\n\n    /**** Sticker Selection ****/\n\n      function selectStickers (\n        SelectionA:SNS_Sticker[], SelectionB:SNS_Sticker[] = []\n      ):void {\n        const newSelection:SNS_Sticker[] = SelectionA.slice()\n        SelectionB.forEach((Sticker:SNS_Sticker) => {\n          if (newSelection.indexOf(Sticker) < 0) { newSelection.push(Sticker) }\n        })\n\n        if (selectedStickers.length > my._SelectionLimit) {\n          newSelection.length = my._SelectionLimit\n        }\n\n        const StickersToSelect:SNS_Sticker[]   = []\n        const StickersToDeselect:SNS_Sticker[] = []\n          newSelection.forEach((Sticker:SNS_Sticker) => {\n            if (my._selectedStickers.indexOf(Sticker) < 0) {\n              StickersToSelect.push(Sticker)\n            }\n          })\n\n          my._selectedStickers.forEach((Sticker:SNS_Sticker) => {\n            if (newSelection.indexOf(Sticker) < 0) {\n              StickersToDeselect.push(Sticker)\n            }\n          })\n        selectedStickers = my._selectedStickers = newSelection\n\n        if ((StickersToSelect.length > 0) || (StickersToDeselect.length > 0)) {\n          abortDraggingAndShaping()\n\n          if (onSelectionChange != null) {\n            onSelectionChange(selectedStickers)\n          }\n        }\n\n        if ((StickersToDeselect.length > 0) && (onStickerDeselected != null)) {\n          StickersToDeselect.forEach((deselectedSticker:SNS_Sticker) => {\n            onStickerDeselected(deselectedSticker)\n          })\n        }\n\n        if ((StickersToSelect.length > 0) && (onStickerSelected != null)) {\n          StickersToSelect.forEach((selectedSticker:SNS_Sticker) => {\n            onStickerSelected(selectedSticker)\n          })\n        }\n      }\n\n      function StickerIsSelected (Sticker:SNS_Sticker):boolean {\n        return (selectedStickers.indexOf(Sticker) >= 0)\n      }\n\n    /**** Lasso Selection ****/\n\n      function GeometryOfLasso ():SNS_Geometry {\n        const { x:x0,y:y0 } = my._LassoStart as SNS_Position\n        const { x:x1,y:y1 } = my._LassoEnd || my._LassoStart as SNS_Position\n\n        let LassoX = (x0 <= x1 ? x0 : x1); let LassoWidth  = (x0 <= x1 ? x1-x0 : x0-x1)\n        let LassoY = (y0 <= y1 ? y0 : y1); let LassoHeight = (y0 <= y1 ? y1-y0 : y0-y1)\n\n        return { x:LassoX,y:LassoY, Width:LassoWidth,Height:LassoHeight }\n      }\n\n      function CSSGeometryOfLasso ():string {\n        const { x,y, Width,Height } = GeometryOfLasso()\n        return `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px`\n      }\n\n      function StickersCaughtByLasso ():SNS_Sticker[] {\n        let { x:LassoX0,y:LassoY0, Width:LassoWidth,Height:LassoHeight } = GeometryOfLasso()\n        let LassoX1 = LassoX0+LassoWidth\n        let LassoY1 = LassoY0+LassoHeight\n\n        if (LassoMode === 'touch') {\n          return my._StickerList.filter((Sticker:SNS_Sticker) => {\n            if (! Sticker.isVisible || Sticker.isLocked) { return false }\n\n            const { x,y, Width,Height } = Sticker.Geometry\n            return (\n              (LassoX0 <= x+Width)  && (x <= LassoX1) &&\n              (LassoY0 <= y+Height) && (y <= LassoY1)\n            )\n          })\n        } else { // 'enclose'\n          return my._StickerList.filter((Sticker:SNS_Sticker) => {\n            if (! Sticker.isVisible || Sticker.isLocked) { return false }\n\n            const { x,y, Width,Height } = Sticker.Geometry\n            return (\n              (LassoX0 <= x) && (x <= LassoX1+Width) &&\n              (LassoY0 <= y) && (y <= LassoY1+Height)\n            )\n          })\n        }\n      }\n\n      function dragLassoTo (x:SNS_Location,y:SNS_Location):void {\n        my._LassoEnd = { x,y }\n        selectStickers(my._SelectionBeforeLasso, StickersCaughtByLasso())\n      }\n\n      function applyLasso ():void {\n        my._LassoStart = my._LassoEnd = undefined\n        my._SelectionBeforeLasso = []\n      }\n\n      function abortLasso ():void {\n        my._LassoStart = my._LassoEnd = undefined\n        selectStickers(my._SelectionBeforeLasso)\n        my._SelectionBeforeLasso = []\n      }\n\n    /**** Lasso Recognizer ****/\n\n      function onBoardClick ():void {\n        selectStickers([])\n      }\n\n      const LassoRecognizer = DragClickRecognizerFor(my._LassoRecognizerSlot, {\n        onlyFrom:     '.SNS.BoardView',\n        Threshold:    4,\n        onDragStarted:(x:number,y:number, dx:number,dy:number) => {\n          my._SelectionBeforeLasso = selectedStickers.slice()\n\n// @ts-ignore TS2345 type casting is ok here\n          ;({ left:x,top:y } = fromDocumentTo('local',{ left:x,top:y },(my as Component).base))\n\n          my._LassoStart = { x,y }\n          dragLassoTo(x,y)\n          my.rerender()\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n// @ts-ignore TS2532 my._LassoStart is _not_ undefined\n          dragLassoTo(my._LassoStart.x+dx,my._LassoStart.y+dy)\n          my.rerender()\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n// @ts-ignore TS2532 my._LassoStart is _not_ undefined\n          dragLassoTo(my._LassoStart.x+dx,my._LassoStart.y+dy)\n          applyLasso()\n          my.rerender()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortLasso()\n          my.rerender()\n        },\n        onClicked:onBoardClick\n      })\n\n    /**** Geometry Handling ****/\n\n      function changeGeometriesTo (\n        StickerList:SNS_Sticker[], GeometryList:SNS_Geometry[]\n      ):void {\n        if (onGeometryChange != null) {\n          onGeometryChange(StickerList,GeometryList)\n          my.rerender()\n        }\n      }\n\n      function changeGeometriesBy (\n        StickerList:SNS_Sticker[], Mode:string, dx:number,dy:number,\n        initialGeometries?:SNS_Geometry[]\n      ):void {\n        if (onGeometryChange == null) { return }\n\n        let dX:number = 0, dY:number = 0, dW:number = 0, dH:number = 0\n        switch (Mode) {\n          case 'nw': dX = dx; dW = -dx; dY = dy; dH = -dy; break\n          case 'n':                     dY = dy; dH = -dy; break\n          case 'ne':          dW = dx;  dY = dy; dH = -dy; break\n          case 'e':           dW = dx;                     break\n          case 'se':          dW = dx;           dH = dy;  break\n          case 's':                              dH = dy;  break\n          case 'sw': dX = dx; dW = -dx;          dH = dy;  break\n          case 'w':  dX = dx; dW = -dx;                    break\n          case 'c':  dX = dx;           dY = dy;\n        }\n\n        if (initialGeometries == null) {\n          initialGeometries = my._initialGeometries as SNS_Geometry[]\n        }\n\n        const GeometryList = initialGeometries.map(\n          (Geometry:SNS_Geometry) => {\n            let Width:number  = Math.max(0,Geometry.Width+dW)\n            let Height:number = Math.max(0,Geometry.Height+dH)\n\n            let xl:number = Geometry.x+dX, xr = xl + Width\n            let yt:number = Geometry.y+dY, yb = yt + Height\n\n            if (my._SnapToGrid) {\n              let xl_ = my._GridWidth*Math.round(xl/my._GridWidth)\n              let xr_ = my._GridWidth*Math.round(xr/my._GridWidth)\n              let yt_ = my._GridHeight*Math.round(yt/my._GridHeight)\n              let yb_ = my._GridHeight*Math.round(yb/my._GridHeight)\n\n              switch (Mode) {\n                case 'nw': xl = Math.min(xl_,xr); yt = Math.min(yt_,yb); break\n                case 'n':                         yt = Math.min(yt_,yb); break\n                case 'ne': xr = Math.max(xl,xr_); yt = Math.min(yt_,yb); break\n                case 'e':  xr = Math.max(xl,xr_);                        break\n                case 'se': xr = Math.max(xl,xr_); yb = Math.max(yt,yb_); break\n                case 's':                         yb = Math.max(yt,yb_); break\n                case 'sw': xl = Math.min(xl_,xr); yb = Math.max(yt,yb_); break\n                case 'w':  xl = Math.min(xl_,xr);                        break\n                case 'c':  xl = xl_; xr = xl+Width; yt = yt_; yb = yt+Height\n              }\n            }\n            return { x:xl,y:yt, Width:xr-xl,Height:yb-yt }\n          }\n        )\n\n        changeGeometriesTo(StickerList,GeometryList)\n      }\n\n    /**** Sticker Drag/Select Recognizer ****/\n\n      const onStickerClick = (x:number,y:number, Event:PointerEvent) => {\n        if (SelectionLimit === 0) { return }\n\n        const Sticker = my._pointedSticker as SNS_Sticker\n\n        let SelectionChanged:boolean = false\n        let StickersToSelect:SNS_Sticker[], StickersToDeselect:SNS_Sticker[]\n        if (Event.shiftKey || Event.metaKey) { // additive/subtractive selection\n          SelectionChanged = true\n          if (StickerIsSelected(Sticker)) {\n            StickersToDeselect = [Sticker]\n            selectedStickers   = selectedStickers.filter(\n              (selectedSticker:SNS_Sticker) => (selectedSticker !== Sticker)\n            )\n          } else {\n            if (selectedStickers.length === SelectionLimit) {\n              StickersToDeselect = [selectedStickers.shift()]\n            }\n            StickersToSelect = [Sticker]\n            selectedStickers.push(Sticker)\n          }\n        } else {                                         // definitive selection\n          StickersToDeselect = selectedStickers.filter(\n            (selectedSticker:SNS_Sticker) => (selectedSticker !== Sticker)\n          )\n          SelectionChanged = ! StickerIsSelected(Sticker)\n          StickersToSelect  = (SelectionChanged ? [Sticker] : [])\n          selectedStickers  = [Sticker]\n        }\n\n        if (SelectionChanged && (onSelectionChange != null)) {\n          onSelectionChange(selectedStickers)\n        }\n\n// @ts-ignore TS2454 let's check IF variables were assigned\n        if ((StickersToDeselect != null) && (onStickerDeselected != null)) {\n          StickersToDeselect.forEach((deselectedSticker:SNS_Sticker) => {\n            onStickerDeselected(deselectedSticker)\n          })\n        }\n\n// @ts-ignore TS2454 let's check IF variables were assigned\n        if ((StickersToSelect != null) && (onStickerSelected != null)) {\n          StickersToSelect.forEach((selectedSticker:SNS_Sticker) => {\n            onStickerSelected(selectedSticker)\n          })\n        }\n\n        if (SelectionChanged) { my.rerender() }\n      }\n\n    /**** StickerRecognizer ****/\n\n      const StickerRecognizer = DragClickRecognizerFor(my._StickerRecognizerSlot, {\n        onlyFrom:     '.SNS.Cover',\n        Threshold:    4,\n        onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n          if (! StickerIsSelected(my._pointedSticker as SNS_Sticker)) {\n            if (Event.shiftKey || Event.metaKey) {  // additive/subtractive sel.\n              selectStickers([my._pointedSticker as SNS_Sticker],my._selectedStickers)\n            } else {\n              selectStickers([my._pointedSticker as SNS_Sticker])\n            }\n          }\n\n          my._shapedStickers    = my._selectedStickers\n          my._initialGeometries = my._selectedStickers.map(\n            (Sticker:SNS_Sticker) => Sticker.Geometry\n          )\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n          finishDraggingAndShaping()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortDraggingAndShaping()\n        },\n        onClicked:onStickerClick\n      })\n\n    /**** handleStickerEvent ****/\n\n      const handleStickerEvent = (Event:PointerEvent, Sticker:SNS_Sticker) => {\n        my._ShapeMode      = 'c'\n        my._pointedSticker = Sticker\n        StickerRecognizer(Event)\n      }\n\n    /**** ShapeHandle Recognizer ****/\n\n      const ShapeHandleRecognizer = DragRecognizerFor(my._ShapeHandleRecognizerSlot, {\n        onlyFrom:     '.SNS.ShapeHandle',\n        Threshold:    0,\n        onDragStarted:(x:number,y:number, dx:number,dy:number) => {\n          my._shapedStickers    = my._selectedStickers\n          my._initialGeometries = my._selectedStickers.map(\n            (Sticker:SNS_Sticker) => Sticker.Geometry\n          )\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n          finishDraggingAndShaping()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortDraggingAndShaping()\n        }\n      })\n\n      const handleShapeEvent = (Event:PointerEvent, Mode:string) => {\n        my._ShapeMode = Mode\n        ShapeHandleRecognizer(Event)\n      }\n\n    /**** builtinSelectionFor ****/\n\n      function builtinSelectionFor (Sticker:SNS_Sticker):Function {\n        return function (Event:PointerEvent):void {\n          if (Event.button === 0) { selectStickers([Sticker]) }\n        }\n      }\n\n    /**** builtinDraggingFor ****/\n\n      const DragRecognizer:WeakMap<SNS_Sticker,Function> = new WeakMap()\n      const initialGeometry:WeakMap<SNS_Sticker,SNS_Geometry> = new WeakMap()\n\n      function builtinDraggingFor (Sticker:SNS_Sticker):Function {\n        let Recognizer = DragRecognizer.get(Sticker)\n        if (Recognizer == null) {\n          DragRecognizer.set(Sticker, Recognizer = DragRecognizerFor(Sticker, {\n            onlyFrom:     '.builtinDraggable',\n            neverFrom:    '.notBuiltinDraggable',\n            Threshold:    4,\n            onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n              initialGeometry.set(Sticker,Sticker.Geometry)\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n            },\n            onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n              if (! initialGeometry.has(Sticker)) { return }\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n            },\n            onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n              if (! initialGeometry.has(Sticker)) { return }\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n              initialGeometry.delete(Sticker)\n            },\n            onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n              if (initialGeometry.has(Sticker)) {\n                changeGeometriesTo([Sticker],[initialGeometry.get(Sticker) as SNS_Geometry])\n              }\n              initialGeometry.delete(Sticker)\n            }\n          }))\n        }\n        return Recognizer as Function\n      }\n\n    /**** horizontal Guides ****/\n\n      function horizontalGuides ():any {\n        if (my._shapedStickers == null) { return '' }\n\n        const EdgeSet:Indexable   = {}\n        const CenterSet:Indexable = {}\n        my._StickerList.filter(\n          (Sticker:SNS_Sticker) => ! StickerIsSelected(Sticker)\n        ).forEach((Sticker:SNS_Sticker) => {\n          const { y,Height } = Sticker.Geometry\n            const yt = Math.round(y)\n            const ym = Math.round(y+Height/2)\n            const yb = Math.round(y+Height)\n          EdgeSet[yt] = EdgeSet[yb] = true\n          CenterSet[ym] = true\n        })\n\n        const horizontalSet:Indexable = {}\n        my._shapedStickers.forEach((Sticker:SNS_Sticker) => {\n          const { y,Height } = Sticker.Geometry\n            const yt = Math.round(y)\n            const ym = Math.round(y+Height/2)\n            const yb = Math.round(y+Height)\n          if (EdgeSet[yt])                                     { horizontalSet[yt] = 'Edge' }\n          if (EdgeSet[ym]   && (horizontalSet[ym] !== 'Edge')) { horizontalSet[ym] = 'Center' }\n          if (EdgeSet[yb])                                     { horizontalSet[yb] = 'Edge' }\n          if (CenterSet[yt] && (horizontalSet[yt] !== 'Edge')) { horizontalSet[yt] = 'Center' }\n          if (CenterSet[ym] && (horizontalSet[ym] !== 'Edge')) { horizontalSet[ym] = 'Center' }\n          if (CenterSet[yb] && (horizontalSet[yb] !== 'Edge')) { horizontalSet[yb] = 'Center' }\n        })\n\n        const horizontalList:string[] = []\n          for (let y in horizontalSet) {\n            if (horizontalSet[y] != null) { horizontalList.push(y) }\n          }\n\n        return html`${horizontalList.map((y:string) => html`\n          <div class=\"SNS horizontalGuide ${horizontalSet[y]}\" style=\"top:${y}px\"/>\n        `)}`\n      }\n\n    /**** vertical Guides ****/\n\n      function verticalGuides ():any {\n        if (my._shapedStickers == null) { return '' }\n\n        const EdgeSet:Indexable   = {}\n        const CenterSet:Indexable = {}\n        my._StickerList.filter(\n          (Sticker:SNS_Sticker) => ! StickerIsSelected(Sticker)\n        ).forEach((Sticker:SNS_Sticker) => {\n          const { x,Width } = Sticker.Geometry\n            const xl = Math.round(x)\n            const xm = Math.round(x+Width/2)\n            const xr = Math.round(x+Width)\n          EdgeSet[xl] = EdgeSet[xr] = true\n          CenterSet[xm] = true\n        })\n\n        const verticalSet:Indexable = {}\n        my._shapedStickers.forEach((Sticker:SNS_Sticker) => {\n          const { x,Width } = Sticker.Geometry\n            const xl = Math.round(x)\n            const xm = Math.round(x+Width/2)\n            const xr = Math.round(x+Width)\n          if (EdgeSet[xl])                                   { verticalSet[xl] = 'Edge' }\n          if (EdgeSet[xm]   && (verticalSet[xm] !== 'Edge')) { verticalSet[xm] = 'Center' }\n          if (EdgeSet[xr])                                   { verticalSet[xr] = 'Edge' }\n          if (CenterSet[xl] && (verticalSet[xl] !== 'Edge')) { verticalSet[xl] = 'Center' }\n          if (CenterSet[xm] && (verticalSet[xm] !== 'Edge')) { verticalSet[xm] = 'Center' }\n          if (CenterSet[xr] && (verticalSet[xr] !== 'Edge')) { verticalSet[xr] = 'Center' }\n        })\n\n        const verticalList:string[] = []\n          for (let x in verticalSet) {\n            if (verticalSet[x] != null) { verticalList.push(x) }\n          }\n        return html`${verticalList.map((x:string) => html`\n          <div class=\"SNS verticalGuide ${verticalSet[x]}\" style=\"left:${x}px\"/>\n        `)}`\n      }\n\n    /**** actual rendering ****/\n\n      const BoardStyle = (Board == null ? undefined : CSSStyleOfVisual(Board))\n\n      return html`<div class=\"SNS BoardView ${Classes}\" style=${BoardStyle}\n        onPointerDown=${LassoRecognizer} onPointerMove=${LassoRecognizer}\n        onPointerUp=${LassoRecognizer} onPointerCancel=${LassoRecognizer}\n      >\n        ${Board == null\n          ? html`<div class=\"SNS Placeholder\"><div>(no Board to show)</div></div>`\n          : StickerList == null\n            ? html`<div class=\"SNS Placeholder\"><div>(no Stickers to show)</div></div>`\n            : StickerList.map((Sticker:SNS_Sticker) => {\n                if (! Sticker.isVisible) { return '' }\n\n                const Geometry = Sticker.Geometry\n                const selected = StickerIsSelected(Sticker)\n\n                return html`<${SNS_StickerView} Sticker=${Sticker} key=${Sticker.Id}\n                  selected=${selected && (Mode === 'run')}\n                  SelectionFrameStyle=${SelectionFrameStyle}\n                  Geometry=${Geometry}\n                  builtinDragging=${builtinDraggingFor(Sticker)}\n                  builtinSelection=${builtinSelectionFor(Sticker)}\n                />`\n              })\n        }\n\n        ${(StickerList != null) && (Mode === 'edit')\n          ? StickerList.map((Sticker:SNS_Sticker) => {\n              if (! Sticker.isVisible) { return '' }\n\n              if (Sticker.isLocked) {\n                return html`\n                  <${SNS_Cover} Sticker=${Sticker} key=${Sticker.Id+'c'}\n                    onPointerDown=${LassoRecognizer} onPointerMove=${LassoRecognizer}\n                    onPointerUp=${LassoRecognizer} onPointerCancel=${LassoRecognizer}\n                  />\n                `\n              } else {\n                const selected = StickerIsSelected(Sticker)\n\n                return html`\n                  <${SNS_Cover} Sticker=${Sticker} key=${Sticker.Id+'c'}\n                    selected=${selected}\n                    onPointerEvent=${(Event:PointerEvent) => handleStickerEvent(Event,Sticker)}\n                  />\n                `\n              }\n            })\n          : ''\n        }\n\n        ${(selectedStickers.length > 0)\n          ? selectedStickers.filter(\n              (Sticker:SNS_Sticker) => Sticker.isVisible && ! Sticker.isLocked\n            ).map((Sticker:SNS_Sticker) => {\n              const Id       = Sticker.Id\n              const Geometry = Sticker.Geometry\n              return html`\n                <${SNS_ShapeHandle} key=${Id+'nw'} Mode=\"nw\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'nw')}/>\n                <${SNS_ShapeHandle} key=${Id+'n'}  Mode=\"n\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'n')}/>\n                <${SNS_ShapeHandle} key=${Id+'ne'} Mode=\"ne\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'ne')}/>\n                <${SNS_ShapeHandle} key=${Id+'e'}  Mode=\"e\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'e')}/>\n                <${SNS_ShapeHandle} key=${Id+'se'} Mode=\"se\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'se')}/>\n                <${SNS_ShapeHandle} key=${Id+'s'}  Mode=\"s\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'s')}/>\n                <${SNS_ShapeHandle} key=${Id+'sw'} Mode=\"sw\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'sw')}/>\n                <${SNS_ShapeHandle} key=${Id+'w'}  Mode=\"w\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'w')}/>\n              `\n            })\n          : ''\n        }\n        ${this._LassoStart == null\n          ? ''\n          : html`<div class=\"SNS Lasso\" style=${CSSGeometryOfLasso()}></>`\n        }\n        ${horizontalGuides()}\n        ${verticalGuides()}\n      </div>`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                             SNS_StickerView                              --\n//------------------------------------------------------------------------------\n\n  class SNS_StickerView extends Component {\n    private _Sticker:SNS_Sticker|undefined\n\n  /**** componentDidMount ****/\n\n    public componentDidMount ():void {\n      const Sticker = this._Sticker as SNS_Sticker\n\n      Sticker['_View'] = (this as Component).base\n      if (Sticker['_onMount'] != null) {\n        Sticker['_onMount']()\n      }\n    }\n\n  /**** componentWillUnmount ****/\n\n    public componentWillUnmount ():void {\n      const Sticker = this._Sticker as SNS_Sticker\n\n      Sticker['_View'] = undefined\n      if (Sticker['_onUnmount'] != null) {\n        Sticker['_onUnmount']()\n      }\n    }\n\n  /**** render ****/\n\n    public render (PropSet:Indexable):any {\n      let {\n        Sticker, selected, SelectionFrameStyle,\n        Geometry, builtinSelection, builtinDragging\n      } = PropSet\n\n      this._Sticker = Sticker\n\n      let { x,y, Width,Height } = Geometry\n        allowInteger('sticker x position',x)\n        allowInteger('sticker y position',y)\n        allowOrdinal     ('sticker width',Width)\n        allowOrdinal    ('sticker height',Height)\n      const CSSGeometry = (\n        (x != null) && (Width != null) && (y != null) && (Height != null)\n        ? `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n        : ''\n      )\n\n      return html`<div class=\"SNS Sticker ${selected ? 'selected' : ''}\" style=\"\n        ${CSSGeometry};\n        ${selected && (SelectionFrameStyle != null) ? `outline:${SelectionFrameStyle};` : ''}\n        ${CSSStyleOfVisual(Sticker) || ''}\n      \">\n        ${Sticker.Rendering({ builtinSelection,builtinDragging })}\n      </div>`\n    }\n  }//------------------------------------------------------------------------------\n//--                                SNS_Cover                                 --\n//------------------------------------------------------------------------------\n\n  class SNS_Cover extends Component {\n    public render (PropSet:Indexable):any {\n      let { Sticker, onPointerEvent, ...otherProps } = PropSet\n\n      let { x,y, Width,Height } = Sticker.Geometry\n\n      const CSSGeometry = (\n        (x != null) && (Width != null) && (y != null) && (Height != null)\n        ? `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n        : ''\n      )\n\n      return html`<div class=\"SNS Cover\" style=\"${CSSGeometry}\" ...${otherProps}\n        onPointerDown=${onPointerEvent} onPointerMove=${onPointerEvent}\n        onPointerUp=${onPointerEvent} onPointerCancel=${onPointerEvent}\n      />`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                             SNS_ShapeHandle                              --\n//------------------------------------------------------------------------------\n\n  class SNS_ShapeHandle extends Component {\n    public render (PropSet:Indexable):any {\n      let { Mode, Geometry, onPointerEvent, ...otherProps } = PropSet\n\n      let { x,y, Width,Height } = Geometry\n      const xl = x-8, xm = Math.round(x+Width/2)-4,  xr = x+Width\n      const yt = y-8, ym = Math.round(y+Height/2)-4, yb = y+Height\n\n      let CSSGeometry, Cursor\n      switch (Mode) {\n        case 'nw': CSSGeometry = `left:${xl}px; top:${yt}px;`; Cursor = 'nwse'; break\n        case 'n':  CSSGeometry = `left:${xm}px; top:${yt}px;`; Cursor = 'ns';   break\n        case 'ne': CSSGeometry = `left:${xr}px; top:${yt}px;`; Cursor = 'nesw'; break\n        case 'e':  CSSGeometry = `left:${xr}px; top:${ym}px;`; Cursor = 'ew';   break\n        case 'se': CSSGeometry = `left:${xr}px; top:${yb}px;`; Cursor = 'nwse'; break\n        case 's':  CSSGeometry = `left:${xm}px; top:${yb}px;`; Cursor = 'ns';   break\n        case 'sw': CSSGeometry = `left:${xl}px; top:${yb}px;`; Cursor = 'nesw'; break\n        case 'w':  CSSGeometry = `left:${xl}px; top:${ym}px;`; Cursor = 'ew';   break\n      }\n      Cursor = 'cursor:' + Cursor + '-resize'\n\n      return html`<div class=\"SNS ShapeHandle\" style=\"${CSSGeometry} ${Cursor}\" ...${otherProps}\n        onPointerDown=${onPointerEvent} onPointerMove=${onPointerEvent}\n        onPointerUp=${onPointerEvent} onPointerCancel=${onPointerEvent}\n      />`\n    }\n  }\n\n// @ts-ignore TS2339 allow global variable \"SNS_BoardView\"\n  window.SNS_BoardView = SNS_BoardView\n\n  document.dispatchEvent(\n// @ts-ignore TS2339 allow global variable \"SNS_BoardView\"\n    new CustomEvent('SNS_BoardView',{ detail:window.SNS_BoardView })\n  )\n"],"names":["r","StickerList","Mode","html"],"mappings":"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","x_google_ignoreList":[0]}