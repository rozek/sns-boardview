{"version":3,"file":"sns-boardview.js","sources":["../src/sns-boardview.ts"],"sourcesContent":["/*******************************************************************************\n*                                                                              *\n*                BoardView for \"Shareable Note Stickers\" (SNS)                 *\n*                                                                              *\n*******************************************************************************/\n\n  import {\n    allowBoolean,\n    allowInteger, allowOrdinal, allowCardinal,\n    allowText, allowTextline,\n    allowFunction,\n    allowListSatisfying,\n    allowOneOf,\n  } from 'javascript-interface-library'\n\n  import {\n    SNS_Board, SNS_Sticker,\n    ValueIsSticker,\n    allowBoard,\n    CSSStyleOfVisual,\n  } from 'shareable-note-stickers'\n\n  import Conversion from 'svelte-coordinate-conversion'\n  const { fromDocumentTo } = Conversion\n\n  import { html, Component } from 'htm/preact'\n\n// @ts-ignore TS7016 *C* sometimes, I hate package management\n  import { DragRecognizerFor, DragClickRecognizerFor } from 'protoux'\n\n/**** install stylesheet for this BoardView ****/\n\n  const Stylesheet = document.createElement('style')\n    Stylesheet.setAttribute('id','SNS Stylesheet')\n    Stylesheet.innerHTML = `/*******************************************************************************\n*                                                                              *\n*                        Shareable Note Stickers (SNS)                         *\n*                                                                              *\n*******************************************************************************/\n\n/**** all SNS elements are absolutely positioned ****/\n\n  .SNS {\n    display:block; position:absolute;\n    margin:0px; padding:0px;\n    background:none; border:none; border-radius:0px; outline:none;\n  }\n\n/**** Error Indicator ****/\n\n  .SNS.ErrorIndicator {\n    overflow:hidden;\n    left:0px; top:0px; width:24px; height:24px;\n    background:url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3Csvg width='24px' height='24px' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 17.0001H12.01M12 10.0001V14.0001M6.41209 21.0001H17.588C19.3696 21.0001 20.2604 21.0001 20.783 20.6254C21.2389 20.2985 21.5365 19.7951 21.6033 19.238C21.6798 18.5996 21.2505 17.819 20.3918 16.2579L14.8039 6.09805C13.8897 4.4359 13.4326 3.60482 12.8286 3.32987C12.3022 3.09024 11.6978 3.09024 11.1714 3.32987C10.5674 3.60482 10.1103 4.4359 9.19614 6.09805L3.6082 16.2579C2.74959 17.819 2.32028 18.5996 2.39677 19.238C2.46351 19.7951 2.76116 20.2985 3.21709 20.6254C3.7396 21.0001 4.63043 21.0001 6.41209 21.0001Z' stroke='orange' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' fill='white'/%3E%3C/svg%3E\");\n    pointer-events:auto;\n  }\n\n\n/**** BoardView ****/\n\n  .SNS.BoardView {\n    left:0px; top:0px; right:0px; bottom:0px;\n  }\n\n/**** Sticker and Contents, Cover ****/\n\n  .SNS.Sticker {}\n  .SNS.Sticker > .SNS {\n    -webkit-user-select:none; -moz-user-select:none; -ms-user-select:none;\n    user-select:none;\n\n    display:block; position:absolute;\n    left:0px; top:0px; width:100%; height:100%; right:auto; bottom:auto;\n  }\n\n  .SNS.Cover {\n    -webkit-user-select:none; -moz-user-select:none; -ms-user-select:none;\n    user-select:none;\n\n    z-index:1000000;\n  }\n\n/**** Selection Markers ****/\n\n  .SNS.Sticker.selected, .SNS.Cover[selected] {\n    outline:dotted 2px orangered;\n  }\n\n  .SNS.ShapeHandle {\n    width:8px; height:8px;\n    background:orangered; border:solid 1px darkgray;\n    z-index:1000001; /* above .SNS.Cover */\n  }\n\n/**** Selection Lasso ****/\n\n  .SNS.Lasso {\n    background:rgba(255,69,0, 0.1); /* border:dashed 2px orangered; */\n  }\n\n/**** Dragging Guides ****/\n\n  .SNS.horizontalGuide.Edge {\n    left:0px; right:0px; height:1px;\n    border-top:dashed 1px orangered;\n  }\n  .SNS.verticalGuide.Edge {\n    top:0px; bottom:0px; width:1px;\n    border-left:dashed 1px orangered;\n  }\n\n  .SNS.horizontalGuide.Center {\n    left:0px; right:0px; height:1px;\n    border-top:dotted 1px orangered;\n  }\n  .SNS.verticalGuide.Center {\n    top:0px; bottom:0px; width:1px;\n    border-left:dotted 1px orangered;\n  }\n\n/**** Placeholder ****/\n\n  .SNS.Placeholder {\n    display:block; position:relative;\n    width:100%; height:100%;\n  }\n\n  .SNS.Placeholder > * {\n    display:block; position:absolute;\n    left:50%; top:50%;\n    transform:translate(-55%,-50%);\n    white-space:nowrap;\n  }\n\n`\n  document.head.appendChild(Stylesheet)\n\n/**** make some existing types indexable ****/\n\n  interface Indexable { [Key:string]:any }\n\n//------------------------------------------------------------------------------\n//--                             Type Definitions                             --\n//------------------------------------------------------------------------------\n\n/**** geometry-related types ****/\n\n  export type SNS_Location  = number         // mainly for illustrative purposes\n  export type SNS_Dimension = number                                     // dto.\n  export type SNS_Position  = { x:SNS_Location,y:SNS_Location }\n  export type SNS_Size      = { Width:SNS_Dimension,Height:SNS_Dimension }\n  export type SNS_Geometry  = { x:SNS_Location,y:SNS_Location, Width:SNS_Dimension,Height:SNS_Dimension }\n\n//------------------------------------------------------------------------------\n//--                              SNS_BoardView                               --\n//------------------------------------------------------------------------------\n\n  export class SNS_BoardView extends Component {\n    private _Board:SNS_Board|undefined\n\n    private _StickerList:SNS_Sticker[] = []\n    private _pointedSticker:SNS_Sticker|undefined\n    private _selectedStickers:SNS_Sticker[] = []       // for dragging & shaping\n    private _SelectionLimit:number = Infinity\n\n    private _LassoStart:SNS_Position|undefined\n    private _LassoEnd:SNS_Position|undefined\n    private _SelectionBeforeLasso:SNS_Sticker[] = []\n\n    private _ShapeMode:string|undefined\n    private _shapedStickers:SNS_Sticker[]|undefined\n    private _initialGeometries:SNS_Geometry[]|undefined\n\n    private _SnapToGrid:boolean = false\n    private _GridWidth:number   = 1\n    private _GridHeight:number  = 1\n\n    private _StickerRecognizerSlot = {}\n    private _ShapeHandleRecognizerSlot = {}\n    private _LassoRecognizerSlot = {}\n\n    public state:Indexable = { Value:0 }\n\n  /**** _mountBoard ****/\n\n    private _mountBoard (Board:SNS_Board|undefined):void {\n      if ((Board != null) && ((this as Component).base != null)) {\n        Board['_View'] = (this as Component).base\n        if (Board['_onMount'] != null) {\n          Board['_onMount']()\n        }\n      }\n      this._Board = Board\n    }\n\n  /**** _unmountBoard ****/\n\n    private _unmountBoard ():void {\n      const Board = this._Board\n      if (Board != null) {\n        Board['_View'] = undefined\n        if (Board['_onUnmount'] != null) {\n          Board['_onUnmount']()\n        }\n      }\n    }\n\n  /**** componentDidMount/WillUnmount ****/\n\n    public componentDidMount    ():void { this._mountBoard(this._Board) }\n    public componentWillUnmount ():void { this._unmountBoard() }\n\n  /**** rerender ****/\n\n    public rerender ():void {\n// @ts-ignore TS2339 \"Value\" is a valid property\n      (this as Component).setState({ Value:(this as Component).state.Value + 1 })\n    }\n\n  /**** render ****/\n\n    public render (PropSet:Indexable):any {\n      const my = this\n\n      let {\n        Classes, Board, StickerList, Placeholder, Mode,\n        SelectionLimit, selectedStickers,\n        onSelectionChange, onStickerSelected, onStickerDeselected,\n        SelectionFrameStyle, SelectionHandleStyle,\n        LassoMode, onGeometryChange,\n        SnapToGrid, GridWidth, GridHeight,\n      } = PropSet\n\n      if (this._Board !== Board) {\n        this._unmountBoard()\n        this._mountBoard(Board)\n      }\n\n    /**** finishDraggingAndShaping ****/\n\n      function finishDraggingAndShaping ():void {\n        my._pointedSticker    = undefined\n        my._shapedStickers    = undefined\n        my._initialGeometries = undefined\n      }\n\n    /**** abortDraggingAndShaping ****/\n\n      function abortDraggingAndShaping ():void {\n        if (my._shapedStickers != null) {\n          changeGeometriesTo(my._shapedStickers,my._initialGeometries as SNS_Geometry[])\n        }\n        finishDraggingAndShaping()\n      }\n\n    /**** validate given properties ****/\n\n      allowTextline      ('board CSS class names',Classes)\n      allowBoard                         ('board',Board)\n      allowListSatisfying         ('sticker list',StickerList, ValueIsSticker)\n      allowTextline           ('placeholder text',Placeholder)\n      allowOneOf                    ('board mode',Mode, ['edit','run'])\n      allowOrdinal             ('selection limit',SelectionLimit)\n      allowListSatisfying('list of selected stickers',selectedStickers, ValueIsSticker)\n      allowFunction  ('selection change callback',onSelectionChange)\n      allowFunction         ('selection callback',onStickerSelected)\n      allowFunction       ('deselection callback',onStickerDeselected)\n      allowTextline  ('selection frame CSS style',SelectionFrameStyle)\n      allowText     ('selection handle CSS style',SelectionHandleStyle)\n      allowOneOf          ('lasso selection mode',LassoMode, ['touch','contain'])\n      allowFunction   ('geometry change callback',onGeometryChange)\n      allowBoolean           ('\"SnapToGrid\" mode',SnapToGrid)\n      allowCardinal                 ('grid width',GridWidth)\n      allowCardinal                ('grid height',GridHeight)\n\n    /**** provide defaults for missing properties ****/\n\n      if (Classes              == null) { Classes               = '' }\n      if (Placeholder          == null) { Placeholder           = '(empty)' }\n      if (Mode                 == null) { Mode                  = 'run' }\n      if (SelectionLimit       == null) { SelectionLimit        = Infinity }\n      if (selectedStickers     == null) { selectedStickers      = [] }\n//    if (SelectionFrameStyle  == null) { SelectionFrameStyle   = 'dotted 2px orangered' }\n      if (SelectionHandleStyle == null) { SelectionHandleStyle  = 'background:orangered; border:solid 1px darkgray' }\n      if (LassoMode            == null) { LassoMode             = 'contain' }\n      if (SnapToGrid           == null) { SnapToGrid            = false }\n      if (GridWidth            == null) { GridWidth             = 10 }\n      if (GridHeight           == null) { GridHeight            = 10 }\n\n    /**** sanitize Selections ****/\n\n      const selectedStickerSet:Set<SNS_Sticker> = new Set()\n        selectedStickers = selectedStickers.filter((selectedSticker:SNS_Sticker) => {\n          if (\n            ValueIsSticker(selectedSticker) &&\n            ! selectedStickerSet.has(selectedSticker)\n          ) {\n            selectedStickerSet.add(selectedSticker)\n            return true\n          } else {\n            abortDraggingAndShaping()\n            return false        // invalid selections don't invoke any callbacks\n          }\n        })\n      if (selectedStickers.length > SelectionLimit) {\n        selectStickers(selectedStickers.slice(0,SelectionLimit))\n      }\n\n      my._StickerList      = StickerList\n      my._selectedStickers = selectedStickers   // needed for dragging & shaping\n      my._SelectionLimit   = SelectionLimit                              // dto.\n\n      my._SnapToGrid = SnapToGrid                                        // dto.\n      my._GridWidth  = GridWidth                                         // dto.\n      my._GridHeight = GridHeight                                        // dto.\n\n    /**** Sticker Selection ****/\n\n      function selectStickers (\n        SelectionA:SNS_Sticker[], SelectionB:SNS_Sticker[] = []\n      ):void {\n        const newSelection:SNS_Sticker[] = SelectionA.slice()\n        SelectionB.forEach((Sticker:SNS_Sticker) => {\n          if (newSelection.indexOf(Sticker) < 0) { newSelection.push(Sticker) }\n        })\n\n        if (selectedStickers.length > my._SelectionLimit) {\n          newSelection.length = my._SelectionLimit\n        }\n\n        const StickersToSelect:SNS_Sticker[]   = []\n        const StickersToDeselect:SNS_Sticker[] = []\n          newSelection.forEach((Sticker:SNS_Sticker) => {\n            if (my._selectedStickers.indexOf(Sticker) < 0) {\n              StickersToSelect.push(Sticker)\n            }\n          })\n\n          my._selectedStickers.forEach((Sticker:SNS_Sticker) => {\n            if (newSelection.indexOf(Sticker) < 0) {\n              StickersToDeselect.push(Sticker)\n            }\n          })\n        selectedStickers = my._selectedStickers = newSelection\n\n        if ((StickersToSelect.length > 0) || (StickersToDeselect.length > 0)) {\n          abortDraggingAndShaping()\n\n          if (onSelectionChange != null) {\n            onSelectionChange(selectedStickers)\n          }\n        }\n\n        if ((StickersToDeselect.length > 0) && (onStickerDeselected != null)) {\n          StickersToDeselect.forEach((deselectedSticker:SNS_Sticker) => {\n            onStickerDeselected(deselectedSticker)\n          })\n        }\n\n        if ((StickersToSelect.length > 0) && (onStickerSelected != null)) {\n          StickersToSelect.forEach((selectedSticker:SNS_Sticker) => {\n            onStickerSelected(selectedSticker)\n          })\n        }\n      }\n\n      function StickerIsSelected (Sticker:SNS_Sticker):boolean {\n        return (selectedStickers.indexOf(Sticker) >= 0)\n      }\n\n    /**** Lasso Selection ****/\n\n      function GeometryOfLasso ():SNS_Geometry {\n        const { x:x0,y:y0 } = my._LassoStart as SNS_Position\n        const { x:x1,y:y1 } = my._LassoEnd || my._LassoStart as SNS_Position\n\n        let LassoX = (x0 <= x1 ? x0 : x1); let LassoWidth  = (x0 <= x1 ? x1-x0 : x0-x1)\n        let LassoY = (y0 <= y1 ? y0 : y1); let LassoHeight = (y0 <= y1 ? y1-y0 : y0-y1)\n\n        return { x:LassoX,y:LassoY, Width:LassoWidth,Height:LassoHeight }\n      }\n\n      function CSSGeometryOfLasso ():string {\n        const { x,y, Width,Height } = GeometryOfLasso()\n        return `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px`\n      }\n\n      function StickersCaughtByLasso ():SNS_Sticker[] {\n        let { x:LassoX0,y:LassoY0, Width:LassoWidth,Height:LassoHeight } = GeometryOfLasso()\n        let LassoX1 = LassoX0+LassoWidth\n        let LassoY1 = LassoY0+LassoHeight\n\n        if (LassoMode === 'touch') {\n          return my._StickerList.filter((Sticker:SNS_Sticker) => {\n            if (! Sticker.isVisible || Sticker.isLocked) { return false }\n\n            const { x,y, Width,Height } = Sticker.Geometry\n            return (\n              (LassoX0 <= x+Width)  && (x <= LassoX1) &&\n              (LassoY0 <= y+Height) && (y <= LassoY1)\n            )\n          })\n        } else { // 'enclose'\n          return my._StickerList.filter((Sticker:SNS_Sticker) => {\n            if (! Sticker.isVisible || Sticker.isLocked) { return false }\n\n            const { x,y, Width,Height } = Sticker.Geometry\n            return (\n              (LassoX0 <= x) && (x+Width  <= LassoX1) &&\n              (LassoY0 <= y) && (y+Height <= LassoY1)\n            )\n          })\n        }\n      }\n\n      function dragLassoTo (x:SNS_Location,y:SNS_Location):void {\n        my._LassoEnd = { x,y }\n        selectStickers(my._SelectionBeforeLasso, StickersCaughtByLasso())\n      }\n\n      function applyLasso ():void {\n        my._LassoStart = my._LassoEnd = undefined\n        my._SelectionBeforeLasso = []\n      }\n\n      function abortLasso ():void {\n        my._LassoStart = my._LassoEnd = undefined\n        selectStickers(my._SelectionBeforeLasso)\n        my._SelectionBeforeLasso = []\n      }\n\n    /**** Lasso Recognizer ****/\n\n      function onBoardClick ():void {\n        selectStickers([])\n      }\n\n      const LassoRecognizer = DragClickRecognizerFor(my._LassoRecognizerSlot, {\n        onlyFrom:     '.SNS.BoardView,.SNS.Sticker,.SNS.Sticker *',\n        neverFrom:    '.SNS.Sticker.selectable,.SNS.Sticker.selectable *',\n        Threshold:    4,\n        onDragStarted:(x:number,y:number, dx:number,dy:number) => {\n          my._SelectionBeforeLasso = selectedStickers.slice()\n\n// @ts-ignore TS2345 type casting is ok here\n          ;({ left:x,top:y } = fromDocumentTo('local',{ left:x,top:y },(my as Component).base))\n\n          my._LassoStart = { x,y }\n          dragLassoTo(x,y)\n          my.rerender()\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n// @ts-ignore TS2532 my._LassoStart is _not_ undefined\n          dragLassoTo(my._LassoStart.x+dx,my._LassoStart.y+dy)\n          my.rerender()\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n// @ts-ignore TS2532 my._LassoStart is _not_ undefined\n          dragLassoTo(my._LassoStart.x+dx,my._LassoStart.y+dy)\n          applyLasso()\n          my.rerender()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortLasso()\n          my.rerender()\n        },\n        onClicked:onBoardClick\n      })\n\n    /**** Geometry Handling ****/\n\n      function changeGeometriesTo (\n        StickerList:SNS_Sticker[], GeometryList:SNS_Geometry[]\n      ):void {\n        if (onGeometryChange != null) {\n          onGeometryChange(StickerList,GeometryList)\n          my.rerender()\n        }\n      }\n\n      function changeGeometriesBy (\n        StickerList:SNS_Sticker[], Mode:string, dx:number,dy:number,\n        initialGeometries?:SNS_Geometry[]\n      ):void {\n        if (onGeometryChange == null) { return }\n\n        let dX:number = 0, dY:number = 0, dW:number = 0, dH:number = 0\n        switch (Mode) {\n          case 'nw': dX = dx; dW = -dx; dY = dy; dH = -dy; break\n          case 'n':                     dY = dy; dH = -dy; break\n          case 'ne':          dW = dx;  dY = dy; dH = -dy; break\n          case 'e':           dW = dx;                     break\n          case 'se':          dW = dx;           dH = dy;  break\n          case 's':                              dH = dy;  break\n          case 'sw': dX = dx; dW = -dx;          dH = dy;  break\n          case 'w':  dX = dx; dW = -dx;                    break\n          case 'c':  dX = dx;           dY = dy;\n        }\n\n        if (initialGeometries == null) {\n          initialGeometries = my._initialGeometries as SNS_Geometry[]\n        }\n\n        const GeometryList = initialGeometries.map(\n          (Geometry:SNS_Geometry) => {\n            let Width:number  = Math.max(0,Geometry.Width+dW)\n            let Height:number = Math.max(0,Geometry.Height+dH)\n\n            let xl:number = Geometry.x+dX, xr = xl + Width\n            let yt:number = Geometry.y+dY, yb = yt + Height\n\n            if (my._SnapToGrid) {\n              let xl_ = my._GridWidth*Math.round(xl/my._GridWidth)\n              let xr_ = my._GridWidth*Math.round(xr/my._GridWidth)\n              let yt_ = my._GridHeight*Math.round(yt/my._GridHeight)\n              let yb_ = my._GridHeight*Math.round(yb/my._GridHeight)\n\n              switch (Mode) {\n                case 'nw': xl = Math.min(xl_,xr); yt = Math.min(yt_,yb); break\n                case 'n':                         yt = Math.min(yt_,yb); break\n                case 'ne': xr = Math.max(xl,xr_); yt = Math.min(yt_,yb); break\n                case 'e':  xr = Math.max(xl,xr_);                        break\n                case 'se': xr = Math.max(xl,xr_); yb = Math.max(yt,yb_); break\n                case 's':                         yb = Math.max(yt,yb_); break\n                case 'sw': xl = Math.min(xl_,xr); yb = Math.max(yt,yb_); break\n                case 'w':  xl = Math.min(xl_,xr);                        break\n                case 'c':  xl = xl_; xr = xl+Width; yt = yt_; yb = yt+Height\n              }\n            }\n            return { x:xl,y:yt, Width:xr-xl,Height:yb-yt }\n          }\n        )\n\n        changeGeometriesTo(StickerList,GeometryList)\n      }\n\n    /**** Sticker Drag/Select Recognizer ****/\n\n      const onStickerClick = (x:number,y:number, Event:PointerEvent) => {\n        if (SelectionLimit === 0) { return }\n\n        const Sticker = my._pointedSticker as SNS_Sticker\n\n        let SelectionChanged:boolean = false\n        let StickersToSelect:SNS_Sticker[], StickersToDeselect:SNS_Sticker[]\n        if (Event.shiftKey || Event.metaKey) { // additive/subtractive selection\n          SelectionChanged = true\n          if (StickerIsSelected(Sticker)) {\n            StickersToDeselect = [Sticker]\n            selectedStickers   = selectedStickers.filter(\n              (selectedSticker:SNS_Sticker) => (selectedSticker !== Sticker)\n            )\n          } else {\n            if (selectedStickers.length === SelectionLimit) {\n              StickersToDeselect = [selectedStickers.shift()]\n            }\n            StickersToSelect = [Sticker]\n            selectedStickers.push(Sticker)\n          }\n        } else {                                         // definitive selection\n          StickersToDeselect = selectedStickers.filter(\n            (selectedSticker:SNS_Sticker) => (selectedSticker !== Sticker)\n          )\n          SelectionChanged = ! StickerIsSelected(Sticker)\n          StickersToSelect  = (SelectionChanged ? [Sticker] : [])\n          selectedStickers  = [Sticker]\n        }\n\n        if (SelectionChanged && (onSelectionChange != null)) {\n          onSelectionChange(selectedStickers)\n        }\n\n// @ts-ignore TS2454 let's check IF variables were assigned\n        if ((StickersToDeselect != null) && (onStickerDeselected != null)) {\n          StickersToDeselect.forEach((deselectedSticker:SNS_Sticker) => {\n            onStickerDeselected(deselectedSticker)\n          })\n        }\n\n// @ts-ignore TS2454 let's check IF variables were assigned\n        if ((StickersToSelect != null) && (onStickerSelected != null)) {\n          StickersToSelect.forEach((selectedSticker:SNS_Sticker) => {\n            onStickerSelected(selectedSticker)\n          })\n        }\n\n        if (SelectionChanged) { my.rerender() }\n      }\n\n    /**** StickerRecognizer ****/\n\n      const StickerRecognizer = DragClickRecognizerFor(my._StickerRecognizerSlot, {\n        onlyFrom:     '.SNS.Cover',\n        Threshold:    4,\n        onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n          if (! StickerIsSelected(my._pointedSticker as SNS_Sticker)) {\n            if (Event.shiftKey || Event.metaKey) {  // additive/subtractive sel.\n              selectStickers([my._pointedSticker as SNS_Sticker],my._selectedStickers)\n            } else {\n              selectStickers([my._pointedSticker as SNS_Sticker])\n            }\n          }\n\n          my._shapedStickers    = my._selectedStickers\n          my._initialGeometries = my._selectedStickers.map(\n            (Sticker:SNS_Sticker) => Sticker.Geometry\n          )\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n          finishDraggingAndShaping()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortDraggingAndShaping()\n        },\n        onClicked:onStickerClick\n      })\n\n    /**** handleStickerEvent ****/\n\n      const handleStickerEvent = (Event:PointerEvent, Sticker:SNS_Sticker) => {\n        my._ShapeMode      = 'c'\n        my._pointedSticker = Sticker\n        StickerRecognizer(Event)\n      }\n\n    /**** ShapeHandle Recognizer ****/\n\n      const ShapeHandleRecognizer = DragRecognizerFor(my._ShapeHandleRecognizerSlot, {\n        onlyFrom:     '.SNS.ShapeHandle',\n        Threshold:    0,\n        onDragStarted:(x:number,y:number, dx:number,dy:number) => {\n          my._shapedStickers    = my._selectedStickers\n          my._initialGeometries = my._selectedStickers.map(\n            (Sticker:SNS_Sticker) => Sticker.Geometry\n          )\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n          finishDraggingAndShaping()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortDraggingAndShaping()\n        }\n      })\n\n      const handleShapeEvent = (Event:PointerEvent, Mode:string) => {\n        my._ShapeMode = Mode\n        ShapeHandleRecognizer(Event)\n      }\n\n    /**** builtinSelectionFor ****/\n\n      function builtinSelectionFor (Sticker:SNS_Sticker):Function {\n        return function (Event:PointerEvent):void {\n          if (Event.button === 0) { selectStickers([Sticker]) }\n        }\n      }\n\n    /**** builtinDraggingFor ****/\n\n      const DragRecognizer:WeakMap<SNS_Sticker,Function> = new WeakMap()\n      const initialGeometry:WeakMap<SNS_Sticker,SNS_Geometry> = new WeakMap()\n\n      function builtinDraggingFor (Sticker:SNS_Sticker):Function {\n        let Recognizer = DragRecognizer.get(Sticker)\n        if (Recognizer == null) {\n          DragRecognizer.set(Sticker, Recognizer = DragRecognizerFor(Sticker, {\n            onlyFrom:     '.builtinDraggable',\n            neverFrom:    '.notBuiltinDraggable',\n            Threshold:    4,\n            onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n              initialGeometry.set(Sticker,Sticker.Geometry)\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n            },\n            onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n              if (! initialGeometry.has(Sticker)) { return }\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n            },\n            onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n              if (! initialGeometry.has(Sticker)) { return }\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n              initialGeometry.delete(Sticker)\n            },\n            onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n              if (initialGeometry.has(Sticker)) {\n                changeGeometriesTo([Sticker],[initialGeometry.get(Sticker) as SNS_Geometry])\n              }\n              initialGeometry.delete(Sticker)\n            }\n          }))\n        }\n        return Recognizer as Function\n      }\n\n    /**** horizontal Guides ****/\n\n      function horizontalGuides ():any {\n        if (my._shapedStickers == null) { return '' }\n\n        const EdgeSet:Indexable   = {}\n        const CenterSet:Indexable = {}\n        my._StickerList.filter(\n          (Sticker:SNS_Sticker) => ! StickerIsSelected(Sticker)\n        ).forEach((Sticker:SNS_Sticker) => {\n          const { y,Height } = Sticker.Geometry\n            const yt = Math.round(y)\n            const ym = Math.round(y+Height/2)\n            const yb = Math.round(y+Height)\n          EdgeSet[yt] = EdgeSet[yb] = true\n          CenterSet[ym] = true\n        })\n\n        const horizontalSet:Indexable = {}\n        my._shapedStickers.forEach((Sticker:SNS_Sticker) => {\n          const { y,Height } = Sticker.Geometry\n            const yt = Math.round(y)\n            const ym = Math.round(y+Height/2)\n            const yb = Math.round(y+Height)\n          if (EdgeSet[yt])                                     { horizontalSet[yt] = 'Edge' }\n          if (EdgeSet[ym]   && (horizontalSet[ym] !== 'Edge')) { horizontalSet[ym] = 'Center' }\n          if (EdgeSet[yb])                                     { horizontalSet[yb] = 'Edge' }\n          if (CenterSet[yt] && (horizontalSet[yt] !== 'Edge')) { horizontalSet[yt] = 'Center' }\n          if (CenterSet[ym] && (horizontalSet[ym] !== 'Edge')) { horizontalSet[ym] = 'Center' }\n          if (CenterSet[yb] && (horizontalSet[yb] !== 'Edge')) { horizontalSet[yb] = 'Center' }\n        })\n\n        const horizontalList:string[] = []\n          for (let y in horizontalSet) {\n            if (horizontalSet[y] != null) { horizontalList.push(y) }\n          }\n\n        return html`${horizontalList.map((y:string) => html`\n          <div class=\"SNS horizontalGuide ${horizontalSet[y]}\" style=\"top:${y}px\"/>\n        `)}`\n      }\n\n    /**** vertical Guides ****/\n\n      function verticalGuides ():any {\n        if (my._shapedStickers == null) { return '' }\n\n        const EdgeSet:Indexable   = {}\n        const CenterSet:Indexable = {}\n        my._StickerList.filter(\n          (Sticker:SNS_Sticker) => ! StickerIsSelected(Sticker)\n        ).forEach((Sticker:SNS_Sticker) => {\n          const { x,Width } = Sticker.Geometry\n            const xl = Math.round(x)\n            const xm = Math.round(x+Width/2)\n            const xr = Math.round(x+Width)\n          EdgeSet[xl] = EdgeSet[xr] = true\n          CenterSet[xm] = true\n        })\n\n        const verticalSet:Indexable = {}\n        my._shapedStickers.forEach((Sticker:SNS_Sticker) => {\n          const { x,Width } = Sticker.Geometry\n            const xl = Math.round(x)\n            const xm = Math.round(x+Width/2)\n            const xr = Math.round(x+Width)\n          if (EdgeSet[xl])                                   { verticalSet[xl] = 'Edge' }\n          if (EdgeSet[xm]   && (verticalSet[xm] !== 'Edge')) { verticalSet[xm] = 'Center' }\n          if (EdgeSet[xr])                                   { verticalSet[xr] = 'Edge' }\n          if (CenterSet[xl] && (verticalSet[xl] !== 'Edge')) { verticalSet[xl] = 'Center' }\n          if (CenterSet[xm] && (verticalSet[xm] !== 'Edge')) { verticalSet[xm] = 'Center' }\n          if (CenterSet[xr] && (verticalSet[xr] !== 'Edge')) { verticalSet[xr] = 'Center' }\n        })\n\n        const verticalList:string[] = []\n          for (let x in verticalSet) {\n            if (verticalSet[x] != null) { verticalList.push(x) }\n          }\n        return html`${verticalList.map((x:string) => html`\n          <div class=\"SNS verticalGuide ${verticalSet[x]}\" style=\"left:${x}px\"/>\n        `)}`\n      }\n\n    /**** actual rendering ****/\n\n      const BoardStyle = (Board == null ? undefined : CSSStyleOfVisual(Board))\n\n      return html`<div class=\"SNS BoardView ${Classes}\" style=${BoardStyle}\n        onPointerDown=${LassoRecognizer} onPointerMove=${LassoRecognizer}\n        onPointerUp=${LassoRecognizer} onPointerCancel=${LassoRecognizer}\n      >\n        ${Board == null\n          ? html`<div class=\"SNS Placeholder\"><div>(no Board to show)</div></div>`\n          : StickerList == null\n            ? html`<div class=\"SNS Placeholder\"><div>(no Stickers to show)</div></div>`\n            : StickerList.map((Sticker:SNS_Sticker) => {\n                if (! Sticker.isVisible) { return '' }\n\n                const Geometry   = Sticker.Geometry\n// @ts-ignore TS2339 strange: TS does not recognize \"isSelectable\"\n                const selectable = Sticker.isSelectable     // Mode-independent!\n                const selected   = StickerIsSelected(Sticker)\n\n                return html`<${SNS_StickerView} Sticker=${Sticker} key=${Sticker.Id}\n                  selectable=${selectable}\n                  selected=${selected && (Mode === 'run')}\n                  SelectionFrameStyle=${SelectionFrameStyle}\n                  Geometry=${Geometry}\n                  builtinDragging=${builtinDraggingFor(Sticker)}\n                  builtinSelection=${builtinSelectionFor(Sticker)}\n                />`\n              })\n        }\n\n        ${(StickerList != null) && (Mode === 'edit')\n          ? StickerList.map((Sticker:SNS_Sticker) => {\n              if (! Sticker.isVisible) { return '' }\n\n              const selected = StickerIsSelected(Sticker)\n\n              return html`\n                <${SNS_Cover} Sticker=${Sticker} key=${Sticker.Id+'c'}\n                  style=\"${Sticker.isLocked ? 'pointer-events:none' : ''}\"\n                  selected=${selected}\n                  onPointerEvent=${(Event:PointerEvent) => handleStickerEvent(Event,Sticker)}\n                />\n              `\n            })\n          : ''\n        }\n\n        ${(selectedStickers.length > 0)\n          ? selectedStickers.filter(\n              (Sticker:SNS_Sticker) => Sticker.isVisible && ! Sticker.isLocked\n            ).map((Sticker:SNS_Sticker) => {\n              const Id       = Sticker.Id\n              const Geometry = Sticker.Geometry\n              return html`\n                <${SNS_ShapeHandle} key=${Id+'nw'} Mode=\"nw\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'nw')}/>\n                <${SNS_ShapeHandle} key=${Id+'n'}  Mode=\"n\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'n')}/>\n                <${SNS_ShapeHandle} key=${Id+'ne'} Mode=\"ne\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'ne')}/>\n                <${SNS_ShapeHandle} key=${Id+'e'}  Mode=\"e\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'e')}/>\n                <${SNS_ShapeHandle} key=${Id+'se'} Mode=\"se\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'se')}/>\n                <${SNS_ShapeHandle} key=${Id+'s'}  Mode=\"s\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'s')}/>\n                <${SNS_ShapeHandle} key=${Id+'sw'} Mode=\"sw\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'sw')}/>\n                <${SNS_ShapeHandle} key=${Id+'w'}  Mode=\"w\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'w')}/>\n              `\n            })\n          : ''\n        }\n        ${this._LassoStart == null\n          ? ''\n          : html`<div class=\"SNS Lasso\" style=${CSSGeometryOfLasso()}></>`\n        }\n        ${horizontalGuides()}\n        ${verticalGuides()}\n      </div>`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                             SNS_StickerView                              --\n//------------------------------------------------------------------------------\n\n  class SNS_StickerView extends Component {\n    private _Sticker:SNS_Sticker|undefined\n\n  /**** componentDidMount ****/\n\n    public componentDidMount ():void {\n      const Sticker = this._Sticker as SNS_Sticker\n\n      Sticker['_View'] = (this as Component).base\n      if (Sticker['_onMount'] != null) {\n        Sticker['_onMount']()\n      }\n    }\n\n  /**** componentWillUnmount ****/\n\n    public componentWillUnmount ():void {\n      const Sticker = this._Sticker as SNS_Sticker\n\n      Sticker['_View'] = undefined\n      if (Sticker['_onUnmount'] != null) {\n        Sticker['_onUnmount']()\n      }\n    }\n\n  /**** render ****/\n\n    public render (PropSet:Indexable):any {\n      let {\n        Sticker, selectable, selected, SelectionFrameStyle,\n        Geometry, builtinSelection, builtinDragging\n      } = PropSet\n\n      this._Sticker = Sticker\n\n      let { x,y, Width,Height } = Geometry\n        allowInteger('sticker x position',x)\n        allowInteger('sticker y position',y)\n        allowOrdinal     ('sticker width',Width)\n        allowOrdinal    ('sticker height',Height)\n      const CSSGeometry = (\n        (x != null) && (Width != null) && (y != null) && (Height != null)\n        ? `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n        : ''\n      )\n\n      return html`<div class=\"\n        SNS Sticker ${selectable ? 'selectable' : ''} ${selected ? 'selected' : ''}\n      \" style=\"\n        ${CSSGeometry};\n        ${selected && (SelectionFrameStyle != null) ? `outline:${SelectionFrameStyle};` : ''}\n        ${CSSStyleOfVisual(Sticker) || ''}\n      \">\n        ${selectable\n          ? Sticker.Rendering({ builtinSelection,builtinDragging })\n          : Sticker.Rendering()\n        }\n      </div>`\n    }\n  }//------------------------------------------------------------------------------\n//--                                SNS_Cover                                 --\n//------------------------------------------------------------------------------\n\n  class SNS_Cover extends Component {\n    public render (PropSet:Indexable):any {\n      let { Sticker, onPointerEvent, ...otherProps } = PropSet\n\n      let { x,y, Width,Height } = Sticker.Geometry\n\n      const CSSGeometry = (\n        (x != null) && (Width != null) && (y != null) && (Height != null)\n        ? `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n        : ''\n      )\n\n      return html`<div class=\"SNS Cover\" style=\"${CSSGeometry}\" ...${otherProps}\n        onPointerDown=${onPointerEvent} onPointerMove=${onPointerEvent}\n        onPointerUp=${onPointerEvent} onPointerCancel=${onPointerEvent}\n      />`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                             SNS_ShapeHandle                              --\n//------------------------------------------------------------------------------\n\n  class SNS_ShapeHandle extends Component {\n    public render (PropSet:Indexable):any {\n      let { Mode, Geometry, onPointerEvent, ...otherProps } = PropSet\n\n      let { x,y, Width,Height } = Geometry\n      const xl = x-8, xm = Math.round(x+Width/2)-4,  xr = x+Width\n      const yt = y-8, ym = Math.round(y+Height/2)-4, yb = y+Height\n\n      let CSSGeometry, Cursor\n      switch (Mode) {\n        case 'nw': CSSGeometry = `left:${xl}px; top:${yt}px;`; Cursor = 'nwse'; break\n        case 'n':  CSSGeometry = `left:${xm}px; top:${yt}px;`; Cursor = 'ns';   break\n        case 'ne': CSSGeometry = `left:${xr}px; top:${yt}px;`; Cursor = 'nesw'; break\n        case 'e':  CSSGeometry = `left:${xr}px; top:${ym}px;`; Cursor = 'ew';   break\n        case 'se': CSSGeometry = `left:${xr}px; top:${yb}px;`; Cursor = 'nwse'; break\n        case 's':  CSSGeometry = `left:${xm}px; top:${yb}px;`; Cursor = 'ns';   break\n        case 'sw': CSSGeometry = `left:${xl}px; top:${yb}px;`; Cursor = 'nesw'; break\n        case 'w':  CSSGeometry = `left:${xl}px; top:${ym}px;`; Cursor = 'ew';   break\n      }\n      Cursor = 'cursor:' + Cursor + '-resize'\n\n      return html`<div class=\"SNS ShapeHandle\" style=\"${CSSGeometry} ${Cursor}\" ...${otherProps}\n        onPointerDown=${onPointerEvent} onPointerMove=${onPointerEvent}\n        onPointerUp=${onPointerEvent} onPointerCancel=${onPointerEvent}\n      />`\n    }\n  }\n\n// @ts-ignore TS2339 allow global variable \"SNS_BoardView\"\n  window.SNS_BoardView = SNS_BoardView\n\n  document.dispatchEvent(\n// @ts-ignore TS2339 allow global variable \"SNS_BoardView\"\n    new CustomEvent('SNS_BoardView',{ detail:window.SNS_BoardView })\n  )\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_excluded","_excluded2","fromDocumentTo","Conversion","Stylesheet","document","createElement","setAttribute","innerHTML","head","appendChild","SNS_BoardView","_Component","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_Board","_StickerList","_pointedSticker","_selectedStickers","_SelectionLimit","Infinity","_LassoStart","_LassoEnd","_SelectionBeforeLasso","_ShapeMode","_shapedStickers","_initialGeometries","_SnapToGrid","_GridWidth","_GridHeight","_StickerRecognizerSlot","_ShapeHandleRecognizerSlot","_LassoRecognizerSlot","state","Value","_inheritsLoose","_proto","prototype","_mountBoard","Board","this","base","_unmountBoard","undefined","componentDidMount","componentWillUnmount","rerender","setState","render","PropSet","my","Classes","StickerList","Placeholder","Mode","SelectionLimit","selectedStickers","onSelectionChange","onStickerSelected","onStickerDeselected","SelectionFrameStyle","SelectionHandleStyle","LassoMode","onGeometryChange","SnapToGrid","GridWidth","GridHeight","finishDraggingAndShaping","abortDraggingAndShaping","changeGeometriesTo","allowTextline","allowBoard","allowListSatisfying","ValueIsSticker","allowOneOf","allowOrdinal","allowFunction","allowText","allowBoolean","allowCardinal","selectedStickerSet","Set","selectStickers","SelectionA","SelectionB","newSelection","slice","forEach","Sticker","indexOf","push","StickersToSelect","StickersToDeselect","deselectedSticker","selectedSticker","StickerIsSelected","GeometryOfLasso","_my$_LassoStart","x0","x","y0","y","_ref","x1","y1","Width","Height","dragLassoTo","_GeometryOfLasso2","LassoX0","LassoY0","LassoX1","LassoY1","filter","isVisible","isLocked","_Sticker$Geometry","Geometry","_Sticker$Geometry2","has","add","LassoRecognizer","DragClickRecognizerFor","onlyFrom","neverFrom","Threshold","onDragStarted","dx","dy","_fromDocumentTo","left","top","onDragContinued","onDragFinished","onDragCancelled","onClicked","GeometryList","changeGeometriesBy","initialGeometries","dX","dY","dW","dH","map","Math","max","xl","xr","yt","yb","xl_","round","xr_","yt_","yb_","min","_GeometryOfLasso","StickerRecognizer","Event","shiftKey","metaKey","SelectionChanged","shift","ShapeHandleRecognizer","DragRecognizerFor","handleShapeEvent","DragRecognizer","WeakMap","initialGeometry","BoardStyle","CSSStyleOfVisual","html","_taggedTemplateLiteralLoose","selectable","isSelectable","selected","SNS_StickerView","Id","Recognizer","get","set","builtinDraggingFor","button","builtinSelectionFor","SNS_Cover","handleStickerEvent","SNS_ShapeHandle","CSSGeometryOfLasso","EdgeSet","CenterSet","_Sticker$Geometry3","ym","horizontalSet","_Sticker$Geometry4","horizontalList","horizontalGuides","_Sticker$Geometry5","xm","verticalSet","_Sticker$Geometry6","verticalList","verticalGuides","Component","_Component2","_this2","_len2","_key2","_Sticker","_proto2","builtinSelection","builtinDragging","allowInteger","CSSGeometry","Rendering","_Component3","onPointerEvent","otherProps","_objectWithoutPropertiesLoose","_Sticker$Geometry7","_Component4","Cursor","window","dispatchEvent","CustomEvent","detail"],"mappings":"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"}