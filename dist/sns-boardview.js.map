{"version":3,"file":"sns-boardview.js","sources":["../src/sns-boardview.ts"],"sourcesContent":["/*******************************************************************************\n*                                                                              *\n*                BoardView for \"Shareable Note Stickers\" (SNS)                 *\n*                                                                              *\n*******************************************************************************/\n\n  import {\n    allowBoolean,\n    allowInteger, allowOrdinal, allowCardinal,\n    allowText, allowTextline,\n    allowFunction,\n    allowListSatisfying,\n    allowOneOf,\n  } from 'javascript-interface-library'\n\n  import {\n    SNS_Board, SNS_Sticker,\n    ValueIsSticker,\n    allowBoard,\n    CSSStyleOfVisual,\n  } from 'shareable-note-stickers'\n\n  import Conversion from 'svelte-coordinate-conversion'\n  const { fromDocumentTo } = Conversion\n\n  import { html, Component } from 'htm/preact'\n\n// @ts-ignore TS7016 *C* sometimes, I hate package management\n  import { DragRecognizerFor, DragClickRecognizerFor } from 'protoux'\n\n/**** install stylesheet for this BoardView ****/\n\n  const Stylesheet = document.createElement('style')\n    Stylesheet.setAttribute('id','SNS Stylesheet')\n    Stylesheet.innerHTML = `/*******************************************************************************\n*                                                                              *\n*                        Shareable Note Stickers (SNS)                         *\n*                                                                              *\n*******************************************************************************/\n\n/**** all SNS elements are absolutely positioned ****/\n\n  .SNS {\n    display:block; position:absolute;\n    margin:0px; padding:0px;\n    background:none; border:none; border-radius:0px; outline:none;\n  }\n\n/**** \"brokenSticker\" and Error Indicator ****/\n\n  .SNS.brokenSticker {\n    overflow:hidden;\n    border:dotted 1px orange; background:rgba(255,0,0,0.1);\n  }\n\n  .SNS.ErrorIndicator {\n    overflow:hidden;\n    left:0px; top:0px; width:24px; height:24px;\n    background:url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3Csvg width='24px' height='24px' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 17.0001H12.01M12 10.0001V14.0001M6.41209 21.0001H17.588C19.3696 21.0001 20.2604 21.0001 20.783 20.6254C21.2389 20.2985 21.5365 19.7951 21.6033 19.238C21.6798 18.5996 21.2505 17.819 20.3918 16.2579L14.8039 6.09805C13.8897 4.4359 13.4326 3.60482 12.8286 3.32987C12.3022 3.09024 11.6978 3.09024 11.1714 3.32987C10.5674 3.60482 10.1103 4.4359 9.19614 6.09805L3.6082 16.2579C2.74959 17.819 2.32028 18.5996 2.39677 19.238C2.46351 19.7951 2.76116 20.2985 3.21709 20.6254C3.7396 21.0001 4.63043 21.0001 6.41209 21.0001Z' stroke='orange' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' fill='white'/%3E%3C/svg%3E\");\n    pointer-events:auto;\n  }\n\n\n/**** BoardView ****/\n\n  .SNS.BoardView {\n    left:0px; top:0px; right:0px; bottom:0px;\n  }\n\n/**** Sticker and Contents, Cover ****/\n\n  .SNS.Sticker {}\n  .SNS.Sticker > .SNS {\n    -webkit-user-select:none; -moz-user-select:none; -ms-user-select:none;\n    user-select:none;\n\n    display:block; position:absolute;\n    left:0px; top:0px; width:100%; height:100%; right:auto; bottom:auto;\n  }\n\n  .SNS.Cover {\n    -webkit-user-select:none; -moz-user-select:none; -ms-user-select:none;\n    user-select:none;\n\n    z-index:1000000;\n  }\n\n/**** Selection Markers ****/\n\n  .SNS.Sticker.selected, .SNS.Cover[selected] {\n    outline:dotted 2px orangered;\n  }\n\n  .SNS.ShapeHandle {\n    width:8px; height:8px;\n    background:orangered; border:solid 1px darkgray;\n    z-index:1000001; /* above .SNS.Cover */\n  }\n\n/**** Selection Lasso ****/\n\n  .SNS.Lasso {\n    background:rgba(255,69,0, 0.1); /* border:dashed 2px orangered; */\n  }\n\n/**** Dragging Guides ****/\n\n  .SNS.horizontalGuide.Edge {\n    left:0px; right:0px; height:1px;\n    border-top:dashed 1px orangered;\n  }\n  .SNS.verticalGuide.Edge {\n    top:0px; bottom:0px; width:1px;\n    border-left:dashed 1px orangered;\n  }\n\n  .SNS.horizontalGuide.Center {\n    left:0px; right:0px; height:1px;\n    border-top:dotted 1px orangered;\n  }\n  .SNS.verticalGuide.Center {\n    top:0px; bottom:0px; width:1px;\n    border-left:dotted 1px orangered;\n  }\n\n/**** Placeholder ****/\n\n  .SNS.Placeholder {\n    display:block; position:relative;\n    width:100%; height:100%;\n  }\n\n  .SNS.Placeholder > * {\n    display:block; position:absolute;\n    left:50%; top:50%;\n    transform:translate(-55%,-50%);\n    white-space:nowrap;\n  }\n\n`\n  document.head.appendChild(Stylesheet)\n\n/**** make some existing types indexable ****/\n\n  interface Indexable { [Key:string]:any }\n\n//------------------------------------------------------------------------------\n//--                             Type Definitions                             --\n//------------------------------------------------------------------------------\n\n/**** geometry-related types ****/\n\n  export type SNS_Location  = number         // mainly for illustrative purposes\n  export type SNS_Dimension = number                                     // dto.\n  export type SNS_Position  = { x:SNS_Location,y:SNS_Location }\n  export type SNS_Size      = { Width:SNS_Dimension,Height:SNS_Dimension }\n  export type SNS_Geometry  = { x:SNS_Location,y:SNS_Location, Width:SNS_Dimension,Height:SNS_Dimension }\n\n//------------------------------------------------------------------------------\n//--                              SNS_BoardView                               --\n//------------------------------------------------------------------------------\n\n  export class SNS_BoardView extends Component {\n    private _Board:SNS_Board|undefined\n\n    private _StickerList:SNS_Sticker[] = []\n    private _pointedSticker:SNS_Sticker|undefined\n    private _selectedStickers:SNS_Sticker[] = []       // for dragging & shaping\n    private _SelectionLimit:number = Infinity\n\n    private _LassoStart:SNS_Position|undefined\n    private _LassoEnd:SNS_Position|undefined\n    private _SelectionBeforeLasso:SNS_Sticker[] = []\n\n    private _ShapeMode:string|undefined\n    private _shapedStickers:SNS_Sticker[]|undefined\n    private _initialGeometries:SNS_Geometry[]|undefined\n\n    private _SnapToGrid:boolean = false\n    private _GridWidth:number   = 1\n    private _GridHeight:number  = 1\n\n    private _StickerRecognizerSlot = {}\n    private _ShapeHandleRecognizerSlot = {}\n    private _LassoRecognizerSlot = {}\n\n    public state:Indexable = { Value:0 }\n\n  /**** _mountBoard ****/\n\n    private _mountBoard (Board:SNS_Board|undefined):void {\n      if ((Board != null) && ((this as Component).base != null)) {\n        Board['_View'] = (this as Component).base\n        if (Board['_onMount'] != null) {\n          Board['_onMount']()\n        }\n      }\n      this._Board = Board\n    }\n\n  /**** _unmountBoard ****/\n\n    private _unmountBoard ():void {\n      const Board = this._Board\n      if (Board != null) {\n        Board['_View'] = undefined\n        if (Board['_onUnmount'] != null) {\n          Board['_onUnmount']()\n        }\n      }\n    }\n\n  /**** componentDidMount/WillUnmount ****/\n\n    public componentDidMount    ():void { this._mountBoard(this._Board) }\n    public componentWillUnmount ():void { this._unmountBoard() }\n\n  /**** rerender ****/\n\n    public rerender ():void {\n// @ts-ignore TS2339 \"Value\" is a valid property\n      (this as Component).setState({ Value:(this as Component).state.Value + 1 })\n    }\n\n  /**** render ****/\n\n    public render (PropSet:Indexable):any {\n      const my = this\n\n      let {\n        Classes, Board, StickerList, Placeholder, Mode,\n        SelectionLimit, selectedStickers,\n        onSelectionChange, onStickerSelected, onStickerDeselected,\n        SelectionFrameStyle, SelectionHandleStyle,\n        LassoMode, onGeometryChange,\n        SnapToGrid, GridWidth, GridHeight,\n      } = PropSet\n\n      if (this._Board !== Board) {\n        this._unmountBoard()\n        this._mountBoard(Board)\n      }\n\n    /**** finishDraggingAndShaping ****/\n\n      function finishDraggingAndShaping ():void {\n        my._pointedSticker    = undefined\n        my._shapedStickers    = undefined\n        my._initialGeometries = undefined\n      }\n\n    /**** abortDraggingAndShaping ****/\n\n      function abortDraggingAndShaping ():void {\n        if (my._shapedStickers != null) {\n          changeGeometriesTo(my._shapedStickers,my._initialGeometries as SNS_Geometry[])\n        }\n        finishDraggingAndShaping()\n      }\n\n    /**** validate given properties ****/\n\n      allowTextline      ('board CSS class names',Classes)\n      allowBoard                         ('board',Board)\n      allowListSatisfying         ('sticker list',StickerList, ValueIsSticker)\n      allowTextline           ('placeholder text',Placeholder)\n      allowOneOf                    ('board mode',Mode, ['edit','run'])\n      allowOrdinal             ('selection limit',SelectionLimit)\n      allowListSatisfying('list of selected stickers',selectedStickers, ValueIsSticker)\n      allowFunction  ('selection change callback',onSelectionChange)\n      allowFunction         ('selection callback',onStickerSelected)\n      allowFunction       ('deselection callback',onStickerDeselected)\n      allowTextline  ('selection frame CSS style',SelectionFrameStyle)\n      allowText     ('selection handle CSS style',SelectionHandleStyle)\n      allowOneOf          ('lasso selection mode',LassoMode, ['touch','contain'])\n      allowFunction   ('geometry change callback',onGeometryChange)\n      allowBoolean           ('\"SnapToGrid\" mode',SnapToGrid)\n      allowCardinal                 ('grid width',GridWidth)\n      allowCardinal                ('grid height',GridHeight)\n\n    /**** provide defaults for missing properties ****/\n\n      if (Classes              == null) { Classes               = '' }\n      if (Placeholder          == null) { Placeholder           = '(empty)' }\n      if (Mode                 == null) { Mode                  = 'run' }\n      if (SelectionLimit       == null) { SelectionLimit        = Infinity }\n      if (selectedStickers     == null) { selectedStickers      = [] }\n//    if (SelectionFrameStyle  == null) { SelectionFrameStyle   = 'dotted 2px orangered' }\n      if (SelectionHandleStyle == null) { SelectionHandleStyle  = 'background:orangered; border:solid 1px darkgray' }\n      if (LassoMode            == null) { LassoMode             = 'contain' }\n      if (SnapToGrid           == null) { SnapToGrid            = false }\n      if (GridWidth            == null) { GridWidth             = 10 }\n      if (GridHeight           == null) { GridHeight            = 10 }\n\n    /**** sanitize Selections ****/\n\n      const selectedStickerSet:Set<SNS_Sticker> = new Set()\n        selectedStickers = selectedStickers.filter((selectedSticker:SNS_Sticker) => {\n          if (\n            ValueIsSticker(selectedSticker) &&\n            ! selectedStickerSet.has(selectedSticker)\n          ) {\n            selectedStickerSet.add(selectedSticker)\n            return true\n          } else {\n            abortDraggingAndShaping()\n            return false        // invalid selections don't invoke any callbacks\n          }\n        })\n      if (selectedStickers.length > SelectionLimit) {\n        selectStickers(selectedStickers.slice(0,SelectionLimit))\n      }\n\n      my._StickerList      = StickerList\n      my._selectedStickers = selectedStickers   // needed for dragging & shaping\n      my._SelectionLimit   = SelectionLimit                              // dto.\n\n      my._SnapToGrid = SnapToGrid                                        // dto.\n      my._GridWidth  = GridWidth                                         // dto.\n      my._GridHeight = GridHeight                                        // dto.\n\n    /**** Sticker Selection ****/\n\n      function selectStickers (\n        SelectionA:SNS_Sticker[], SelectionB:SNS_Sticker[] = []\n      ):void {\n        const newSelection:SNS_Sticker[] = SelectionA.slice()\n        SelectionB.forEach((Sticker:SNS_Sticker) => {\n          if (newSelection.indexOf(Sticker) < 0) { newSelection.push(Sticker) }\n        })\n\n        if (selectedStickers.length > my._SelectionLimit) {\n          newSelection.length = my._SelectionLimit\n        }\n\n        const StickersToSelect:SNS_Sticker[]   = []\n        const StickersToDeselect:SNS_Sticker[] = []\n          newSelection.forEach((Sticker:SNS_Sticker) => {\n            if (my._selectedStickers.indexOf(Sticker) < 0) {\n              StickersToSelect.push(Sticker)\n            }\n          })\n\n          my._selectedStickers.forEach((Sticker:SNS_Sticker) => {\n            if (newSelection.indexOf(Sticker) < 0) {\n              StickersToDeselect.push(Sticker)\n            }\n          })\n        selectedStickers = my._selectedStickers = newSelection\n\n        if ((StickersToSelect.length > 0) || (StickersToDeselect.length > 0)) {\n          abortDraggingAndShaping()\n\n          if (onSelectionChange != null) {\n            onSelectionChange(selectedStickers)\n          }\n        }\n\n        if ((StickersToDeselect.length > 0) && (onStickerDeselected != null)) {\n          StickersToDeselect.forEach((deselectedSticker:SNS_Sticker) => {\n            onStickerDeselected(deselectedSticker)\n          })\n        }\n\n        if ((StickersToSelect.length > 0) && (onStickerSelected != null)) {\n          StickersToSelect.forEach((selectedSticker:SNS_Sticker) => {\n            onStickerSelected(selectedSticker)\n          })\n        }\n      }\n\n      function StickerIsSelected (Sticker:SNS_Sticker):boolean {\n        return (selectedStickers.indexOf(Sticker) >= 0)\n      }\n\n    /**** Lasso Selection ****/\n\n      function GeometryOfLasso ():SNS_Geometry {\n        const { x:x0,y:y0 } = my._LassoStart as SNS_Position\n        const { x:x1,y:y1 } = my._LassoEnd || my._LassoStart as SNS_Position\n\n        let LassoX = (x0 <= x1 ? x0 : x1); let LassoWidth  = (x0 <= x1 ? x1-x0 : x0-x1)\n        let LassoY = (y0 <= y1 ? y0 : y1); let LassoHeight = (y0 <= y1 ? y1-y0 : y0-y1)\n\n        return { x:LassoX,y:LassoY, Width:LassoWidth,Height:LassoHeight }\n      }\n\n      function CSSGeometryOfLasso ():string {\n        const { x,y, Width,Height } = GeometryOfLasso()\n        return `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px`\n      }\n\n      function StickersCaughtByLasso ():SNS_Sticker[] {\n        let { x:LassoX0,y:LassoY0, Width:LassoWidth,Height:LassoHeight } = GeometryOfLasso()\n        let LassoX1 = LassoX0+LassoWidth\n        let LassoY1 = LassoY0+LassoHeight\n\n        if (LassoMode === 'touch') {\n          return my._StickerList.filter((Sticker:SNS_Sticker) => {\n            if (! Sticker.isVisible || Sticker.isLocked) { return false }\n// @ts-ignore TS2339 strange: why does TS not recognize \"isSelectable\"?\n            if ((Mode === 'run') && ! Sticker.isSelectable) { return false }\n\n            const { x,y, Width,Height } = Sticker.Geometry\n            return (\n              (LassoX0 <= x+Width)  && (x <= LassoX1) &&\n              (LassoY0 <= y+Height) && (y <= LassoY1)\n            )\n          })\n        } else { // 'enclose'\n          return my._StickerList.filter((Sticker:SNS_Sticker) => {\n            if (! Sticker.isVisible || Sticker.isLocked) { return false }\n// @ts-ignore TS2339 strange: why does TS not recognize \"isSelectable\"?\n            if ((Mode === 'run') && ! Sticker.isSelectable) { return false }\n\n            const { x,y, Width,Height } = Sticker.Geometry\n            return (\n              (LassoX0 <= x) && (x+Width  <= LassoX1) &&\n              (LassoY0 <= y) && (y+Height <= LassoY1)\n            )\n          })\n        }\n      }\n\n      function dragLassoTo (x:SNS_Location,y:SNS_Location):void {\n        my._LassoEnd = { x,y }\n        selectStickers(my._SelectionBeforeLasso, StickersCaughtByLasso())\n      }\n\n      function applyLasso ():void {\n        my._LassoStart = my._LassoEnd = undefined\n        my._SelectionBeforeLasso = []\n      }\n\n      function abortLasso ():void {\n        my._LassoStart = my._LassoEnd = undefined\n        selectStickers(my._SelectionBeforeLasso)\n        my._SelectionBeforeLasso = []\n      }\n\n    /**** Lasso Recognizer ****/\n\n      function onBoardClick ():void {\n        selectStickers([])\n      }\n\n      const LassoRecognizer = DragClickRecognizerFor(my._LassoRecognizerSlot, {\n        onlyFrom:     '.SNS.BoardView,.SNS.Sticker,.SNS.Sticker *',\n        neverFrom:    '.SNS.Sticker.selectable,.SNS.Sticker.selectable *',\n        Threshold:    4,\n        onDragStarted:(x:number,y:number, dx:number,dy:number) => {\n          my._SelectionBeforeLasso = selectedStickers.slice()\n\n// @ts-ignore TS2345 type casting is ok here\n          ;({ left:x,top:y } = fromDocumentTo('local',{ left:x,top:y },(my as Component).base))\n\n          my._LassoStart = { x,y }\n          dragLassoTo(x,y)\n          my.rerender()\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n// @ts-ignore TS2532 my._LassoStart is _not_ undefined\n          dragLassoTo(my._LassoStart.x+dx,my._LassoStart.y+dy)\n          my.rerender()\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n// @ts-ignore TS2532 my._LassoStart is _not_ undefined\n          dragLassoTo(my._LassoStart.x+dx,my._LassoStart.y+dy)\n          applyLasso()\n          my.rerender()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortLasso()\n          my.rerender()\n        },\n        onClicked:onBoardClick\n      })\n\n    /**** Geometry Handling ****/\n\n      function changeGeometriesTo (\n        StickerList:SNS_Sticker[], GeometryList:SNS_Geometry[]\n      ):void {\n        if (onGeometryChange != null) {\n          onGeometryChange(StickerList,GeometryList)\n          my.rerender()\n        }\n      }\n\n      function changeGeometriesBy (\n        StickerList:SNS_Sticker[], Mode:string, dx:number,dy:number,\n        initialGeometries?:SNS_Geometry[]\n      ):void {\n        if (onGeometryChange == null) { return }\n\n        let dX:number = 0, dY:number = 0, dW:number = 0, dH:number = 0\n        switch (Mode) {\n          case 'nw': dX = dx; dW = -dx; dY = dy; dH = -dy; break\n          case 'n':                     dY = dy; dH = -dy; break\n          case 'ne':          dW = dx;  dY = dy; dH = -dy; break\n          case 'e':           dW = dx;                     break\n          case 'se':          dW = dx;           dH = dy;  break\n          case 's':                              dH = dy;  break\n          case 'sw': dX = dx; dW = -dx;          dH = dy;  break\n          case 'w':  dX = dx; dW = -dx;                    break\n          case 'c':  dX = dx;           dY = dy;\n        }\n\n        if (initialGeometries == null) {\n          initialGeometries = my._initialGeometries as SNS_Geometry[]\n        }\n\n        const GeometryList = initialGeometries.map(\n          (Geometry:SNS_Geometry) => {\n            let Width:number  = Math.max(0,Geometry.Width+dW)\n            let Height:number = Math.max(0,Geometry.Height+dH)\n\n            let xl:number = Geometry.x+dX, xr = xl + Width\n            let yt:number = Geometry.y+dY, yb = yt + Height\n\n            if (my._SnapToGrid) {\n              let xl_ = my._GridWidth*Math.round(xl/my._GridWidth)\n              let xr_ = my._GridWidth*Math.round(xr/my._GridWidth)\n              let yt_ = my._GridHeight*Math.round(yt/my._GridHeight)\n              let yb_ = my._GridHeight*Math.round(yb/my._GridHeight)\n\n              switch (Mode) {\n                case 'nw': xl = Math.min(xl_,xr); yt = Math.min(yt_,yb); break\n                case 'n':                         yt = Math.min(yt_,yb); break\n                case 'ne': xr = Math.max(xl,xr_); yt = Math.min(yt_,yb); break\n                case 'e':  xr = Math.max(xl,xr_);                        break\n                case 'se': xr = Math.max(xl,xr_); yb = Math.max(yt,yb_); break\n                case 's':                         yb = Math.max(yt,yb_); break\n                case 'sw': xl = Math.min(xl_,xr); yb = Math.max(yt,yb_); break\n                case 'w':  xl = Math.min(xl_,xr);                        break\n                case 'c':  xl = xl_; xr = xl+Width; yt = yt_; yb = yt+Height\n              }\n            }\n            return { x:xl,y:yt, Width:xr-xl,Height:yb-yt }\n          }\n        )\n\n        changeGeometriesTo(StickerList,GeometryList)\n      }\n\n    /**** Sticker Drag/Select Recognizer ****/\n\n      const onStickerClick = (x:number,y:number, Event:PointerEvent) => {\n        if (SelectionLimit === 0) { return }\n\n        const Sticker = my._pointedSticker as SNS_Sticker\n\n        let SelectionChanged:boolean = false\n        let StickersToSelect:SNS_Sticker[], StickersToDeselect:SNS_Sticker[]\n        if (Event.shiftKey || Event.metaKey) { // additive/subtractive selection\n          SelectionChanged = true\n          if (StickerIsSelected(Sticker)) {\n            StickersToDeselect = [Sticker]\n            selectedStickers   = selectedStickers.filter(\n              (selectedSticker:SNS_Sticker) => (selectedSticker !== Sticker)\n            )\n          } else {\n            if (selectedStickers.length === SelectionLimit) {\n              StickersToDeselect = [selectedStickers.shift()]\n            }\n            StickersToSelect = [Sticker]\n            selectedStickers.push(Sticker)\n          }\n        } else {                                         // definitive selection\n          StickersToDeselect = selectedStickers.filter(\n            (selectedSticker:SNS_Sticker) => (selectedSticker !== Sticker)\n          )\n          SelectionChanged = ! StickerIsSelected(Sticker)\n          StickersToSelect  = (SelectionChanged ? [Sticker] : [])\n          selectedStickers  = [Sticker]\n        }\n\n        if (SelectionChanged && (onSelectionChange != null)) {\n          onSelectionChange(selectedStickers)\n        }\n\n// @ts-ignore TS2454 let's check IF variables were assigned\n        if ((StickersToDeselect != null) && (onStickerDeselected != null)) {\n          StickersToDeselect.forEach((deselectedSticker:SNS_Sticker) => {\n            onStickerDeselected(deselectedSticker)\n          })\n        }\n\n// @ts-ignore TS2454 let's check IF variables were assigned\n        if ((StickersToSelect != null) && (onStickerSelected != null)) {\n          StickersToSelect.forEach((selectedSticker:SNS_Sticker) => {\n            onStickerSelected(selectedSticker)\n          })\n        }\n\n        if (SelectionChanged) { my.rerender() }\n      }\n\n    /**** StickerRecognizer ****/\n\n      const StickerRecognizer = DragClickRecognizerFor(my._StickerRecognizerSlot, {\n        onlyFrom:     '.SNS.Cover',\n        Threshold:    4,\n        onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n          if (! StickerIsSelected(my._pointedSticker as SNS_Sticker)) {\n            if (Event.shiftKey || Event.metaKey) {  // additive/subtractive sel.\n              selectStickers([my._pointedSticker as SNS_Sticker],my._selectedStickers)\n            } else {\n              selectStickers([my._pointedSticker as SNS_Sticker])\n            }\n          }\n\n          my._shapedStickers    = my._selectedStickers\n          my._initialGeometries = my._selectedStickers.map(\n            (Sticker:SNS_Sticker) => Sticker.Geometry\n          )\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n          finishDraggingAndShaping()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortDraggingAndShaping()\n        },\n        onClicked:onStickerClick\n      })\n\n    /**** handleStickerEvent ****/\n\n      const handleStickerEvent = (Event:PointerEvent, Sticker:SNS_Sticker) => {\n        my._ShapeMode      = 'c'\n        my._pointedSticker = Sticker\n        StickerRecognizer(Event)\n      }\n\n    /**** ShapeHandle Recognizer ****/\n\n      const ShapeHandleRecognizer = DragRecognizerFor(my._ShapeHandleRecognizerSlot, {\n        onlyFrom:     '.SNS.ShapeHandle',\n        Threshold:    0,\n        onDragStarted:(x:number,y:number, dx:number,dy:number) => {\n          my._shapedStickers    = my._selectedStickers\n          my._initialGeometries = my._selectedStickers.map(\n            (Sticker:SNS_Sticker) => Sticker.Geometry\n          )\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n          finishDraggingAndShaping()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortDraggingAndShaping()\n        }\n      })\n\n      const handleShapeEvent = (Event:PointerEvent, Mode:string) => {\n        my._ShapeMode = Mode\n        ShapeHandleRecognizer(Event)\n      }\n\n    /**** builtinSelectionFor ****/\n\n      function builtinSelectionFor (Sticker:SNS_Sticker):Function {\n        return function (Event:PointerEvent):void {\n          if (Event.button === 0) { selectStickers([Sticker]) }\n        }\n      }\n\n    /**** builtinDraggingFor ****/\n\n      const DragRecognizer:WeakMap<SNS_Sticker,Function> = new WeakMap()\n      const initialGeometry:WeakMap<SNS_Sticker,SNS_Geometry> = new WeakMap()\n\n      function builtinDraggingFor (Sticker:SNS_Sticker):Function {\n        let Recognizer = DragRecognizer.get(Sticker)\n        if (Recognizer == null) {\n          DragRecognizer.set(Sticker, Recognizer = DragRecognizerFor(Sticker, {\n            onlyFrom:     '.builtinDraggable',\n            neverFrom:    '.notBuiltinDraggable',\n            Threshold:    4,\n            onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n              my._shapedStickers = [Sticker]\n              initialGeometry.set(Sticker,Sticker.Geometry)\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n            },\n            onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n              if (! initialGeometry.has(Sticker)) { return }\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n            },\n            onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n              if (! initialGeometry.has(Sticker)) { return }\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n              initialGeometry.delete(Sticker)\n              my._shapedStickers = []\n            },\n            onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n              if (initialGeometry.has(Sticker)) {\n                changeGeometriesTo([Sticker],[initialGeometry.get(Sticker) as SNS_Geometry])\n              }\n              initialGeometry.delete(Sticker)\n              my._shapedStickers = []\n            }\n          }))\n        }\n        return Recognizer as Function\n      }\n\n    /**** horizontal Guides ****/\n\n      function horizontalGuides ():any {\n        if (my._shapedStickers == null) { return '' }\n\n        const EdgeSet:Indexable   = {}\n        const CenterSet:Indexable = {}\n        my._StickerList.filter(\n          (Sticker:SNS_Sticker) => ! StickerIsSelected(Sticker)\n        ).forEach((Sticker:SNS_Sticker) => {\n          const { y,Height } = Sticker.Geometry\n            const yt = Math.round(y)\n            const ym = Math.round(y+Height/2)\n            const yb = Math.round(y+Height)\n          EdgeSet[yt] = EdgeSet[yb] = true\n          CenterSet[ym] = true\n        })\n\n        const horizontalSet:Indexable = {}\n        my._shapedStickers.forEach((Sticker:SNS_Sticker) => {\n          const { y,Height } = Sticker.Geometry\n            const yt = Math.round(y)\n            const ym = Math.round(y+Height/2)\n            const yb = Math.round(y+Height)\n          if (EdgeSet[yt])                                     { horizontalSet[yt] = 'Edge' }\n          if (EdgeSet[ym]   && (horizontalSet[ym] !== 'Edge')) { horizontalSet[ym] = 'Center' }\n          if (EdgeSet[yb])                                     { horizontalSet[yb] = 'Edge' }\n          if (CenterSet[yt] && (horizontalSet[yt] !== 'Edge')) { horizontalSet[yt] = 'Center' }\n          if (CenterSet[ym] && (horizontalSet[ym] !== 'Edge')) { horizontalSet[ym] = 'Center' }\n          if (CenterSet[yb] && (horizontalSet[yb] !== 'Edge')) { horizontalSet[yb] = 'Center' }\n        })\n\n        const horizontalList:string[] = []\n          for (let y in horizontalSet) {\n            if (horizontalSet[y] != null) { horizontalList.push(y) }\n          }\n\n        return html`${horizontalList.map((y:string) => html`\n          <div class=\"SNS horizontalGuide ${horizontalSet[y]}\" style=\"top:${y}px\"/>\n        `)}`\n      }\n\n    /**** vertical Guides ****/\n\n      function verticalGuides ():any {\n        if (my._shapedStickers == null) { return '' }\n\n        const EdgeSet:Indexable   = {}\n        const CenterSet:Indexable = {}\n        my._StickerList.filter(\n          (Sticker:SNS_Sticker) => ! StickerIsSelected(Sticker)\n        ).forEach((Sticker:SNS_Sticker) => {\n          const { x,Width } = Sticker.Geometry\n            const xl = Math.round(x)\n            const xm = Math.round(x+Width/2)\n            const xr = Math.round(x+Width)\n          EdgeSet[xl] = EdgeSet[xr] = true\n          CenterSet[xm] = true\n        })\n\n        const verticalSet:Indexable = {}\n        my._shapedStickers.forEach((Sticker:SNS_Sticker) => {\n          const { x,Width } = Sticker.Geometry\n            const xl = Math.round(x)\n            const xm = Math.round(x+Width/2)\n            const xr = Math.round(x+Width)\n          if (EdgeSet[xl])                                   { verticalSet[xl] = 'Edge' }\n          if (EdgeSet[xm]   && (verticalSet[xm] !== 'Edge')) { verticalSet[xm] = 'Center' }\n          if (EdgeSet[xr])                                   { verticalSet[xr] = 'Edge' }\n          if (CenterSet[xl] && (verticalSet[xl] !== 'Edge')) { verticalSet[xl] = 'Center' }\n          if (CenterSet[xm] && (verticalSet[xm] !== 'Edge')) { verticalSet[xm] = 'Center' }\n          if (CenterSet[xr] && (verticalSet[xr] !== 'Edge')) { verticalSet[xr] = 'Center' }\n        })\n\n        const verticalList:string[] = []\n          for (let x in verticalSet) {\n            if (verticalSet[x] != null) { verticalList.push(x) }\n          }\n        return html`${verticalList.map((x:string) => html`\n          <div class=\"SNS verticalGuide ${verticalSet[x]}\" style=\"left:${x}px\"/>\n        `)}`\n      }\n\n    /**** actual rendering ****/\n\n      const BoardStyle = (Board == null ? undefined : CSSStyleOfVisual(Board))\n\n      return html`<div class=\"SNS BoardView ${Classes}\" style=${BoardStyle}\n        onPointerDown=${LassoRecognizer} onPointerMove=${LassoRecognizer}\n        onPointerUp=${LassoRecognizer} onPointerCancel=${LassoRecognizer}\n      >\n        ${Board == null\n          ? html`<div class=\"SNS Placeholder\"><div>(no Board to show)</div></div>`\n          : StickerList == null\n            ? html`<div class=\"SNS Placeholder\"><div>(no Stickers to show)</div></div>`\n            : StickerList.map((Sticker:SNS_Sticker) => {\n                if (! Sticker.isVisible) { return '' }\n\n                const Geometry   = Sticker.Geometry\n// @ts-ignore TS2339 strange: TS does not recognize \"isSelectable\"\n                const selectable = Sticker.isSelectable     // Mode-independent!\n                const selected   = StickerIsSelected(Sticker)\n\n                return html`<${SNS_StickerView} Sticker=${Sticker} key=${Sticker.Id}\n                  selected=${selected && (Mode === 'run')}\n                  SelectionFrameStyle=${SelectionFrameStyle}\n                  Geometry=${Geometry}\n                  selectable=${selectable}\n                  builtinDragging=${selectable && builtinDraggingFor(Sticker)}\n                  builtinSelection=${selectable &&builtinSelectionFor(Sticker)}\n                />`\n              })\n        }\n\n        ${(StickerList != null) && (Mode === 'edit')\n          ? StickerList.map((Sticker:SNS_Sticker) => {\n              if (! Sticker.isVisible) { return '' }\n\n              const selected = StickerIsSelected(Sticker)\n\n              return html`\n                <${SNS_Cover} Sticker=${Sticker} key=${Sticker.Id+'c'}\n                  selected=${selected}\n                  onPointerEvent=${(Event:PointerEvent) => handleStickerEvent(Event,Sticker)}\n                />\n              `\n            })\n          : ''\n        }\n\n        ${(selectedStickers.length > 0)\n          ? selectedStickers.filter(\n              (Sticker:SNS_Sticker) => Sticker.isVisible\n            ).map((Sticker:SNS_Sticker) => {\n              const Id       = Sticker.Id\n              const Geometry = Sticker.Geometry\n              return html`\n                <${SNS_ShapeHandle} key=${Id+'nw'} Mode=\"nw\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'nw')}/>\n                <${SNS_ShapeHandle} key=${Id+'n'}  Mode=\"n\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'n')}/>\n                <${SNS_ShapeHandle} key=${Id+'ne'} Mode=\"ne\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'ne')}/>\n                <${SNS_ShapeHandle} key=${Id+'e'}  Mode=\"e\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'e')}/>\n                <${SNS_ShapeHandle} key=${Id+'se'} Mode=\"se\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'se')}/>\n                <${SNS_ShapeHandle} key=${Id+'s'}  Mode=\"s\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'s')}/>\n                <${SNS_ShapeHandle} key=${Id+'sw'} Mode=\"sw\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'sw')}/>\n                <${SNS_ShapeHandle} key=${Id+'w'}  Mode=\"w\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'w')}/>\n              `\n            })\n          : ''\n        }\n        ${this._LassoStart == null\n          ? ''\n          : html`<div class=\"SNS Lasso\" style=${CSSGeometryOfLasso()}></>`\n        }\n        ${horizontalGuides()}\n        ${verticalGuides()}\n      </div>`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                             SNS_StickerView                              --\n//------------------------------------------------------------------------------\n\n  class SNS_StickerView extends Component {\n    private _Sticker:SNS_Sticker|undefined\n\n  /**** componentDidMount ****/\n\n    public componentDidMount ():void {\n      const Sticker = this._Sticker as SNS_Sticker\n\n      Sticker['_View'] = (this as Component).base\n      if (Sticker['_onMount'] != null) {\n        Sticker['_onMount']()\n      }\n    }\n\n  /**** componentWillUnmount ****/\n\n    public componentWillUnmount ():void {\n      const Sticker = this._Sticker as SNS_Sticker\n\n      Sticker['_View'] = undefined\n      if (Sticker['_onUnmount'] != null) {\n        Sticker['_onUnmount']()\n      }\n    }\n\n  /**** render ****/\n\n    public render (PropSet:Indexable):any {\n      let {\n        Sticker, selectable, selected, SelectionFrameStyle,\n        Geometry, builtinSelection, builtinDragging\n      } = PropSet\n\n      this._Sticker = Sticker\n\n      let { x,y, Width,Height } = Geometry\n        allowInteger('sticker x position',x)\n        allowInteger('sticker y position',y)\n        allowOrdinal     ('sticker width',Width)\n        allowOrdinal    ('sticker height',Height)\n      const CSSGeometry = (\n        (x != null) && (Width != null) && (y != null) && (Height != null)\n        ? `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n        : ''\n      )\n\n      return html`<div class=\"\n        SNS Sticker ${selectable ? 'selectable' : ''} ${selected ? 'selected' : ''}\n      \" style=\"\n        ${CSSGeometry};\n        ${selected && (SelectionFrameStyle != null) ? `outline:${SelectionFrameStyle};` : ''}\n        ${CSSStyleOfVisual(Sticker) || ''}\n      \">\n        ${selectable\n          ? Sticker.Rendering({ builtinSelection,builtinDragging })\n          : Sticker.Rendering()\n        }\n      </div>`\n    }\n  }//------------------------------------------------------------------------------\n//--                                SNS_Cover                                 --\n//------------------------------------------------------------------------------\n\n  class SNS_Cover extends Component {\n    public render (PropSet:Indexable):any {\n      let { Sticker, onPointerEvent, ...otherProps } = PropSet\n\n      let { x,y, Width,Height } = Sticker.Geometry\n\n      const CSSGeometry = (\n        (x != null) && (Width != null) && (y != null) && (Height != null)\n        ? `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n        : ''\n      )\n\n      return html`<div class=\"SNS Cover\" style=\"\n        ${CSSGeometry} ${Sticker.isLocked ? 'pointer-events:none' : ''}\n      \" ...${otherProps}\n        onPointerDown=${onPointerEvent} onPointerMove=${onPointerEvent}\n        onPointerUp=${onPointerEvent} onPointerCancel=${onPointerEvent}\n      />`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                             SNS_ShapeHandle                              --\n//------------------------------------------------------------------------------\n\n  class SNS_ShapeHandle extends Component {\n    public render (PropSet:Indexable):any {\n      let { Mode, Geometry, onPointerEvent, ...otherProps } = PropSet\n\n      let { x,y, Width,Height } = Geometry\n      const xl = x-8, xm = Math.round(x+Width/2)-4,  xr = x+Width\n      const yt = y-8, ym = Math.round(y+Height/2)-4, yb = y+Height\n\n      let CSSGeometry, Cursor\n      switch (Mode) {\n        case 'nw': CSSGeometry = `left:${xl}px; top:${yt}px;`; Cursor = 'nwse'; break\n        case 'n':  CSSGeometry = `left:${xm}px; top:${yt}px;`; Cursor = 'ns';   break\n        case 'ne': CSSGeometry = `left:${xr}px; top:${yt}px;`; Cursor = 'nesw'; break\n        case 'e':  CSSGeometry = `left:${xr}px; top:${ym}px;`; Cursor = 'ew';   break\n        case 'se': CSSGeometry = `left:${xr}px; top:${yb}px;`; Cursor = 'nwse'; break\n        case 's':  CSSGeometry = `left:${xm}px; top:${yb}px;`; Cursor = 'ns';   break\n        case 'sw': CSSGeometry = `left:${xl}px; top:${yb}px;`; Cursor = 'nesw'; break\n        case 'w':  CSSGeometry = `left:${xl}px; top:${ym}px;`; Cursor = 'ew';   break\n      }\n      Cursor = 'cursor:' + Cursor + '-resize'\n\n      return html`<div class=\"SNS ShapeHandle\" style=\"${CSSGeometry} ${Cursor}\" ...${otherProps}\n        onPointerDown=${onPointerEvent} onPointerMove=${onPointerEvent}\n        onPointerUp=${onPointerEvent} onPointerCancel=${onPointerEvent}\n      />`\n    }\n  }\n\n// @ts-ignore TS2339 allow global variable \"SNS_BoardView\"\n  window.SNS_BoardView = SNS_BoardView\n\n  document.dispatchEvent(\n// @ts-ignore TS2339 allow global variable \"SNS_BoardView\"\n    new CustomEvent('SNS_BoardView',{ detail:window.SNS_BoardView })\n  )\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_excluded","_excluded2","fromDocumentTo","Conversion","Stylesheet","document","createElement","setAttribute","innerHTML","head","appendChild","SNS_BoardView","_Component","_len","_this","arguments","length","args","Array","_key","call","apply","concat","this","_Board","_StickerList","_pointedSticker","_selectedStickers","_SelectionLimit","Infinity","_LassoStart","_LassoEnd","_SelectionBeforeLasso","_ShapeMode","_shapedStickers","_initialGeometries","_SnapToGrid","_GridWidth","_GridHeight","_StickerRecognizerSlot","_ShapeHandleRecognizerSlot","_LassoRecognizerSlot","state","Value","_inheritsLoose","_proto","prototype","_mountBoard","Board","base","_unmountBoard","undefined","componentDidMount","componentWillUnmount","rerender","setState","render","PropSet","my","Classes","StickerList","Placeholder","Mode","SelectionLimit","selectedStickers","onSelectionChange","onStickerSelected","onStickerDeselected","SelectionFrameStyle","SelectionHandleStyle","LassoMode","onGeometryChange","SnapToGrid","GridWidth","GridHeight","finishDraggingAndShaping","abortDraggingAndShaping","changeGeometriesTo","allowTextline","allowBoard","allowListSatisfying","ValueIsSticker","allowOneOf","allowOrdinal","allowFunction","allowText","allowBoolean","allowCardinal","selectedStickerSet","Set","selectStickers","SelectionA","SelectionB","newSelection","slice","forEach","Sticker","indexOf","push","StickersToSelect","StickersToDeselect","deselectedSticker","selectedSticker","StickerIsSelected","GeometryOfLasso","_my$_LassoStart","x0","x","y0","y","_ref","x1","y1","Width","Height","dragLassoTo","_GeometryOfLasso2","LassoX0","LassoY0","LassoX1","LassoY1","filter","isVisible","isLocked","isSelectable","_Sticker$Geometry","Geometry","_Sticker$Geometry2","has","add","LassoRecognizer","DragClickRecognizerFor","onlyFrom","neverFrom","Threshold","onDragStarted","dx","dy","_fromDocumentTo","left","top","onDragContinued","onDragFinished","onDragCancelled","onClicked","GeometryList","changeGeometriesBy","initialGeometries","dX","dY","dW","dH","map","Math","max","xl","xr","yt","yb","xl_","round","xr_","yt_","yb_","min","_GeometryOfLasso","StickerRecognizer","Event","shiftKey","metaKey","SelectionChanged","shift","ShapeHandleRecognizer","DragRecognizerFor","handleShapeEvent","DragRecognizer","WeakMap","initialGeometry","BoardStyle","CSSStyleOfVisual","html","_taggedTemplateLiteralLoose","selectable","selected","SNS_StickerView","Id","Recognizer","get","set","builtinDraggingFor","button","builtinSelectionFor","SNS_Cover","handleStickerEvent","SNS_ShapeHandle","EdgeSet","CenterSet","_Sticker$Geometry3","ym","horizontalSet","_Sticker$Geometry4","horizontalList","horizontalGuides","_Sticker$Geometry5","xm","verticalSet","_Sticker$Geometry6","verticalList","verticalGuides","Component","_Component2","_this2","_len2","_key2","_Sticker","_proto2","builtinSelection","builtinDragging","allowInteger","CSSGeometry","Rendering","_Component3","onPointerEvent","otherProps","_objectWithoutPropertiesLoose","_Sticker$Geometry7","_Component4","Cursor","window","dispatchEvent","CustomEvent","detail"],"mappings":"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"}