{"version":3,"file":"sns-boardview.js","sources":["../src/sns-boardview.ts"],"sourcesContent":["/*******************************************************************************\n*                                                                              *\n*                BoardView for \"Shareable Note Stickers\" (SNS)                 *\n*                                                                              *\n*******************************************************************************/\n\n  import {\n    allowBoolean,\n    allowInteger, allowOrdinal, allowCardinal,\n    allowText, allowTextline,\n    allowFunction,\n    allowListSatisfying,\n    allowOneOf,\n  } from 'javascript-interface-library'\n\n  import {\n    SNS_Board, SNS_Sticker, SNS_Dialog,\n    ValueIsSticker,\n    allowBoard,\n    CSSStyleOfVisual,\n  } from 'shareable-note-stickers'\n\n  import Conversion from 'svelte-coordinate-conversion'\n  const { fromDocumentTo } = Conversion\n\n  import { html, Component } from 'htm/preact'\n\n// @ts-ignore TS7016 *C* sometimes, I hate package management\n  import { DragRecognizerFor, DragClickRecognizerFor } from 'protoux'\n\n/**** install stylesheet for this BoardView ****/\n\n  const Stylesheet = document.createElement('style')\n    Stylesheet.setAttribute('id','SNS Stylesheet')\n    Stylesheet.innerHTML = `/*******************************************************************************\n*                                                                              *\n*                        Shareable Note Stickers (SNS)                         *\n*                                                                              *\n*******************************************************************************/\n\n/**** all SNS elements are absolutely positioned ****/\n\n  .SNS {\n    display:block; position:absolute;\n    margin:0px; padding:0px;\n    background:none; border:none; border-radius:0px; outline:none;\n  }\n\n/**** elements of class \"SNS Content\" cover their whole container ****/\n\n  .SNS.Content {\n    display:block; position:absolute;\n    left:0px; top:0px; width:100%; height:100%;\n  }\n\n/**** \"brokenSticker\" and Error Indicator ****/\n\n  .SNS.brokenSticker {\n    overflow:hidden;\n    border:dotted 1px orange; background:rgba(255,0,0,0.1);\n  }\n\n  .SNS.ErrorIndicator {\n    overflow:hidden;\n    left:0px; top:0px; width:24px; height:24px;\n    background:url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3Csvg width='24px' height='24px' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 17.0001H12.01M12 10.0001V14.0001M6.41209 21.0001H17.588C19.3696 21.0001 20.2604 21.0001 20.783 20.6254C21.2389 20.2985 21.5365 19.7951 21.6033 19.238C21.6798 18.5996 21.2505 17.819 20.3918 16.2579L14.8039 6.09805C13.8897 4.4359 13.4326 3.60482 12.8286 3.32987C12.3022 3.09024 11.6978 3.09024 11.1714 3.32987C10.5674 3.60482 10.1103 4.4359 9.19614 6.09805L3.6082 16.2579C2.74959 17.819 2.32028 18.5996 2.39677 19.238C2.46351 19.7951 2.76116 20.2985 3.21709 20.6254C3.7396 21.0001 4.63043 21.0001 6.41209 21.0001Z' stroke='orange' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' fill='white'/%3E%3C/svg%3E\");\n    pointer-events:auto;\n  }\n\n\n/**** BoardView ****/\n\n  .SNS.BoardView {\n    left:0px; top:0px; right:0px; bottom:0px;\n  }\n\n/**** Sticker and Contents, Cover ****/\n\n  .SNS.Sticker {}\n  .SNS.Sticker > .SNS {\n    -webkit-user-select:none; -moz-user-select:none; -ms-user-select:none;\n    user-select:none;\n\n    display:block; position:absolute;\n    left:0px; top:0px; width:100%; height:100%; right:auto; bottom:auto;\n  }\n\n  .SNS.Cover {\n    -webkit-user-select:none; -moz-user-select:none; -ms-user-select:none;\n    user-select:none;\n\n    z-index:1000000;\n  }\n\n/**** Selection Markers ****/\n\n  .SNS.Sticker.selected, .SNS.Cover[selected] {\n    outline:dotted 2px orangered;\n  }\n\n  .SNS.ShapeHandle {\n    width:8px; height:8px;\n    background:orangered; border:solid 1px darkgray;\n    z-index:1000001; /* above .SNS.Cover */\n  }\n\n/**** Selection Lasso ****/\n\n  .SNS.Lasso {\n    background:rgba(255,69,0, 0.1); /* border:dashed 2px orangered; */\n  }\n\n/**** Dragging Guides ****/\n\n  .SNS.horizontalGuide.Edge {\n    left:0px; right:0px; height:1px;\n    border-top:dashed 1px orangered;\n  }\n  .SNS.verticalGuide.Edge {\n    top:0px; bottom:0px; width:1px;\n    border-left:dashed 1px orangered;\n  }\n\n  .SNS.horizontalGuide.Center {\n    left:0px; right:0px; height:1px;\n    border-top:dotted 1px orangered;\n  }\n  .SNS.verticalGuide.Center {\n    top:0px; bottom:0px; width:1px;\n    border-left:dotted 1px orangered;\n  }\n\n/**** Placeholder ****/\n\n  .SNS.Placeholder {\n    display:block; position:relative;\n    width:100%; height:100%;\n  }\n\n  .SNS.Placeholder > * {\n    display:block; position:absolute;\n    left:50%; top:50%;\n    transform:translate(-55%,-50%);\n    white-space:nowrap;\n  }\n\n/**** custom Dialogs ****/\n\n  .PUX.Dialog > .ContentPane {\n    position:absolute; left:0px; top:30px; right:0px; bottom:0px;\n  }\n  .PUX.ResizableDialog > .ContentPane {\n    position:absolute; left:0px; top:30px; right:0px; bottom:10px;\n  }\n`\n  document.head.appendChild(Stylesheet)\n\n/**** make some existing types indexable ****/\n\n  interface Indexable { [Key:string]:any }\n\n//------------------------------------------------------------------------------\n//--                             Type Definitions                             --\n//------------------------------------------------------------------------------\n\n/**** geometry-related types ****/\n\n  export type SNS_Location  = number         // mainly for illustrative purposes\n  export type SNS_Dimension = number                                     // dto.\n  export type SNS_Position  = { x:SNS_Location,y:SNS_Location }\n  export type SNS_Size      = { Width:SNS_Dimension,Height:SNS_Dimension }\n  export type SNS_Geometry  = { x:SNS_Location,y:SNS_Location, Width:SNS_Dimension,Height:SNS_Dimension }\n\n//------------------------------------------------------------------------------\n//--                              SNS_BoardView                               --\n//------------------------------------------------------------------------------\n\n  export class SNS_BoardView extends Component {\n    private _Board:SNS_Board|undefined\n    private _Mode:'touch'|'enclose' = 'enclose'\n\n    private _StickerList:SNS_Sticker[] = []\n    private _pointedSticker:SNS_Sticker|undefined\n    private _selectedStickers:SNS_Sticker[] = []       // for dragging & shaping\n    private _SelectionLimit:number = Infinity\n\n    private _LassoStart:SNS_Position|undefined\n    private _LassoEnd:SNS_Position|undefined\n    private _SelectionBeforeLasso:SNS_Sticker[] = []\n\n    private _ShapeMode:string|undefined\n    private _shapedStickers:SNS_Sticker[]|undefined\n    private _initialGeometries:SNS_Geometry[]|undefined\n\n    private _SnapToGrid:boolean = false\n    private _GridWidth:number   = 1\n    private _GridHeight:number  = 1\n\n    private _StickerRecognizerSlot = {}\n    private _ShapeHandleRecognizerSlot = {}\n    private _LassoRecognizerSlot = {}\n\n    public state:Indexable = { Value:0 }\n\n  /**** _mountBoard ****/\n\n    private _mountBoard (Board:SNS_Board|undefined):void {\n      if ((Board != null) && ((this as Component).base != null)) {\n        Board['_View'] = (this as Component).base\n        if (Board['_onMount'] != null) {\n          Board['_onMount']()\n        }\n      }\n      this._Board = Board\n    }\n\n  /**** _unmountBoard ****/\n\n    private _unmountBoard ():void {\n      const Board = this._Board\n      if (Board != null) {\n        Board['_View'] = undefined\n        if (Board['_onUnmount'] != null) {\n          Board['_onUnmount']()\n        }\n      }\n    }\n\n  /**** componentDidMount/WillUnmount ****/\n\n    public componentDidMount    ():void { this._mountBoard(this._Board) }\n    public componentWillUnmount ():void { this._unmountBoard() }\n\n  /**** rerender ****/\n\n    public rerender (Sticker?:SNS_Sticker):void {\n// @ts-ignore TS2339 \"Value\" is a valid property\n      (this as Component).setState({ Value:(this as Component).state.Value + 1 })\n    }\n\n  /**** render ****/\n\n    public render (PropSet:Indexable):any {\n      const my = this\n\n      let {\n        PUX,\n        Classes, Board, StickerList, Placeholder, Mode,\n        SelectionLimit, selectedStickers,\n        onSelectionChange, onStickerSelected, onStickerDeselected,\n        SelectionFrameStyle, SelectionHandleStyle,\n        LassoMode, onGeometryChange,\n        SnapToGrid, GridWidth, GridHeight,\n      } = PropSet\n\n      if (this._Board !== Board) {\n        this._unmountBoard()\n        this._mountBoard(Board)\n      }\n\n    /**** finishDraggingAndShaping ****/\n\n      function finishDraggingAndShaping ():void {\n        my._pointedSticker    = undefined\n        my._shapedStickers    = undefined\n        my._initialGeometries = undefined\n      }\n\n    /**** abortDraggingAndShaping ****/\n\n      function abortDraggingAndShaping ():void {\n        if (my._shapedStickers != null) {\n          changeGeometriesTo(my._shapedStickers,my._initialGeometries as SNS_Geometry[])\n        }\n        finishDraggingAndShaping()\n      }\n\n    /**** validate given properties ****/\n\n      allowTextline      ('board CSS class names',Classes)\n      allowBoard                         ('board',Board)\n      allowListSatisfying         ('sticker list',StickerList, ValueIsSticker)\n      allowTextline           ('placeholder text',Placeholder)\n      allowOneOf                    ('board mode',Mode, ['edit','run'])\n      allowOrdinal             ('selection limit',SelectionLimit)\n      allowListSatisfying('list of selected stickers',selectedStickers, ValueIsSticker)\n      allowFunction  ('selection change callback',onSelectionChange)\n      allowFunction         ('selection callback',onStickerSelected)\n      allowFunction       ('deselection callback',onStickerDeselected)\n      allowTextline  ('selection frame CSS style',SelectionFrameStyle)\n      allowText     ('selection handle CSS style',SelectionHandleStyle)\n      allowOneOf          ('lasso selection mode',LassoMode, ['touch','enclose'])\n      allowFunction   ('geometry change callback',onGeometryChange)\n      allowBoolean           ('\"SnapToGrid\" mode',SnapToGrid)\n      allowCardinal                 ('grid width',GridWidth)\n      allowCardinal                ('grid height',GridHeight)\n\n    /**** provide defaults for missing properties ****/\n\n      if (Classes              == null) { Classes               = '' }\n      if (Placeholder          == null) { Placeholder           = '(empty)' }\n      if (Mode                 == null) { Mode                  = 'run' }\n      if (SelectionLimit       == null) { SelectionLimit        = Infinity }\n      if (selectedStickers     == null) { selectedStickers      = [] }\n//    if (SelectionFrameStyle  == null) { SelectionFrameStyle   = 'dotted 2px orangered' }\n      if (SelectionHandleStyle == null) { SelectionHandleStyle  = 'background:orangered; border:solid 1px darkgray' }\n      if (LassoMode            == null) { LassoMode             = 'enclose' }\n      if (SnapToGrid           == null) { SnapToGrid            = false }\n      if (GridWidth            == null) { GridWidth             = 10 }\n      if (GridHeight           == null) { GridHeight            = 10 }\n\n    /**** sanitize Selections ****/\n\n      const selectedStickerSet:Set<SNS_Sticker> = new Set()\n        selectedStickers = selectedStickers.filter((selectedSticker:SNS_Sticker) => {\n          if (\n            ValueIsSticker(selectedSticker) &&\n            ! selectedStickerSet.has(selectedSticker)\n          ) {\n            selectedStickerSet.add(selectedSticker)\n            return true\n          } else {\n            abortDraggingAndShaping()\n            return false        // invalid selections don't invoke any callbacks\n          }\n        })\n      if (selectedStickers.length > SelectionLimit) {\n        selectStickers(selectedStickers.slice(0,SelectionLimit))\n      }\n\n     my._Mode = Mode\n\n      my._StickerList      = StickerList\n      my._selectedStickers = selectedStickers   // needed for dragging & shaping\n      my._SelectionLimit   = SelectionLimit                              // dto.\n\n      my._SnapToGrid = SnapToGrid                                        // dto.\n      my._GridWidth  = GridWidth                                         // dto.\n      my._GridHeight = GridHeight                                        // dto.\n\n    /**** Sticker Selection ****/\n\n      function selectStickers (\n        SelectionA:SNS_Sticker[], SelectionB:SNS_Sticker[] = []\n      ):void {\n        const newSelection:SNS_Sticker[] = SelectionA.slice()\n        SelectionB.forEach((Sticker:SNS_Sticker) => {\n          if (newSelection.indexOf(Sticker) < 0) { newSelection.push(Sticker) }\n        })\n\n        if (selectedStickers.length > my._SelectionLimit) {\n          newSelection.length = my._SelectionLimit\n        }\n\n        const StickersToSelect:SNS_Sticker[]   = []\n        const StickersToDeselect:SNS_Sticker[] = []\n          newSelection.forEach((Sticker:SNS_Sticker) => {\n            if (my._selectedStickers.indexOf(Sticker) < 0) {\n              StickersToSelect.push(Sticker)\n            }\n          })\n\n          my._selectedStickers.forEach((Sticker:SNS_Sticker) => {\n            if (newSelection.indexOf(Sticker) < 0) {\n              StickersToDeselect.push(Sticker)\n            }\n          })\n        selectedStickers = my._selectedStickers = newSelection\n\n        if ((StickersToSelect.length > 0) || (StickersToDeselect.length > 0)) {\n          abortDraggingAndShaping()\n\n          if (onSelectionChange != null) {\n            onSelectionChange(selectedStickers)\n          }\n        }\n\n        if ((StickersToDeselect.length > 0) && (onStickerDeselected != null)) {\n          StickersToDeselect.forEach((deselectedSticker:SNS_Sticker) => {\n            onStickerDeselected(deselectedSticker)\n          })\n        }\n\n        if ((StickersToSelect.length > 0) && (onStickerSelected != null)) {\n          StickersToSelect.forEach((selectedSticker:SNS_Sticker) => {\n            onStickerSelected(selectedSticker)\n          })\n        }\n      }\n\n      function StickerIsSelected (Sticker:SNS_Sticker):boolean {\n        return (my._selectedStickers.indexOf(Sticker) >= 0)\n      }\n\n    /**** Lasso Selection ****/\n\n      function GeometryOfLasso ():SNS_Geometry {\n        const { x:x0,y:y0 } = my._LassoStart as SNS_Position\n        const { x:x1,y:y1 } = my._LassoEnd || my._LassoStart as SNS_Position\n\n        let LassoX = (x0 <= x1 ? x0 : x1); let LassoWidth  = (x0 <= x1 ? x1-x0 : x0-x1)\n        let LassoY = (y0 <= y1 ? y0 : y1); let LassoHeight = (y0 <= y1 ? y1-y0 : y0-y1)\n\n        return { x:LassoX,y:LassoY, Width:LassoWidth,Height:LassoHeight }\n      }\n\n      function CSSGeometryOfLasso ():string {\n        const { x,y, Width,Height } = GeometryOfLasso()\n        return `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px`\n      }\n\n      function StickersCaughtByLasso ():SNS_Sticker[] {\n        let { x:LassoX0,y:LassoY0, Width:LassoWidth,Height:LassoHeight } = GeometryOfLasso()\n        let LassoX1 = LassoX0+LassoWidth\n        let LassoY1 = LassoY0+LassoHeight\n\n        if (LassoMode === 'touch') {\n          return my._StickerList.filter((Sticker:SNS_Sticker) => {\n            if (! Sticker.isVisible || Sticker.isLocked) { return false }\n// @ts-ignore TS2339 strange: why does TS not recognize \"isSelectable\"?\n            if ((my._Mode === 'run') && ! Sticker.isSelectable) { return false }\n\n            const { x,y, Width,Height } = Sticker.Geometry\n            return (\n              (LassoX0 <= x+Width)  && (x <= LassoX1) &&\n              (LassoY0 <= y+Height) && (y <= LassoY1)\n            )\n          })\n        } else { // 'enclose'\n          return my._StickerList.filter((Sticker:SNS_Sticker) => {\n            if (! Sticker.isVisible || Sticker.isLocked) { return false }\n// @ts-ignore TS2339 strange: why does TS not recognize \"isSelectable\"?\n            if ((my._Mode === 'run') && ! Sticker.isSelectable) { return false }\n\n            const { x,y, Width,Height } = Sticker.Geometry\n            return (\n              (LassoX0 <= x) && (x+Width  <= LassoX1) &&\n              (LassoY0 <= y) && (y+Height <= LassoY1)\n            )\n          })\n        }\n      }\n\n      function dragLassoTo (x:SNS_Location,y:SNS_Location):void {\n        my._LassoEnd = { x,y }\n        selectStickers(my._SelectionBeforeLasso, StickersCaughtByLasso())\n      }\n\n      function applyLasso ():void {\n        my._LassoStart = my._LassoEnd = undefined\n        my._SelectionBeforeLasso = []\n      }\n\n      function abortLasso ():void {\n        my._LassoStart = my._LassoEnd = undefined\n        selectStickers(my._SelectionBeforeLasso)\n        my._SelectionBeforeLasso = []\n      }\n\n    /**** Lasso Recognizer ****/\n\n      function onBoardClick ():void {\n        selectStickers([])\n      }\n\n      const LassoRecognizer = DragClickRecognizerFor(my._LassoRecognizerSlot, {\n        onlyFrom:     '.SNS.BoardView,.SNS.Sticker,.SNS.Sticker *',\n        neverFrom:    '.SNS.Sticker.selectable,.SNS.Sticker.selectable *',\n        Threshold:    4,\n        onDragStarted:(x:number,y:number, dx:number,dy:number) => {\n          my._SelectionBeforeLasso = my._selectedStickers.slice()\n\n// @ts-ignore TS2345 type casting is ok here\n          ;({ left:x,top:y } = fromDocumentTo('local',{ left:x,top:y },(my as Component).base))\n\n          my._LassoStart = { x,y }\n          dragLassoTo(x,y)\n          my.rerender()\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n// @ts-ignore TS2532 my._LassoStart is _not_ undefined\n          dragLassoTo(my._LassoStart.x+dx,my._LassoStart.y+dy)\n          my.rerender()\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n// @ts-ignore TS2532 my._LassoStart is _not_ undefined\n          dragLassoTo(my._LassoStart.x+dx,my._LassoStart.y+dy)\n          applyLasso()\n          my.rerender()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortLasso()\n          my.rerender()\n        },\n        onClicked:onBoardClick\n      })\n\n    /**** Geometry Handling ****/\n\n      function changeGeometriesTo (\n        StickerList:SNS_Sticker[], GeometryList:SNS_Geometry[]\n      ):void {\n        if (onGeometryChange != null) {\n          onGeometryChange(StickerList,GeometryList)\n          my.rerender()\n        }\n      }\n\n      function changeGeometriesBy (\n        StickerList:SNS_Sticker[], Mode:string, dx:number,dy:number,\n        initialGeometries?:SNS_Geometry[]\n      ):void {\n        if (onGeometryChange == null) { return }\n\n        let dX:number = 0, dY:number = 0, dW:number = 0, dH:number = 0\n        switch (Mode) {\n          case 'nw': dX = dx; dW = -dx; dY = dy; dH = -dy; break\n          case 'n':                     dY = dy; dH = -dy; break\n          case 'ne':          dW = dx;  dY = dy; dH = -dy; break\n          case 'e':           dW = dx;                     break\n          case 'se':          dW = dx;           dH = dy;  break\n          case 's':                              dH = dy;  break\n          case 'sw': dX = dx; dW = -dx;          dH = dy;  break\n          case 'w':  dX = dx; dW = -dx;                    break\n          case 'c':  dX = dx;           dY = dy;\n        }\n\n        if (initialGeometries == null) {\n          initialGeometries = my._initialGeometries as SNS_Geometry[]\n        }\n\n        const GeometryList = initialGeometries.map(\n          (Geometry:SNS_Geometry) => {\n            let Width:number  = Math.max(0,Geometry.Width+dW)\n            let Height:number = Math.max(0,Geometry.Height+dH)\n\n            let xl:number = Geometry.x+dX, xr = xl + Width\n            let yt:number = Geometry.y+dY, yb = yt + Height\n\n            if (my._SnapToGrid) {\n              let xl_ = my._GridWidth*Math.round(xl/my._GridWidth)\n              let xr_ = my._GridWidth*Math.round(xr/my._GridWidth)\n              let yt_ = my._GridHeight*Math.round(yt/my._GridHeight)\n              let yb_ = my._GridHeight*Math.round(yb/my._GridHeight)\n\n              switch (Mode) {\n                case 'nw': xl = Math.min(xl_,xr); yt = Math.min(yt_,yb); break\n                case 'n':                         yt = Math.min(yt_,yb); break\n                case 'ne': xr = Math.max(xl,xr_); yt = Math.min(yt_,yb); break\n                case 'e':  xr = Math.max(xl,xr_);                        break\n                case 'se': xr = Math.max(xl,xr_); yb = Math.max(yt,yb_); break\n                case 's':                         yb = Math.max(yt,yb_); break\n                case 'sw': xl = Math.min(xl_,xr); yb = Math.max(yt,yb_); break\n                case 'w':  xl = Math.min(xl_,xr);                        break\n                case 'c':  xl = xl_; xr = xl+Width; yt = yt_; yb = yt+Height\n              }\n            }\n            return { x:xl,y:yt, Width:xr-xl,Height:yb-yt }\n          }\n        )\n\n        changeGeometriesTo(StickerList,GeometryList)\n      }\n\n    /**** Sticker Drag/Select Recognizer ****/\n\n      const onStickerClick = (x:number,y:number, Event:PointerEvent) => {\n        if (SelectionLimit === 0) { return }\n\n        const Sticker = my._pointedSticker as SNS_Sticker\n\n        let SelectionChanged:boolean = false\n        let StickersToSelect:SNS_Sticker[], StickersToDeselect:SNS_Sticker[]\n        if (Event.shiftKey || Event.metaKey) { // additive/subtractive selection\n          SelectionChanged = true\n          if (StickerIsSelected(Sticker)) {\n            StickersToDeselect = [Sticker]\n            selectedStickers   = selectedStickers.filter(\n              (selectedSticker:SNS_Sticker) => (selectedSticker !== Sticker)\n            )\n          } else {\n            if (selectedStickers.length === SelectionLimit) {\n              StickersToDeselect = [selectedStickers.shift()]\n            }\n            StickersToSelect = [Sticker]\n            selectedStickers.push(Sticker)\n          }\n        } else {                                         // definitive selection\n          StickersToDeselect = selectedStickers.filter(\n            (selectedSticker:SNS_Sticker) => (selectedSticker !== Sticker)\n          )\n          SelectionChanged = ! StickerIsSelected(Sticker)\n          StickersToSelect  = (SelectionChanged ? [Sticker] : [])\n          selectedStickers  = [Sticker]\n        }\n\n        if (SelectionChanged && (onSelectionChange != null)) {\n          onSelectionChange(selectedStickers)\n        }\n\n// @ts-ignore TS2454 let's check IF variables were assigned\n        if ((StickersToDeselect != null) && (onStickerDeselected != null)) {\n          StickersToDeselect.forEach((deselectedSticker:SNS_Sticker) => {\n            onStickerDeselected(deselectedSticker)\n          })\n        }\n\n// @ts-ignore TS2454 let's check IF variables were assigned\n        if ((StickersToSelect != null) && (onStickerSelected != null)) {\n          StickersToSelect.forEach((selectedSticker:SNS_Sticker) => {\n            onStickerSelected(selectedSticker)\n          })\n        }\n\n        if (SelectionChanged) { my.rerender() }\n      }\n\n    /**** StickerRecognizer ****/\n\n      const StickerRecognizer = DragClickRecognizerFor(my._StickerRecognizerSlot, {\n        onlyFrom:     '.SNS.Cover',\n        Threshold:    4,\n        onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n          if (! StickerIsSelected(my._pointedSticker as SNS_Sticker)) {\n            if (Event.shiftKey || Event.metaKey) {  // additive/subtractive sel.\n              selectStickers([my._pointedSticker as SNS_Sticker],my._selectedStickers)\n            } else {\n              selectStickers([my._pointedSticker as SNS_Sticker])\n            }\n          }\n\n          my._shapedStickers    = my._selectedStickers\n          my._initialGeometries = my._selectedStickers.map(\n            (Sticker:SNS_Sticker) => Sticker.Geometry\n          )\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n          finishDraggingAndShaping()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortDraggingAndShaping()\n        },\n        onClicked:onStickerClick\n      })\n\n    /**** handleStickerEvent ****/\n\n      function handleStickerEvent (Event:PointerEvent, Sticker:SNS_Sticker):void {\n        my._ShapeMode      = 'c'\n        my._pointedSticker = Sticker\n        StickerRecognizer(Event)\n      }\n\n    /**** ShapeHandle Recognizer ****/\n\n      const ShapeHandleRecognizer = DragRecognizerFor(my._ShapeHandleRecognizerSlot, {\n        onlyFrom:     '.SNS.ShapeHandle',\n        Threshold:    0,\n        onDragStarted:(x:number,y:number, dx:number,dy:number) => {\n          my._shapedStickers    = my._selectedStickers\n          my._initialGeometries = my._selectedStickers.map(\n            (Sticker:SNS_Sticker) => Sticker.Geometry\n          )\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n          finishDraggingAndShaping()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortDraggingAndShaping()\n        }\n      })\n\n      function handleShapeEvent (Event:PointerEvent, Mode:string):void {\n        my._ShapeMode = Mode\n        ShapeHandleRecognizer(Event)\n      }\n\n    /**** builtinSelectionFor ****/\n\n      function builtinSelectionFor (Sticker:SNS_Sticker):Function {\n        return function (Event:PointerEvent):void {\n          if (Event.button === 0) { selectStickers([Sticker]) }\n        }\n      }\n\n    /**** builtinDraggingFor ****/\n\n      const DragRecognizer:WeakMap<SNS_Sticker,Function> = new WeakMap()\n      const initialGeometry:WeakMap<SNS_Sticker,SNS_Geometry> = new WeakMap()\n\n      function builtinDraggingFor (Sticker:SNS_Sticker):Function {\n        let Recognizer = DragRecognizer.get(Sticker)\n        if (Recognizer == null) {\n          DragRecognizer.set(Sticker, Recognizer = DragClickRecognizerFor(Sticker, {\n            onlyFrom:     '.builtinDraggable',\n            neverFrom:    '.notBuiltinDraggable',\n            Threshold:    4,\n            onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n              selectStickers([Sticker])          // auto-selection upon dragging\n              my._shapedStickers = [Sticker]\n              initialGeometry.set(Sticker,Sticker.Geometry)\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n            },\n            onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n              if (! initialGeometry.has(Sticker)) { return }\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n            },\n            onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n              if (! initialGeometry.has(Sticker)) { return }\n              changeGeometriesBy([Sticker],'c', dx,dy, [initialGeometry.get(Sticker) as SNS_Geometry])\n              initialGeometry.delete(Sticker)\n              my._shapedStickers = undefined\n            },\n            onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n              if (initialGeometry.has(Sticker)) {\n                changeGeometriesTo([Sticker],[initialGeometry.get(Sticker) as SNS_Geometry])\n              }\n              initialGeometry.delete(Sticker)\n              my._shapedStickers = undefined\n            },\n            onClicked:(x:number,y:number, Event:PointerEvent) => {\n              my._shapedStickers = undefined\n              if (Event.button === 0) { selectStickers([Sticker]) }\n            }\n          }))\n        }\n        return Recognizer as Function\n      }\n\n    /**** horizontal Guides ****/\n\n      function horizontalGuides ():any {\n        if (my._shapedStickers == null) { return '' }\n\n        const EdgeSet:Indexable   = {}\n        const CenterSet:Indexable = {}\n        my._StickerList.filter(\n          (Sticker:SNS_Sticker) => ! StickerIsSelected(Sticker)\n        ).forEach((Sticker:SNS_Sticker) => {\n          const { y,Height } = Sticker.Geometry\n            const yt = Math.round(y)\n            const ym = Math.round(y+Height/2)\n            const yb = Math.round(y+Height)\n          EdgeSet[yt] = EdgeSet[yb] = true\n          CenterSet[ym] = true\n        })\n\n        const horizontalSet:Indexable = {}\n        my._shapedStickers.forEach((Sticker:SNS_Sticker) => {\n          const { y,Height } = Sticker.Geometry\n            const yt = Math.round(y)\n            const ym = Math.round(y+Height/2)\n            const yb = Math.round(y+Height)\n          if (EdgeSet[yt])                                     { horizontalSet[yt] = 'Edge' }\n          if (EdgeSet[ym]   && (horizontalSet[ym] !== 'Edge')) { horizontalSet[ym] = 'Center' }\n          if (EdgeSet[yb])                                     { horizontalSet[yb] = 'Edge' }\n          if (CenterSet[yt] && (horizontalSet[yt] !== 'Edge')) { horizontalSet[yt] = 'Center' }\n          if (CenterSet[ym] && (horizontalSet[ym] !== 'Edge')) { horizontalSet[ym] = 'Center' }\n          if (CenterSet[yb] && (horizontalSet[yb] !== 'Edge')) { horizontalSet[yb] = 'Center' }\n        })\n\n        const horizontalList:string[] = []\n          for (let y in horizontalSet) {\n            if (horizontalSet[y] != null) { horizontalList.push(y) }\n          }\n\n        return html`${horizontalList.map((y:string) => html`\n          <div class=\"SNS horizontalGuide ${horizontalSet[y]}\" style=\"top:${y}px\"/>\n        `)}`\n      }\n\n    /**** vertical Guides ****/\n\n      function verticalGuides ():any {\n        if (my._shapedStickers == null) { return '' }\n\n        const EdgeSet:Indexable   = {}\n        const CenterSet:Indexable = {}\n        my._StickerList.filter(\n          (Sticker:SNS_Sticker) => ! StickerIsSelected(Sticker)\n        ).forEach((Sticker:SNS_Sticker) => {\n          const { x,Width } = Sticker.Geometry\n            const xl = Math.round(x)\n            const xm = Math.round(x+Width/2)\n            const xr = Math.round(x+Width)\n          EdgeSet[xl] = EdgeSet[xr] = true\n          CenterSet[xm] = true\n        })\n\n        const verticalSet:Indexable = {}\n        my._shapedStickers.forEach((Sticker:SNS_Sticker) => {\n          const { x,Width } = Sticker.Geometry\n            const xl = Math.round(x)\n            const xm = Math.round(x+Width/2)\n            const xr = Math.round(x+Width)\n          if (EdgeSet[xl])                                   { verticalSet[xl] = 'Edge' }\n          if (EdgeSet[xm]   && (verticalSet[xm] !== 'Edge')) { verticalSet[xm] = 'Center' }\n          if (EdgeSet[xr])                                   { verticalSet[xr] = 'Edge' }\n          if (CenterSet[xl] && (verticalSet[xl] !== 'Edge')) { verticalSet[xl] = 'Center' }\n          if (CenterSet[xm] && (verticalSet[xm] !== 'Edge')) { verticalSet[xm] = 'Center' }\n          if (CenterSet[xr] && (verticalSet[xr] !== 'Edge')) { verticalSet[xr] = 'Center' }\n        })\n\n        const verticalList:string[] = []\n          for (let x in verticalSet) {\n            if (verticalSet[x] != null) { verticalList.push(x) }\n          }\n        return html`${verticalList.map((x:string) => html`\n          <div class=\"SNS verticalGuide ${verticalSet[x]}\" style=\"left:${x}px\"/>\n        `)}`\n      }\n\n    /**** actual rendering ****/\n\n      const BoardStyle = (Board == null ? undefined : CSSStyleOfVisual(Board))\n\n      return html`<div class=\"SNS BoardView ${Classes}\" style=${BoardStyle}\n        onPointerDown=${LassoRecognizer} onPointerMove=${LassoRecognizer}\n        onPointerUp=${LassoRecognizer} onPointerCancel=${LassoRecognizer}\n      >\n        ${Board == null\n          ? html`<div class=\"SNS Placeholder\"><div>(no Board to show)</div></div>`\n          : StickerList == null\n            ? html`<div class=\"SNS Placeholder\"><div>(no Stickers to show)</div></div>`\n            : StickerList.map((Sticker:SNS_Sticker) => {\n                if (! Sticker.isVisible) { return '' }\n\n                const Geometry   = Sticker.Geometry\n// @ts-ignore TS2339 strange: TS does not recognize \"isSelectable\"\n                const selectable = Sticker.isSelectable     // Mode-independent!\n                const selected   = StickerIsSelected(Sticker)\n\n                return html`<${SNS_StickerView} Sticker=${Sticker} key=${Sticker.Id}\n                  selected=${selected && (Mode === 'run')}\n                  SelectionFrameStyle=${SelectionFrameStyle}\n                  Geometry=${Geometry}\n                  selectable=${selectable}\n                  builtinDragging=${selectable && builtinDraggingFor(Sticker)}\n                  builtinSelection=${selectable &&builtinSelectionFor(Sticker)}\n                />`\n              })\n        }\n\n        ${(StickerList != null) && (Mode === 'edit')\n          ? StickerList.map((Sticker:SNS_Sticker) => {\n              if (! Sticker.isVisible) { return '' }\n\n              const selected = StickerIsSelected(Sticker)\n\n              return html`\n                <${SNS_Cover} Sticker=${Sticker} key=${Sticker.Id+'c'}\n                  selected=${selected}\n                  onPointerEvent=${(Event:PointerEvent) => handleStickerEvent(Event,Sticker)}\n                />\n              `\n            })\n          : ''\n        }\n\n        ${(selectedStickers.length > 0)\n          ? selectedStickers.filter(\n              (Sticker:SNS_Sticker) => Sticker.isVisible\n            ).map((Sticker:SNS_Sticker) => {\n              const Id       = Sticker.Id\n              const Geometry = Sticker.Geometry\n              return html`\n                <${SNS_ShapeHandle} key=${Id+'nw'} Mode=\"nw\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'nw')}/>\n                <${SNS_ShapeHandle} key=${Id+'n'}  Mode=\"n\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'n')}/>\n                <${SNS_ShapeHandle} key=${Id+'ne'} Mode=\"ne\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'ne')}/>\n                <${SNS_ShapeHandle} key=${Id+'e'}  Mode=\"e\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'e')}/>\n                <${SNS_ShapeHandle} key=${Id+'se'} Mode=\"se\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'se')}/>\n                <${SNS_ShapeHandle} key=${Id+'s'}  Mode=\"s\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'s')}/>\n                <${SNS_ShapeHandle} key=${Id+'sw'} Mode=\"sw\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'sw')}/>\n                <${SNS_ShapeHandle} key=${Id+'w'}  Mode=\"w\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'w')}/>\n              `\n            })\n          : ''\n        }\n        ${this._LassoStart == null\n          ? ''\n          : html`<div class=\"SNS Lasso\" style=${CSSGeometryOfLasso()}></>`\n        }\n        ${horizontalGuides()}\n        ${verticalGuides()}\n        ${Board == null\n          ? ''\n          : Board.DialogList.map((Dialog:SNS_Dialog) =>\n              html`<${SNS_DialogView} key=${Dialog.Id} PUX=${PUX} Board=${Board} Dialog=${Dialog}/>`\n            )\n        }\n      </div>`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                             SNS_StickerView                              --\n//------------------------------------------------------------------------------\n\n  class SNS_StickerView extends Component {\n    private _Sticker:SNS_Sticker|undefined\n\n  /**** componentDidMount ****/\n\n    public componentDidMount ():void {\n      const Sticker = this._Sticker as SNS_Sticker\n\n      Sticker['_View'] = (this as Component).base\n      if (Sticker['_onMount'] != null) {\n        Sticker['_onMount']()\n      }\n    }\n\n  /**** componentWillUnmount ****/\n\n    public componentWillUnmount ():void {\n      const Sticker = this._Sticker as SNS_Sticker\n\n      Sticker['_View'] = undefined\n      if (Sticker['_onUnmount'] != null) {\n        Sticker['_onUnmount']()\n      }\n    }\n\n  /**** render ****/\n\n    public render (PropSet:Indexable):any {\n      let {\n        Sticker, selectable, selected, SelectionFrameStyle,\n        Geometry, builtinSelection, builtinDragging\n      } = PropSet\n\n      this._Sticker = Sticker\n\n      let { x,y, Width,Height } = Geometry\n        allowInteger('sticker x position',x)\n        allowInteger('sticker y position',y)\n        allowOrdinal     ('sticker width',Width)\n        allowOrdinal    ('sticker height',Height)\n      const CSSGeometry = (\n        (x != null) && (Width != null) && (y != null) && (Height != null)\n        ? `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n        : ''\n      )\n\n      return html`<div class=\"\n        SNS Sticker ${selectable ? 'selectable' : ''} ${selected ? 'selected' : ''}\n      \" style=\"\n        ${CSSGeometry};\n        ${selected && (SelectionFrameStyle != null) ? `outline:${SelectionFrameStyle};` : ''}\n        ${CSSStyleOfVisual(Sticker) || ''}\n      \">\n        ${selectable\n          ? Sticker.Rendering({ builtinSelection,builtinDragging })\n          : Sticker.Rendering()\n        }\n      </div>`\n    }\n  }//------------------------------------------------------------------------------\n//--                                SNS_Cover                                 --\n//------------------------------------------------------------------------------\n\n  class SNS_Cover extends Component {\n    public render (PropSet:Indexable):any {\n      let { Sticker, onPointerEvent, ...otherProps } = PropSet\n\n      let { x,y, Width,Height } = Sticker.Geometry\n\n      const CSSGeometry = (\n        (x != null) && (Width != null) && (y != null) && (Height != null)\n        ? `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n        : ''\n      )\n\n      return html`<div class=\"SNS Cover\" style=\"\n        ${CSSGeometry} ${Sticker.isLocked ? 'pointer-events:none' : ''}\n      \" ...${otherProps}\n        onPointerDown=${onPointerEvent} onPointerMove=${onPointerEvent}\n        onPointerUp=${onPointerEvent} onPointerCancel=${onPointerEvent}\n      />`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                              SNS_DialogView                              --\n//------------------------------------------------------------------------------\n\n  class SNS_DialogView extends Component {\n    private _DragRecognizer:Function|undefined = undefined\n    private _Dialog:Indexable                  = {}\n    private _DragOffset:Indexable              = {}\n\n    public state:Indexable = { Value:0 }\n\n    public rerender () {\n      (this as Component).setState({ Value:this.state.Value+1 })\n    }\n\n    public render (PropSet:Indexable):any {\n      const { PUX, Board, Dialog } = PropSet\n\n      let {\n        Id, Name, Title, isResizable, x, y, Width, Height,\n        minWidth, maxWidth, minHeight, maxHeight,\n        Renderer, onClose\n      } = Dialog\n\n      Width = Math.max(minWidth,Width)\n      if (maxWidth != null) { Width = Math.min(Width,maxWidth) }\n\n      Height = Math.max(minHeight,Height)\n      if (maxHeight != null) { Height = Math.min(Height,maxHeight) }\n\n      if (x == -Number.MAX_SAFE_INTEGER) { x = Math.max(0,(window.innerWidth-Width)/2) }\n      if (y == -Number.MAX_SAFE_INTEGER) { y = Math.max(0,(window.innerHeight-Height)/2) }\n\n      x = Math.min(x,window.innerWidth-40)\n      y = Math.max(0,Math.min(y,window.innerHeight-30))\n\n      const my = this, me = this; my._Dialog = { x,y, Width,Height }\n\n      const handleDrag = (x:number,y:number, dx:number,dy:number) => {\n        if (Dialog._DragMode === 'drag') {\n          moveDialog(dx,dy)\n        } else {\n          resizeDialog(dx,dy)\n        }\n        Board.bringDialogToFront(Dialog.Name)\n        Board.rerender()\n      }\n\n      const moveDialog = (dx:number,dy:number) => {\n        Board.positionDialogAt(\n          Dialog.Name, my._DragOffset.x + dx,my._DragOffset.y + dy\n        )\n      }\n\n      const resizeDialog = (dx:number,dy:number) => {\n        let newWidth:number = my._Dialog.Width\n        switch (Dialog._DragMode) {\n          case 'resize-sw':\n            newWidth =  Math.max(minWidth,Math.min(my._DragOffset.Width-dx,maxWidth || Infinity))\n              dx = newWidth-my._DragOffset.Width\n            Board.positionDialogAt(\n              Dialog.Name, my._DragOffset.x-dx,my._DragOffset.y\n            )\n            newWidth = my._DragOffset.Width+dx\n            break\n          case 'resize-se':\n            newWidth = Math.max(minWidth,Math.min(my._DragOffset.Width+dx,maxWidth || Infinity))\n        }\n        let newHeight = Math.max(minHeight,Math.min(my._DragOffset.Height+dy,maxHeight || Infinity))\n        Board.sizeDialogTo(Dialog.Name, newWidth,newHeight)\n      }\n\n      let DragRecognizer = my._DragRecognizer\n      if (DragRecognizer == null) {\n        DragRecognizer = my._DragRecognizer = DragRecognizerFor(me, {\n          onlyFrom:       '.Titlebar,.leftResizer,.middleResizer,.rightResizer',\n          neverFrom:      '.CloseButton',\n          Threshold:      4,\n          onDragStarted:  (x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n            let ClassList = (Event.target as HTMLElement).classList; Dialog._DragMode = undefined\n            switch (true) {\n              case ClassList.contains('leftResizer'):   Dialog._DragMode = 'resize-sw'; break\n              case ClassList.contains('middleResizer'): Dialog._DragMode = 'resize-s';  break\n              case ClassList.contains('rightResizer'):  Dialog._DragMode = 'resize-se'; break\n              default:                                  Dialog._DragMode = 'drag'\n            }\n\n            my._DragOffset = { ...my._Dialog }\n            handleDrag(x,y, dx,dy)\n          },\n          onDragContinued: handleDrag,\n          onDragFinished:  handleDrag,\n          onDragCancelled: handleDrag,\n        })\n      }\n\n      function onCloseClick (Event:PointerEvent) {\n        Event.stopImmediatePropagation()\n        Event.preventDefault()\n\n        Board.closeDialog(Dialog.Name)\n        if (onClose != null) { onClose(Name) }\n      }\n\n\n\n      const CSSGeometry = (\n        `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n      )\n\n      let Content\n      try {\n        Content = Renderer()\n      } catch (Signal) {\n        console.error('Dialog rendering failed',Signal)\n        Content = html`<div>(Dialog rendering failed)</div>`\n      }\n\n      return html`<div class=\"PUX ${isResizable ? 'Resizable' : ''}Dialog\" id=${Id} style=\"\n        position:fixed; ${CSSGeometry}\n      \">\n        <div class=\"ContentPane\">${Content}</div>\n\n        <div class=\"Titlebar\"\n          onPointerDown=${DragRecognizer} onPointerUp=${DragRecognizer}\n          onPointerMove=${DragRecognizer} onPointerCancel=${DragRecognizer}\n        >\n          <div class=\"Title\">${Title}</div>\n          <img class=\"CloseButton\" src=\"${PUX._ImageFolder}/xmark.png\"\n            onClick=${onCloseClick}/>\n        </div>\n\n        ${isResizable ? html`\n          <div class=\"leftResizer\"\n            onPointerDown=${DragRecognizer} onPointerUp=${DragRecognizer}\n            onPointerMove=${DragRecognizer} onPointerCancel=${DragRecognizer}\n          />\n          <div class=\"middleResizer\"\n            onPointerDown=${DragRecognizer} onPointerUp=${DragRecognizer}\n            onPointerMove=${DragRecognizer} onPointerCancel=${DragRecognizer}\n          />\n          <div class=\"rightResizer\"\n            onPointerDown=${DragRecognizer} onPointerUp=${DragRecognizer}\n            onPointerMove=${DragRecognizer} onPointerCancel=${DragRecognizer}\n          />\n        `: ''}\n      </>`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                             SNS_ShapeHandle                              --\n//------------------------------------------------------------------------------\n\n  class SNS_ShapeHandle extends Component {\n    public render (PropSet:Indexable):any {\n      let { Mode, Geometry, onPointerEvent, ...otherProps } = PropSet\n\n      let { x,y, Width,Height } = Geometry\n      const xl = x-8, xm = Math.round(x+Width/2)-4,  xr = x+Width\n      const yt = y-8, ym = Math.round(y+Height/2)-4, yb = y+Height\n\n      let CSSGeometry, Cursor\n      switch (Mode) {\n        case 'nw': CSSGeometry = `left:${xl}px; top:${yt}px;`; Cursor = 'nwse'; break\n        case 'n':  CSSGeometry = `left:${xm}px; top:${yt}px;`; Cursor = 'ns';   break\n        case 'ne': CSSGeometry = `left:${xr}px; top:${yt}px;`; Cursor = 'nesw'; break\n        case 'e':  CSSGeometry = `left:${xr}px; top:${ym}px;`; Cursor = 'ew';   break\n        case 'se': CSSGeometry = `left:${xr}px; top:${yb}px;`; Cursor = 'nwse'; break\n        case 's':  CSSGeometry = `left:${xm}px; top:${yb}px;`; Cursor = 'ns';   break\n        case 'sw': CSSGeometry = `left:${xl}px; top:${yb}px;`; Cursor = 'nesw'; break\n        case 'w':  CSSGeometry = `left:${xl}px; top:${ym}px;`; Cursor = 'ew';   break\n      }\n      Cursor = 'cursor:' + Cursor + '-resize'\n\n      return html`<div class=\"SNS ShapeHandle\" style=\"${CSSGeometry} ${Cursor}\" ...${otherProps}\n        onPointerDown=${onPointerEvent} onPointerMove=${onPointerEvent}\n        onPointerUp=${onPointerEvent} onPointerCancel=${onPointerEvent}\n      />`\n    }\n  }\n\n// @ts-ignore TS2339 allow global variable \"SNS_BoardView\"\n  window.SNS_BoardView = SNS_BoardView\n\n  document.dispatchEvent(\n// @ts-ignore TS2339 allow global variable \"SNS_BoardView\"\n    new CustomEvent('SNS_BoardView',{ detail:window.SNS_BoardView })\n  )\n"],"names":["fromDocumentTo","Conversion","Stylesheet","document","createElement","setAttribute","innerHTML","head","appendChild","SNS_BoardView","_Component","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_Board","_Mode","_StickerList","_pointedSticker","_selectedStickers","_SelectionLimit","Infinity","_LassoStart","_LassoEnd","_SelectionBeforeLasso","_ShapeMode","_shapedStickers","_initialGeometries","_SnapToGrid","_GridWidth","_GridHeight","_StickerRecognizerSlot","_ShapeHandleRecognizerSlot","_LassoRecognizerSlot","state","Value","_inheritsLoose","_proto","prototype","_mountBoard","Board","this","base","_unmountBoard","undefined","componentDidMount","componentWillUnmount","rerender","Sticker","setState","render","PropSet","my","PUX","Classes","StickerList","Placeholder","Mode","SelectionLimit","selectedStickers","onSelectionChange","onStickerSelected","onStickerDeselected","SelectionFrameStyle","SelectionHandleStyle","LassoMode","onGeometryChange","SnapToGrid","GridWidth","GridHeight","finishDraggingAndShaping","abortDraggingAndShaping","changeGeometriesTo","allowTextline","allowBoard","allowListSatisfying","ValueIsSticker","allowOneOf","allowOrdinal","allowFunction","allowText","allowBoolean","allowCardinal","selectedStickerSet","Set","selectStickers","SelectionA","SelectionB","newSelection","slice","forEach","indexOf","push","StickersToSelect","StickersToDeselect","deselectedSticker","selectedSticker","StickerIsSelected","GeometryOfLasso","_my$_LassoStart","x0","x","y0","y","_ref","x1","y1","Width","Height","dragLassoTo","_GeometryOfLasso2","LassoX0","LassoY0","LassoX1","LassoY1","filter","isVisible","isLocked","isSelectable","_Sticker$Geometry","Geometry","_Sticker$Geometry2","has","add","LassoRecognizer","DragClickRecognizerFor","onlyFrom","neverFrom","Threshold","onDragStarted","dx","dy","_fromDocumentTo","left","top","onDragContinued","onDragFinished","onDragCancelled","onClicked","GeometryList","changeGeometriesBy","initialGeometries","dX","dY","dW","dH","map","Math","max","xl","xr","yt","yb","xl_","round","xr_","yt_","yb_","min","StickerRecognizer","Event","shiftKey","metaKey","SelectionChanged","shift","ShapeHandleRecognizer","DragRecognizerFor","handleShapeEvent","_GeometryOfLasso","DragRecognizer","WeakMap","initialGeometry","BoardStyle","CSSStyleOfVisual","html","_templateObject5","_taggedTemplateLiteralLoose","_templateObject6","_templateObject7","selectable","selected","_templateObject8","SNS_StickerView","Id","Recognizer","get","set","button","builtinDraggingFor","builtinSelectionFor","_templateObject9","SNS_Cover","handleStickerEvent","_templateObject10","SNS_ShapeHandle","_templateObject11","EdgeSet","CenterSet","_Sticker$Geometry3","ym","horizontalSet","_Sticker$Geometry4","horizontalList","_templateObject","_templateObject2","horizontalGuides","_Sticker$Geometry5","xm","verticalSet","_Sticker$Geometry6","verticalList","_templateObject3","_templateObject4","verticalGuides","DialogList","Dialog","_templateObject12","SNS_DialogView","Component","_Component2","_this2","_len2","_key2","_Sticker","_proto2","builtinSelection","builtinDragging","allowInteger","CSSGeometry","_templateObject13","Rendering","_Component3","onPointerEvent","otherProps","_objectWithoutPropertiesLoose","_excluded","_Sticker$Geometry7","_templateObject14","_Component4","_this3","_len3","_key3","_DragRecognizer","_Dialog","_DragOffset","_proto4","Name","Title","isResizable","minWidth","maxWidth","minHeight","maxHeight","Renderer","onClose","Number","MAX_SAFE_INTEGER","window","innerWidth","innerHeight","handleDrag","_DragMode","moveDialog","resizeDialog","bringDialogToFront","positionDialogAt","newWidth","newHeight","sizeDialogTo","ClassList","target","classList","contains","_extends","Content","Signal","console","error","_templateObject15","_templateObject16","_ImageFolder","stopImmediatePropagation","preventDefault","closeDialog","_templateObject17","_Component5","Cursor","_excluded2","_templateObject18","dispatchEvent","CustomEvent","detail"],"mappings":"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"}