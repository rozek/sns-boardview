{"version":3,"file":"sns-boardview.modern.js","sources":["../src/sns-boardview.ts"],"sourcesContent":["/*******************************************************************************\n*                                                                              *\n*                BoardView for \"Shareable Note Stickers\" (SNS)                 *\n*                                                                              *\n*******************************************************************************/\n\n  import {\n    allowBoolean,\n    allowInteger, allowOrdinal, allowCardinal,\n    allowText, allowTextline,\n    allowFunction,\n    allowListSatisfying,\n    allowOneOf,\n  } from 'javascript-interface-library'\n\n  import {\n    SNS_Board, SNS_Sticker, SNS_Dialog,\n    ValueIsSticker,\n    allowBoard,\n    CSSStyleOfVisual,\n  } from 'shareable-note-stickers'\n\n  import Conversion from 'svelte-coordinate-conversion'\n  const { fromDocumentTo } = Conversion\n\n  import { html, Component } from 'htm/preact'\n\n// @ts-ignore TS7016 *C* sometimes, I hate package management\n  import { DragRecognizerFor, DragClickRecognizerFor } from 'protoux'\n\n/**** install stylesheet for this BoardView ****/\n\n  const Stylesheet = document.createElement('style')\n    Stylesheet.setAttribute('id','SNS Stylesheet')\n    Stylesheet.innerHTML = `/*******************************************************************************\n*                                                                              *\n*                        Shareable Note Stickers (SNS)                         *\n*                                                                              *\n*******************************************************************************/\n\n/**** all SNS elements are absolutely positioned ****/\n\n  .SNS {\n    display:block; position:absolute;\n    margin:0px; padding:0px;\n    background:none; border:none; border-radius:0px; outline:none;\n  }\n\n/**** elements of class \"SNS Content\" cover their whole container ****/\n\n  .SNS.Content {\n    display:block; position:absolute;\n    left:0px; top:0px; width:100%; height:100%;\n  }\n\n/**** \"brokenSticker\" and Error Indicator ****/\n\n  .SNS.brokenSticker {\n    overflow:hidden;\n    border:dotted 1px orange; background:rgba(255,0,0,0.1);\n  }\n\n  .SNS.ErrorIndicator {\n    overflow:hidden;\n    left:0px; top:0px; width:24px; height:24px;\n    background:url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3Csvg width='24px' height='24px' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 17.0001H12.01M12 10.0001V14.0001M6.41209 21.0001H17.588C19.3696 21.0001 20.2604 21.0001 20.783 20.6254C21.2389 20.2985 21.5365 19.7951 21.6033 19.238C21.6798 18.5996 21.2505 17.819 20.3918 16.2579L14.8039 6.09805C13.8897 4.4359 13.4326 3.60482 12.8286 3.32987C12.3022 3.09024 11.6978 3.09024 11.1714 3.32987C10.5674 3.60482 10.1103 4.4359 9.19614 6.09805L3.6082 16.2579C2.74959 17.819 2.32028 18.5996 2.39677 19.238C2.46351 19.7951 2.76116 20.2985 3.21709 20.6254C3.7396 21.0001 4.63043 21.0001 6.41209 21.0001Z' stroke='orange' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' fill='white'/%3E%3C/svg%3E\");\n    pointer-events:auto;\n  }\n\n\n/**** BoardView ****/\n\n  .SNS.BoardView {\n    left:0px; top:0px; right:0px; bottom:0px;\n  }\n\n/**** Sticker and Contents, Cover ****/\n\n  .SNS.Sticker {}\n  .SNS.Sticker > .SNS {\n    -webkit-user-select:none; -moz-user-select:none; -ms-user-select:none;\n    user-select:none;\n\n    display:block; position:absolute;\n    left:0px; top:0px; width:100%; height:100%; right:auto; bottom:auto;\n  }\n\n  .SNS.Cover {\n    -webkit-user-select:none; -moz-user-select:none; -ms-user-select:none;\n    user-select:none;\n\n    z-index:1000000;\n  }\n\n/**** Selection Markers ****/\n\n  .SNS.Sticker.selected, .SNS.Cover[selected] {\n    outline:dotted 2px orangered;\n  }\n\n  .SNS.ShapeHandle {\n    width:8px; height:8px;\n    background:orangered; border:solid 1px darkgray;\n    z-index:1000001; /* above .SNS.Cover */\n  }\n\n/**** Selection Lasso ****/\n\n  .SNS.Lasso {\n    background:rgba(255,69,0, 0.1); /* border:dashed 2px orangered; */\n  }\n\n/**** Dragging Guides ****/\n\n  .SNS.horizontalGuide.Edge {\n    left:0px; right:0px; height:1px;\n    border-top:dashed 1px orangered;\n  }\n  .SNS.verticalGuide.Edge {\n    top:0px; bottom:0px; width:1px;\n    border-left:dashed 1px orangered;\n  }\n\n  .SNS.horizontalGuide.Center {\n    left:0px; right:0px; height:1px;\n    border-top:dotted 1px orangered;\n  }\n  .SNS.verticalGuide.Center {\n    top:0px; bottom:0px; width:1px;\n    border-left:dotted 1px orangered;\n  }\n\n/**** Placeholder ****/\n\n  .SNS.Placeholder {\n    display:block; position:relative;\n    width:100%; height:100%;\n  }\n\n  .SNS.Placeholder > * {\n    display:block; position:absolute;\n    left:50%; top:50%;\n    transform:translate(-55%,-50%);\n    white-space:nowrap;\n  }\n\n/**** custom Dialogs ****/\n\n  .PUX.Dialog > .ContentPane {\n    position:absolute; left:0px; top:30px; right:0px; bottom:0px;\n  }\n  .PUX.ResizableDialog > .ContentPane {\n    position:absolute; left:0px; top:30px; right:0px; bottom:10px;\n  }\n`\n  document.head.appendChild(Stylesheet)\n\n/**** make some existing types indexable ****/\n\n  interface Indexable { [Key:string]:any }\n\n//------------------------------------------------------------------------------\n//--                             Type Definitions                             --\n//------------------------------------------------------------------------------\n\n/**** geometry-related types ****/\n\n  export type SNS_Location  = number         // mainly for illustrative purposes\n  export type SNS_Dimension = number                                     // dto.\n  export type SNS_Position  = { x:SNS_Location,y:SNS_Location }\n  export type SNS_Size      = { Width:SNS_Dimension,Height:SNS_Dimension }\n  export type SNS_Geometry  = { x:SNS_Location,y:SNS_Location, Width:SNS_Dimension,Height:SNS_Dimension }\n\n//------------------------------------------------------------------------------\n//--                              SNS_BoardView                               --\n//------------------------------------------------------------------------------\n\n  export class SNS_BoardView extends Component {\n    private _Board:SNS_Board|undefined\n    private _Mode:'touch'|'enclose' = 'enclose'\n\n    private _StickerList:SNS_Sticker[] = []\n    private _pointedSticker:SNS_Sticker|undefined\n    private _selectedStickers:SNS_Sticker[] = []       // for dragging & shaping\n    private _SelectionLimit:number = Infinity\n\n    private _LassoStart:SNS_Position|undefined\n    private _LassoEnd:SNS_Position|undefined\n    private _SelectionBeforeLasso:SNS_Sticker[] = []\n\n    private _ShapeMode:string|undefined\n    private _shapedStickers:SNS_Sticker[]|undefined\n    private _initialGeometries:SNS_Geometry[]|undefined\n\n    private _SnapToGrid:boolean = false\n    private _GridWidth:number   = 1\n    private _GridHeight:number  = 1\n\n    private _StickerRecognizerSlot = {}\n    private _ShapeHandleRecognizerSlot = {}\n    private _LassoRecognizerSlot = {}\n\n    public state:Indexable = { Value:0 }\n\n  /**** _mountBoard ****/\n\n    private _mountBoard (Board:SNS_Board|undefined):void {\n      if ((Board != null) && ((this as Component).base != null)) {\n        Board['_View'] = (this as Component).base\n        if (Board['_onMount'] != null) {\n          Board['_onMount']()\n        }\n      }\n      this._Board = Board\n    }\n\n  /**** _unmountBoard ****/\n\n    private _unmountBoard ():void {\n      const Board = this._Board\n      if (Board != null) {\n        Board['_View'] = undefined\n        if (Board['_onUnmount'] != null) {\n          Board['_onUnmount']()\n        }\n      }\n    }\n\n  /**** componentDidMount/WillUnmount ****/\n\n    public componentDidMount    ():void { this._mountBoard(this._Board) }\n    public componentWillUnmount ():void { this._unmountBoard() }\n\n  /**** rerender ****/\n\n    public rerender (Sticker?:SNS_Sticker):void {\n// @ts-ignore TS2339 \"Value\" is a valid property\n      (this as Component).setState({ Value:(this as Component).state.Value + 1 })\n    }\n\n  /**** render ****/\n\n    public render (PropSet:Indexable):any {\n      const my = this\n\n      let {\n        PUX,\n        Classes, Board, StickerList, Placeholder, Mode,\n        SelectionLimit, selectedStickers,\n        onSelectionChange, onStickerSelected, onStickerDeselected,\n        SelectionFrameStyle, SelectionHandleStyle,\n        LassoMode, onGeometryChange,\n        SnapToGrid, GridWidth, GridHeight,\n      } = PropSet\n\n      if (this._Board !== Board) {\n        this._unmountBoard()\n        this._mountBoard(Board)\n      }\n\n    /**** finishDraggingAndShaping ****/\n\n      function finishDraggingAndShaping ():void {\n        my._pointedSticker    = undefined\n        my._shapedStickers    = undefined\n        my._initialGeometries = undefined\n      }\n\n    /**** abortDraggingAndShaping ****/\n\n      function abortDraggingAndShaping ():void {\n        if (my._shapedStickers != null) {\n          changeGeometriesTo(my._shapedStickers,my._initialGeometries as SNS_Geometry[])\n        }\n        finishDraggingAndShaping()\n      }\n\n    /**** validate given properties ****/\n\n      allowTextline      ('board CSS class names',Classes)\n      allowBoard                         ('board',Board)\n      allowListSatisfying         ('sticker list',StickerList, ValueIsSticker)\n      allowTextline           ('placeholder text',Placeholder)\n      allowOneOf                    ('board mode',Mode, ['edit','run'])\n      allowOrdinal             ('selection limit',SelectionLimit)\n      allowListSatisfying('list of selected stickers',selectedStickers, ValueIsSticker)\n      allowFunction  ('selection change callback',onSelectionChange)\n      allowFunction         ('selection callback',onStickerSelected)\n      allowFunction       ('deselection callback',onStickerDeselected)\n      allowTextline  ('selection frame CSS style',SelectionFrameStyle)\n      allowText     ('selection handle CSS style',SelectionHandleStyle)\n      allowOneOf          ('lasso selection mode',LassoMode, ['touch','enclose'])\n      allowFunction   ('geometry change callback',onGeometryChange)\n      allowBoolean           ('\"SnapToGrid\" mode',SnapToGrid)\n      allowCardinal                 ('grid width',GridWidth)\n      allowCardinal                ('grid height',GridHeight)\n\n    /**** provide defaults for missing properties ****/\n\n      if (Classes              == null) { Classes               = '' }\n      if (Placeholder          == null) { Placeholder           = '(empty)' }\n      if (Mode                 == null) { Mode                  = 'run' }\n      if (SelectionLimit       == null) { SelectionLimit        = Infinity }\n      if (selectedStickers     == null) { selectedStickers      = [] }\n//    if (SelectionFrameStyle  == null) { SelectionFrameStyle   = 'dotted 2px orangered' }\n      if (SelectionHandleStyle == null) { SelectionHandleStyle  = 'background:orangered; border:solid 1px darkgray' }\n      if (LassoMode            == null) { LassoMode             = 'enclose' }\n      if (SnapToGrid           == null) { SnapToGrid            = false }\n      if (GridWidth            == null) { GridWidth             = 10 }\n      if (GridHeight           == null) { GridHeight            = 10 }\n\n    /**** sanitize Selections ****/\n\n      const selectedStickerSet:Set<SNS_Sticker> = new Set()\n        selectedStickers = selectedStickers.filter((selectedSticker:SNS_Sticker) => {\n          if (\n            ValueIsSticker(selectedSticker) &&\n            ! selectedStickerSet.has(selectedSticker)\n          ) {\n            selectedStickerSet.add(selectedSticker)\n            return true\n          } else {\n            abortDraggingAndShaping()\n            return false        // invalid selections don't invoke any callbacks\n          }\n        })\n      if (selectedStickers.length > SelectionLimit) {\n        selectStickers(selectedStickers.slice(0,SelectionLimit))\n      }\n\n     my._Mode = Mode\n\n      my._StickerList      = StickerList\n      my._selectedStickers = selectedStickers   // needed for dragging & shaping\n      my._SelectionLimit   = SelectionLimit                              // dto.\n\n      my._SnapToGrid = SnapToGrid                                        // dto.\n      my._GridWidth  = GridWidth                                         // dto.\n      my._GridHeight = GridHeight                                        // dto.\n\n    /**** Sticker Selection ****/\n\n      function selectStickers (\n        SelectionA:SNS_Sticker[], SelectionB:SNS_Sticker[] = []\n      ):void {\n        const newSelection:SNS_Sticker[] = SelectionA.slice()\n        SelectionB.forEach((Sticker:SNS_Sticker) => {\n          if (newSelection.indexOf(Sticker) < 0) { newSelection.push(Sticker) }\n        })\n\n        if (selectedStickers.length > my._SelectionLimit) {\n          newSelection.length = my._SelectionLimit\n        }\n\n        const StickersToSelect:SNS_Sticker[]   = []\n        const StickersToDeselect:SNS_Sticker[] = []\n          newSelection.forEach((Sticker:SNS_Sticker) => {\n            if (my._selectedStickers.indexOf(Sticker) < 0) {\n              StickersToSelect.push(Sticker)\n            }\n          })\n\n          my._selectedStickers.forEach((Sticker:SNS_Sticker) => {\n            if (newSelection.indexOf(Sticker) < 0) {\n              StickersToDeselect.push(Sticker)\n            }\n          })\n        selectedStickers = my._selectedStickers = newSelection\n\n        if ((StickersToSelect.length > 0) || (StickersToDeselect.length > 0)) {\n          abortDraggingAndShaping()\n\n          if (onSelectionChange != null) {\n            onSelectionChange(selectedStickers)\n          }\n        }\n\n        if ((StickersToDeselect.length > 0) && (onStickerDeselected != null)) {\n          StickersToDeselect.forEach((deselectedSticker:SNS_Sticker) => {\n            onStickerDeselected(deselectedSticker)\n          })\n        }\n\n        if ((StickersToSelect.length > 0) && (onStickerSelected != null)) {\n          StickersToSelect.forEach((selectedSticker:SNS_Sticker) => {\n            onStickerSelected(selectedSticker)\n          })\n        }\n      }\n\n      function StickerIsSelected (Sticker:SNS_Sticker):boolean {\n        return (my._selectedStickers.indexOf(Sticker) >= 0)\n      }\n\n    /**** Lasso Selection ****/\n\n      function GeometryOfLasso ():SNS_Geometry {\n        const { x:x0,y:y0 } = my._LassoStart as SNS_Position\n        const { x:x1,y:y1 } = my._LassoEnd || my._LassoStart as SNS_Position\n\n        let LassoX = (x0 <= x1 ? x0 : x1); let LassoWidth  = (x0 <= x1 ? x1-x0 : x0-x1)\n        let LassoY = (y0 <= y1 ? y0 : y1); let LassoHeight = (y0 <= y1 ? y1-y0 : y0-y1)\n\n        return { x:LassoX,y:LassoY, Width:LassoWidth,Height:LassoHeight }\n      }\n\n      function CSSGeometryOfLasso ():string {\n        const { x,y, Width,Height } = GeometryOfLasso()\n        return `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px`\n      }\n\n      function StickersCaughtByLasso ():SNS_Sticker[] {\n        let { x:LassoX0,y:LassoY0, Width:LassoWidth,Height:LassoHeight } = GeometryOfLasso()\n        let LassoX1 = LassoX0+LassoWidth\n        let LassoY1 = LassoY0+LassoHeight\n\n        if (LassoMode === 'touch') {\n          return my._StickerList.filter((Sticker:SNS_Sticker) => {\n            if (! Sticker.isVisible || Sticker.isLocked) { return false }\n// @ts-ignore TS2339 strange: why does TS not recognize \"isSelectable\"?\n            if ((my._Mode === 'run') && ! Sticker.isSelectable) { return false }\n\n            const { x,y, Width,Height } = Sticker.Geometry\n            return (\n              (LassoX0 <= x+Width)  && (x <= LassoX1) &&\n              (LassoY0 <= y+Height) && (y <= LassoY1)\n            )\n          })\n        } else { // 'enclose'\n          return my._StickerList.filter((Sticker:SNS_Sticker) => {\n            if (! Sticker.isVisible || Sticker.isLocked) { return false }\n// @ts-ignore TS2339 strange: why does TS not recognize \"isSelectable\"?\n            if ((my._Mode === 'run') && ! Sticker.isSelectable) { return false }\n\n            const { x,y, Width,Height } = Sticker.Geometry\n            return (\n              (LassoX0 <= x) && (x+Width  <= LassoX1) &&\n              (LassoY0 <= y) && (y+Height <= LassoY1)\n            )\n          })\n        }\n      }\n\n      function dragLassoTo (\n        x:SNS_Location,y:SNS_Location, additiveSelection:boolean\n      ):void {\n        my._LassoEnd = { x,y }\n        selectStickers(\n          additiveSelection ? my._SelectionBeforeLasso : [], StickersCaughtByLasso()\n        )\n      }\n\n      function applyLasso ():void {\n        my._LassoStart = my._LassoEnd = undefined\n        my._SelectionBeforeLasso = []\n      }\n\n      function abortLasso ():void {\n        my._LassoStart = my._LassoEnd = undefined\n        selectStickers(my._SelectionBeforeLasso)\n        my._SelectionBeforeLasso = []\n      }\n\n    /**** Lasso Recognizer ****/\n\n      function onBoardClick ():void {\n        selectStickers([])\n      }\n\n      const LassoRecognizer = DragClickRecognizerFor(my._LassoRecognizerSlot, {\n        onlyFrom:     '.SNS.BoardView,.SNS.Sticker,.SNS.Sticker *',\n        neverFrom:    '.SNS.Sticker.selectable,.SNS.Sticker.selectable *',\n        Threshold:    4,\n        onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n          my._SelectionBeforeLasso = my._selectedStickers.slice()\n\n// @ts-ignore TS2345 type casting is ok here\n          ;({ left:x,top:y } = fromDocumentTo('local',{ left:x,top:y },(my as Component).base))\n\n          my._LassoStart = { x,y }\n          dragLassoTo(x,y, Event.shiftKey || Event.metaKey)\n          my.rerender()\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n          dragLassoTo(\n// @ts-ignore TS2532 my._LassoStart is _not_ undefined\n            my._LassoStart.x+dx,my._LassoStart.y+dy,\n            Event.shiftKey || Event.metaKey\n          )\n          my.rerender()\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n          dragLassoTo(\n// @ts-ignore TS2532 my._LassoStart is _not_ undefined\n            my._LassoStart.x+dx,my._LassoStart.y+dy,\n            Event.shiftKey || Event.metaKey\n          )\n          applyLasso()\n          my.rerender()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortLasso()\n          my.rerender()\n        },\n        onClicked:onBoardClick\n      })\n\n    /**** Geometry Handling ****/\n\n      function changeGeometriesTo (\n        StickerList:SNS_Sticker[], GeometryList:SNS_Geometry[]\n      ):void {\n        if (onGeometryChange != null) {\n          onGeometryChange(StickerList,GeometryList)\n          my.rerender()\n        }\n      }\n\n      function changeGeometriesBy (\n        StickerList:SNS_Sticker[], Mode:string, dx:number,dy:number,\n        initialGeometries?:SNS_Geometry[]\n      ):void {\n        if (onGeometryChange == null) { return }\n\n        let dX:number = 0, dY:number = 0, dW:number = 0, dH:number = 0\n        switch (Mode) {\n          case 'nw': dX = dx; dW = -dx; dY = dy; dH = -dy; break\n          case 'n':                     dY = dy; dH = -dy; break\n          case 'ne':          dW = dx;  dY = dy; dH = -dy; break\n          case 'e':           dW = dx;                     break\n          case 'se':          dW = dx;           dH = dy;  break\n          case 's':                              dH = dy;  break\n          case 'sw': dX = dx; dW = -dx;          dH = dy;  break\n          case 'w':  dX = dx; dW = -dx;                    break\n          case 'c':  dX = dx;           dY = dy;\n        }\n\n        if (initialGeometries == null) {\n          initialGeometries = my._initialGeometries as SNS_Geometry[]\n        }\n\n        const GeometryList = initialGeometries.map(\n          (Geometry:SNS_Geometry) => {\n            let Width:number  = Math.max(0,Geometry.Width+dW)\n            let Height:number = Math.max(0,Geometry.Height+dH)\n\n            let xl:number = Geometry.x+dX, xr = xl + Width\n            let yt:number = Geometry.y+dY, yb = yt + Height\n\n            if (my._SnapToGrid) {\n              let xl_ = my._GridWidth*Math.round(xl/my._GridWidth)\n              let xr_ = my._GridWidth*Math.round(xr/my._GridWidth)\n              let yt_ = my._GridHeight*Math.round(yt/my._GridHeight)\n              let yb_ = my._GridHeight*Math.round(yb/my._GridHeight)\n\n              switch (Mode) {\n                case 'nw': xl = Math.min(xl_,xr); yt = Math.min(yt_,yb); break\n                case 'n':                         yt = Math.min(yt_,yb); break\n                case 'ne': xr = Math.max(xl,xr_); yt = Math.min(yt_,yb); break\n                case 'e':  xr = Math.max(xl,xr_);                        break\n                case 'se': xr = Math.max(xl,xr_); yb = Math.max(yt,yb_); break\n                case 's':                         yb = Math.max(yt,yb_); break\n                case 'sw': xl = Math.min(xl_,xr); yb = Math.max(yt,yb_); break\n                case 'w':  xl = Math.min(xl_,xr);                        break\n                case 'c':  xl = xl_; xr = xl+Width; yt = yt_; yb = yt+Height\n              }\n            }\n            return { x:xl,y:yt, Width:xr-xl,Height:yb-yt }\n          }\n        )\n\n        changeGeometriesTo(StickerList,GeometryList)\n      }\n\n    /**** Sticker Drag/Select Recognizer ****/\n\n      const onStickerClick = (x:number,y:number, Event:PointerEvent) => {\n        if (SelectionLimit === 0) { return }\n\n        const Sticker = my._pointedSticker as SNS_Sticker\n\n        let SelectionChanged:boolean = false\n        let StickersToSelect:SNS_Sticker[], StickersToDeselect:SNS_Sticker[]\n        if (Event.shiftKey || Event.metaKey) { // additive/subtractive selection\n          SelectionChanged = true\n          if (StickerIsSelected(Sticker)) {\n            StickersToDeselect = [Sticker]\n            selectedStickers   = selectedStickers.filter(\n              (selectedSticker:SNS_Sticker) => (selectedSticker !== Sticker)\n            )\n          } else {\n            if (selectedStickers.length === SelectionLimit) {\n              StickersToDeselect = [selectedStickers.shift()]\n            }\n            StickersToSelect = [Sticker]\n            selectedStickers.push(Sticker)\n          }\n        } else {                                         // definitive selection\n          StickersToDeselect = selectedStickers.filter(\n            (selectedSticker:SNS_Sticker) => (selectedSticker !== Sticker)\n          )\n          SelectionChanged = ! StickerIsSelected(Sticker)\n          StickersToSelect  = (SelectionChanged ? [Sticker] : [])\n          selectedStickers  = [Sticker]\n        }\n\n        if (SelectionChanged && (onSelectionChange != null)) {\n          onSelectionChange(selectedStickers)\n        }\n\n// @ts-ignore TS2454 let's check IF variables were assigned\n        if ((StickersToDeselect != null) && (onStickerDeselected != null)) {\n          StickersToDeselect.forEach((deselectedSticker:SNS_Sticker) => {\n            onStickerDeselected(deselectedSticker)\n          })\n        }\n\n// @ts-ignore TS2454 let's check IF variables were assigned\n        if ((StickersToSelect != null) && (onStickerSelected != null)) {\n          StickersToSelect.forEach((selectedSticker:SNS_Sticker) => {\n            onStickerSelected(selectedSticker)\n          })\n        }\n\n        if (SelectionChanged) { my.rerender() }\n      }\n\n    /**** StickerRecognizer ****/\n\n      const StickerRecognizer = DragClickRecognizerFor(my._StickerRecognizerSlot, {\n        onlyFrom:     '.SNS.Cover',\n        Threshold:    4,\n        onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n          if (! StickerIsSelected(my._pointedSticker as SNS_Sticker)) {\n            if (Event.shiftKey || Event.metaKey) {  // additive/subtractive sel.\n              selectStickers([my._pointedSticker as SNS_Sticker],my._selectedStickers)\n            } else {\n              selectStickers([my._pointedSticker as SNS_Sticker])\n            }\n          }\n\n          my._shapedStickers    = my._selectedStickers\n          my._initialGeometries = my._selectedStickers.map(\n            (Sticker:SNS_Sticker) => Sticker.Geometry\n          )\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n\n          changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n          finishDraggingAndShaping()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortDraggingAndShaping()\n        },\n        onClicked:onStickerClick\n      })\n\n    /**** handleStickerEvent ****/\n\n      function handleStickerEvent (Event:PointerEvent, Sticker:SNS_Sticker):void {\n        my._ShapeMode      = 'c'\n        my._pointedSticker = Sticker\n        StickerRecognizer(Event)\n      }\n\n    /**** ShapeHandle Recognizer ****/\n\n      const ShapeHandleRecognizer = DragRecognizerFor(my._ShapeHandleRecognizerSlot, {\n        onlyFrom:     '.SNS.ShapeHandle',\n        Threshold:    0,\n        onDragStarted:(x:number,y:number, dx:number,dy:number) => {\n          my._shapedStickers    = my._selectedStickers\n          my._initialGeometries = my._selectedStickers.map(\n            (Sticker:SNS_Sticker) => Sticker.Geometry\n          )\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n        },\n        onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n        },\n        onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n          if (my._shapedStickers == null) { return }\n\n          changeGeometriesBy(my._shapedStickers, my._ShapeMode as string, dx,dy)\n          finishDraggingAndShaping()\n        },\n        onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n          abortDraggingAndShaping()\n        }\n      })\n\n      function handleShapeEvent (Event:PointerEvent, Mode:string):void {\n        my._ShapeMode = Mode\n        ShapeHandleRecognizer(Event)\n      }\n\n    /**** builtinSelectionFor ****/\n\n      function builtinSelectionFor (Sticker:SNS_Sticker):Function {\n        return function (Event:PointerEvent):void {\n          my._pointedSticker = Sticker\n          onStickerClick(0,0, Event)\n        }\n      }\n\n    /**** builtinDraggingFor ****/\n\n      const DragRecognizer:WeakMap<SNS_Sticker,Function> = new WeakMap()\n\n      function builtinDraggingFor (Sticker:SNS_Sticker):Function {\n        let Recognizer = DragRecognizer.get(Sticker)\n        if (Recognizer == null) {\n          DragRecognizer.set(Sticker, Recognizer = DragClickRecognizerFor(Sticker, {\n            onlyFrom:     '.builtinDraggable',\n            neverFrom:    '.notBuiltinDraggable',\n            Threshold:    4,\n            onDragStarted:(x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n              my._pointedSticker = Sticker\n              if (! StickerIsSelected(my._pointedSticker as SNS_Sticker)) {\n                if (Event.shiftKey || Event.metaKey) {  // additive/subtractive sel.\n                  selectStickers([my._pointedSticker as SNS_Sticker],my._selectedStickers)\n                } else {\n                  selectStickers([my._pointedSticker as SNS_Sticker])\n                }\n              }\n\n              my._shapedStickers    = my._selectedStickers\n              my._initialGeometries = my._selectedStickers.map(\n                (Sticker:SNS_Sticker) => Sticker.Geometry\n              )\n              changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n            },\n            onDragContinued:(x:number,y:number, dx:number,dy:number) => {\n              if (my._shapedStickers == null) { return }\n              changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n            },\n            onDragFinished: (x:number,y:number, dx:number,dy:number) => {\n              if (my._shapedStickers == null) { return }\n\n              changeGeometriesBy(my._shapedStickers,'c', dx,dy)\n              finishDraggingAndShaping()\n            },\n            onDragCancelled:(x:number,y:number, dx:number,dy:number) => {\n              abortDraggingAndShaping()\n            },\n            onClicked:(x:number,y:number, Event:PointerEvent) => {\n              my._pointedSticker = Sticker\n              onStickerClick(0,0, Event)\n            }\n          }))\n        }\n        return Recognizer as Function\n      }\n\n    /**** horizontal Guides ****/\n\n      function horizontalGuides ():any {\n        if (my._shapedStickers == null) { return '' }\n\n        const EdgeSet:Indexable   = {}\n        const CenterSet:Indexable = {}\n        my._StickerList.filter(\n          (Sticker:SNS_Sticker) => ! StickerIsSelected(Sticker)\n        ).forEach((Sticker:SNS_Sticker) => {\n          const { y,Height } = Sticker.Geometry\n            const yt = Math.round(y)\n            const ym = Math.round(y+Height/2)\n            const yb = Math.round(y+Height)\n          EdgeSet[yt] = EdgeSet[yb] = true\n          CenterSet[ym] = true\n        })\n\n        const horizontalSet:Indexable = {}\n        my._shapedStickers.forEach((Sticker:SNS_Sticker) => {\n          const { y,Height } = Sticker.Geometry\n            const yt = Math.round(y)\n            const ym = Math.round(y+Height/2)\n            const yb = Math.round(y+Height)\n          if (EdgeSet[yt])                                     { horizontalSet[yt] = 'Edge' }\n          if (EdgeSet[ym]   && (horizontalSet[ym] !== 'Edge')) { horizontalSet[ym] = 'Center' }\n          if (EdgeSet[yb])                                     { horizontalSet[yb] = 'Edge' }\n          if (CenterSet[yt] && (horizontalSet[yt] !== 'Edge')) { horizontalSet[yt] = 'Center' }\n          if (CenterSet[ym] && (horizontalSet[ym] !== 'Edge')) { horizontalSet[ym] = 'Center' }\n          if (CenterSet[yb] && (horizontalSet[yb] !== 'Edge')) { horizontalSet[yb] = 'Center' }\n        })\n\n        const horizontalList:string[] = []\n          for (let y in horizontalSet) {\n            if (horizontalSet[y] != null) { horizontalList.push(y) }\n          }\n\n        return html`${horizontalList.map((y:string) => html`\n          <div class=\"SNS horizontalGuide ${horizontalSet[y]}\" style=\"top:${y}px\"/>\n        `)}`\n      }\n\n    /**** vertical Guides ****/\n\n      function verticalGuides ():any {\n        if (my._shapedStickers == null) { return '' }\n\n        const EdgeSet:Indexable   = {}\n        const CenterSet:Indexable = {}\n        my._StickerList.filter(\n          (Sticker:SNS_Sticker) => ! StickerIsSelected(Sticker)\n        ).forEach((Sticker:SNS_Sticker) => {\n          const { x,Width } = Sticker.Geometry\n            const xl = Math.round(x)\n            const xm = Math.round(x+Width/2)\n            const xr = Math.round(x+Width)\n          EdgeSet[xl] = EdgeSet[xr] = true\n          CenterSet[xm] = true\n        })\n\n        const verticalSet:Indexable = {}\n        my._shapedStickers.forEach((Sticker:SNS_Sticker) => {\n          const { x,Width } = Sticker.Geometry\n            const xl = Math.round(x)\n            const xm = Math.round(x+Width/2)\n            const xr = Math.round(x+Width)\n          if (EdgeSet[xl])                                   { verticalSet[xl] = 'Edge' }\n          if (EdgeSet[xm]   && (verticalSet[xm] !== 'Edge')) { verticalSet[xm] = 'Center' }\n          if (EdgeSet[xr])                                   { verticalSet[xr] = 'Edge' }\n          if (CenterSet[xl] && (verticalSet[xl] !== 'Edge')) { verticalSet[xl] = 'Center' }\n          if (CenterSet[xm] && (verticalSet[xm] !== 'Edge')) { verticalSet[xm] = 'Center' }\n          if (CenterSet[xr] && (verticalSet[xr] !== 'Edge')) { verticalSet[xr] = 'Center' }\n        })\n\n        const verticalList:string[] = []\n          for (let x in verticalSet) {\n            if (verticalSet[x] != null) { verticalList.push(x) }\n          }\n        return html`${verticalList.map((x:string) => html`\n          <div class=\"SNS verticalGuide ${verticalSet[x]}\" style=\"left:${x}px\"/>\n        `)}`\n      }\n\n    /**** actual rendering ****/\n\n      const BoardStyle = (Board == null ? undefined : CSSStyleOfVisual(Board))\n\n      return html`<div class=\"SNS BoardView ${Classes}\" style=${BoardStyle}\n        onPointerDown=${LassoRecognizer} onPointerMove=${LassoRecognizer}\n        onPointerUp=${LassoRecognizer} onPointerCancel=${LassoRecognizer}\n      >\n        ${Board == null\n          ? html`<div class=\"SNS Placeholder\"><div>(no Board to show)</div></div>`\n          : StickerList == null\n            ? html`<div class=\"SNS Placeholder\"><div>(no Stickers to show)</div></div>`\n            : StickerList.map((Sticker:SNS_Sticker) => {\n                if (! Sticker.isVisible) { return '' }\n\n                const Geometry   = Sticker.Geometry\n// @ts-ignore TS2339 strange: TS does not recognize \"isSelectable\"\n                const selectable = Sticker.isSelectable     // Mode-independent!\n                const selected   = StickerIsSelected(Sticker)\n\n                return html`<${SNS_StickerView} Sticker=${Sticker} key=${Sticker.Id}\n                  selected=${selected && (Mode === 'run')}\n                  SelectionFrameStyle=${SelectionFrameStyle}\n                  Geometry=${Geometry}\n                  selectable=${selectable}\n                  builtinDragging=${selectable && builtinDraggingFor(Sticker)}\n                  builtinSelection=${selectable &&builtinSelectionFor(Sticker)}\n                />`\n              })\n        }\n\n        ${(StickerList != null) && (Mode === 'edit')\n          ? StickerList.map((Sticker:SNS_Sticker) => {\n              if (! Sticker.isVisible) { return '' }\n\n              const selected = StickerIsSelected(Sticker)\n\n              return html`\n                <${SNS_Cover} Sticker=${Sticker} key=${Sticker.Id+'c'}\n                  selected=${selected}\n                  onPointerEvent=${(Event:PointerEvent) => handleStickerEvent(Event,Sticker)}\n                />\n              `\n            })\n          : ''\n        }\n\n        ${(selectedStickers.length > 0)\n          ? selectedStickers.filter(\n              (Sticker:SNS_Sticker) => Sticker.isVisible\n            ).map((Sticker:SNS_Sticker) => {\n              const Id       = Sticker.Id\n              const Geometry = Sticker.Geometry\n              return html`\n                <${SNS_ShapeHandle} key=${Id+'nw'} Mode=\"nw\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'nw')}/>\n                <${SNS_ShapeHandle} key=${Id+'n'}  Mode=\"n\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'n')}/>\n                <${SNS_ShapeHandle} key=${Id+'ne'} Mode=\"ne\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'ne')}/>\n                <${SNS_ShapeHandle} key=${Id+'e'}  Mode=\"e\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'e')}/>\n                <${SNS_ShapeHandle} key=${Id+'se'} Mode=\"se\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'se')}/>\n                <${SNS_ShapeHandle} key=${Id+'s'}  Mode=\"s\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'s')}/>\n                <${SNS_ShapeHandle} key=${Id+'sw'} Mode=\"sw\" Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'sw')}/>\n                <${SNS_ShapeHandle} key=${Id+'w'}  Mode=\"w\"  Geometry=${Geometry}\n                  onPointerEvent=${(Event:PointerEvent) => handleShapeEvent(Event,'w')}/>\n              `\n            })\n          : ''\n        }\n        ${this._LassoStart == null\n          ? ''\n          : html`<div class=\"SNS Lasso\" style=${CSSGeometryOfLasso()}></>`\n        }\n        ${horizontalGuides()}\n        ${verticalGuides()}\n        ${Board == null\n          ? ''\n          : Board.DialogList.map((Dialog:SNS_Dialog) =>\n              html`<${SNS_DialogView} key=${Dialog.Id} PUX=${PUX} Board=${Board} Dialog=${Dialog}/>`\n            )\n        }\n      </div>`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                             SNS_StickerView                              --\n//------------------------------------------------------------------------------\n\n  class SNS_StickerView extends Component {\n    private _Sticker:SNS_Sticker|undefined\n\n  /**** componentDidMount ****/\n\n    public componentDidMount ():void {\n      const Sticker = this._Sticker as SNS_Sticker\n\n      Sticker['_View'] = (this as Component).base\n      if (Sticker['_onMount'] != null) {\n        Sticker['_onMount']()\n      }\n    }\n\n  /**** componentWillUnmount ****/\n\n    public componentWillUnmount ():void {\n      const Sticker = this._Sticker as SNS_Sticker\n\n      Sticker['_View'] = undefined\n      if (Sticker['_onUnmount'] != null) {\n        Sticker['_onUnmount']()\n      }\n    }\n\n  /**** render ****/\n\n    public render (PropSet:Indexable):any {\n      let {\n        Sticker, selectable, selected, SelectionFrameStyle,\n        Geometry, builtinSelection, builtinDragging\n      } = PropSet\n\n      this._Sticker = Sticker\n\n      let { x,y, Width,Height } = Geometry\n        allowInteger('sticker x position',x)\n        allowInteger('sticker y position',y)\n        allowOrdinal     ('sticker width',Width)\n        allowOrdinal    ('sticker height',Height)\n      const CSSGeometry = (\n        (x != null) && (Width != null) && (y != null) && (Height != null)\n        ? `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n        : ''\n      )\n\n      return html`<div class=\"\n        SNS Sticker ${selectable ? 'selectable' : ''} ${selected ? 'selected' : ''}\n      \" style=\"\n        ${CSSGeometry};\n        ${selected && (SelectionFrameStyle != null) ? `outline:${SelectionFrameStyle};` : ''}\n        ${CSSStyleOfVisual(Sticker) || ''}\n      \">\n        ${selectable\n          ? Sticker.Rendering({ builtinSelection,builtinDragging })\n          : Sticker.Rendering()\n        }\n      </div>`\n    }\n  }//------------------------------------------------------------------------------\n//--                                SNS_Cover                                 --\n//------------------------------------------------------------------------------\n\n  class SNS_Cover extends Component {\n    public render (PropSet:Indexable):any {\n      let { Sticker, onPointerEvent, ...otherProps } = PropSet\n\n      let { x,y, Width,Height } = Sticker.Geometry\n\n      const CSSGeometry = (\n        (x != null) && (Width != null) && (y != null) && (Height != null)\n        ? `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n        : ''\n      )\n\n      return html`<div class=\"SNS Cover\" style=\"\n        ${CSSGeometry} ${Sticker.isLocked ? 'pointer-events:none' : ''}\n      \" ...${otherProps}\n        onPointerDown=${onPointerEvent} onPointerMove=${onPointerEvent}\n        onPointerUp=${onPointerEvent} onPointerCancel=${onPointerEvent}\n      />`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                              SNS_DialogView                              --\n//------------------------------------------------------------------------------\n\n  const DefaultGeometry:SNS_Geometry = {\n    x:-Number.MAX_SAFE_INTEGER, Width:320,\n    y:-Number.MAX_SAFE_INTEGER, Height:240\n  }\n\n  class SNS_DialogView extends Component {\n    private _DragRecognizer:Function|undefined = undefined\n    private _Geometry:SNS_Geometry = DefaultGeometry // act., constrained dlg geo\n    private _DragMode:'drag'|'resize-sw'|'resize-s'|'resize-se'|undefined\n    private _DragOffset:SNS_Geometry = DefaultGeometry  // dlg geo at drag start\n\n    public state:Indexable = { Value:0 }\n\n    public rerender () {\n      (this as Component).setState({ Value:this.state.Value+1 })\n    }\n\n    public render (PropSet:Indexable):any {\n      const { PUX, Board, Dialog } = PropSet\n      if (Dialog.Visibility == false) { return '' }\n\n      let {\n        Id, Name, Title, isResizable, x, y, Width, Height,\n        minWidth, maxWidth, minHeight, maxHeight,\n        Renderer, onClose\n      } = Dialog\n\n      Width = Math.max(minWidth,Width)\n      if (maxWidth != null) { Width = Math.min(Width,maxWidth) }\n\n      Height = Math.max(minHeight,Height)\n      if (maxHeight != null) { Height = Math.min(Height,maxHeight) }\n\n      if (x == -Number.MAX_SAFE_INTEGER) { x = Math.max(0,(window.innerWidth-Width)/2) }\n      if (y == -Number.MAX_SAFE_INTEGER) { y = Math.max(0,(window.innerHeight-Height)/2) }\n\n      x = Math.min(x,window.innerWidth-40)\n      y = Math.max(0,Math.min(y,window.innerHeight-30))\n\n      const my = this, me = this; my._Geometry = { x,y, Width,Height }\n\n      const handleDrag = (x:number,y:number, dx:number,dy:number) => {\n        if (my._DragMode === 'drag') {\n          moveDialog(dx,dy)\n        } else {\n          resizeDialog(dx,dy)\n        }\n        Board.bringDialogToFront(Dialog.Name)\n        Board.rerender()\n      }\n\n      const moveDialog = (dx:number,dy:number) => {\n        Board.positionDialogAt(\n          Dialog.Name, my._DragOffset.x + dx,my._DragOffset.y + dy\n        )\n      }\n\n      const resizeDialog = (dx:number,dy:number) => {\n        let newWidth:number = my._DragOffset.Width\n        switch (my._DragMode) {\n          case 'resize-sw':\n            newWidth =  Math.max(minWidth,Math.min(my._DragOffset.Width-dx,maxWidth || Infinity))\n              dx = newWidth-my._DragOffset.Width\n            Board.positionDialogAt(\n              Dialog.Name, my._DragOffset.x-dx,my._DragOffset.y\n            )\n            newWidth = my._DragOffset.Width+dx\n            break\n          case 'resize-se':\n            newWidth = Math.max(minWidth,Math.min(my._DragOffset.Width+dx,maxWidth || Infinity))\n        }\n        let newHeight = Math.max(minHeight,Math.min(my._DragOffset.Height+dy,maxHeight || Infinity))\n        Board.sizeDialogTo(Dialog.Name, newWidth,newHeight)\n      }\n\n      let DragRecognizer = my._DragRecognizer\n      if (DragRecognizer == null) {\n        DragRecognizer = my._DragRecognizer = DragRecognizerFor(me, {\n          onlyFrom:       '.Titlebar,.leftResizer,.middleResizer,.rightResizer',\n          neverFrom:      '.CloseButton',\n          Threshold:      4,\n          onDragStarted:  (x:number,y:number, dx:number,dy:number, Event:PointerEvent) => {\n            let ClassList = (Event.target as HTMLElement).classList; my._DragMode = undefined\n            switch (true) {\n              case ClassList.contains('leftResizer'):   my._DragMode = 'resize-sw'; break\n              case ClassList.contains('middleResizer'): my._DragMode = 'resize-s';  break\n              case ClassList.contains('rightResizer'):  my._DragMode = 'resize-se'; break\n              default:                                  my._DragMode = 'drag'\n            }\n\n            my._DragOffset = { ...my._Geometry }\n            handleDrag(x,y, dx,dy)\n          },\n          onDragContinued: handleDrag,\n          onDragFinished:  handleDrag,\n          onDragCancelled: handleDrag,\n        })\n      }\n\n      function onCloseClick (Event:PointerEvent) {\n        Event.stopImmediatePropagation()\n        Event.preventDefault()\n\n        Board.closeDialog(Dialog.Name)\n        if (onClose != null) { onClose(Name) }\n      }\n\n\n\n      const CSSGeometry = (\n        `left:${x}px; top:${y}px; width:${Width}px; height:${Height}px; right:auto; bottom:auto;`\n      )\n\n      let Content\n      try {\n        Content = Renderer()\n      } catch (Signal) {\n        console.error('Dialog rendering failed',Signal)\n        Content = html`<div>(Dialog rendering failed)</div>`\n      }\n\n      return html`<div class=\"PUX ${isResizable ? 'Resizable' : ''}Dialog\" id=${Id} style=\"\n        position:fixed; ${CSSGeometry}\n      \">\n        <div class=\"ContentPane\">${Content}</div>\n\n        <div class=\"Titlebar\"\n          onPointerDown=${DragRecognizer} onPointerUp=${DragRecognizer}\n          onPointerMove=${DragRecognizer} onPointerCancel=${DragRecognizer}\n        >\n          <div class=\"Title\">${Title}</div>\n          <img class=\"CloseButton\" src=\"${PUX._ImageFolder}/xmark.png\"\n            onClick=${onCloseClick}/>\n        </div>\n\n        ${isResizable ? html`\n          <div class=\"leftResizer\"\n            onPointerDown=${DragRecognizer} onPointerUp=${DragRecognizer}\n            onPointerMove=${DragRecognizer} onPointerCancel=${DragRecognizer}\n          />\n          <div class=\"middleResizer\"\n            onPointerDown=${DragRecognizer} onPointerUp=${DragRecognizer}\n            onPointerMove=${DragRecognizer} onPointerCancel=${DragRecognizer}\n          />\n          <div class=\"rightResizer\"\n            onPointerDown=${DragRecognizer} onPointerUp=${DragRecognizer}\n            onPointerMove=${DragRecognizer} onPointerCancel=${DragRecognizer}\n          />\n        `: ''}\n      </>`\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                             SNS_ShapeHandle                              --\n//------------------------------------------------------------------------------\n\n  class SNS_ShapeHandle extends Component {\n    public render (PropSet:Indexable):any {\n      let { Mode, Geometry, onPointerEvent, ...otherProps } = PropSet\n\n      let { x,y, Width,Height } = Geometry\n      const xl = x-8, xm = Math.round(x+Width/2)-4,  xr = x+Width\n      const yt = y-8, ym = Math.round(y+Height/2)-4, yb = y+Height\n\n      let CSSGeometry, Cursor\n      switch (Mode) {\n        case 'nw': CSSGeometry = `left:${xl}px; top:${yt}px;`; Cursor = 'nwse'; break\n        case 'n':  CSSGeometry = `left:${xm}px; top:${yt}px;`; Cursor = 'ns';   break\n        case 'ne': CSSGeometry = `left:${xr}px; top:${yt}px;`; Cursor = 'nesw'; break\n        case 'e':  CSSGeometry = `left:${xr}px; top:${ym}px;`; Cursor = 'ew';   break\n        case 'se': CSSGeometry = `left:${xr}px; top:${yb}px;`; Cursor = 'nwse'; break\n        case 's':  CSSGeometry = `left:${xm}px; top:${yb}px;`; Cursor = 'ns';   break\n        case 'sw': CSSGeometry = `left:${xl}px; top:${yb}px;`; Cursor = 'nesw'; break\n        case 'w':  CSSGeometry = `left:${xl}px; top:${ym}px;`; Cursor = 'ew';   break\n      }\n      Cursor = 'cursor:' + Cursor + '-resize'\n\n      return html`<div class=\"SNS ShapeHandle\" style=\"${CSSGeometry} ${Cursor}\" ...${otherProps}\n        onPointerDown=${onPointerEvent} onPointerMove=${onPointerEvent}\n        onPointerUp=${onPointerEvent} onPointerCancel=${onPointerEvent}\n      />`\n    }\n  }\n\n// @ts-ignore TS2339 allow global variable \"SNS_BoardView\"\n  window.SNS_BoardView = SNS_BoardView\n\n  document.dispatchEvent(\n// @ts-ignore TS2339 allow global variable \"SNS_BoardView\"\n    new CustomEvent('SNS_BoardView',{ detail:window.SNS_BoardView })\n  )\n"],"names":["_excluded","_excluded2","_t","_t2","_t3","_t4","_t5","_t6","_t7","_t8","_t9","_t10","_t11","_t12","_t13","_t14","_t15","_t16","_t17","_t18","_","t","fromDocumentTo","Conversion","Stylesheet","document","createElement","setAttribute","innerHTML","head","appendChild","SNS_BoardView","Component","constructor","args","_Board","_Mode","this","_StickerList","_pointedSticker","_selectedStickers","_SelectionLimit","Infinity","_LassoStart","_LassoEnd","_SelectionBeforeLasso","_ShapeMode","_shapedStickers","_initialGeometries","_SnapToGrid","_GridWidth","_GridHeight","_StickerRecognizerSlot","_ShapeHandleRecognizerSlot","_LassoRecognizerSlot","state","Value","_mountBoard","Board","base","_unmountBoard","undefined","componentDidMount","componentWillUnmount","rerender","Sticker","setState","render","PropSet","my","PUX","Classes","StickerList","Placeholder","Mode","SelectionLimit","selectedStickers","onSelectionChange","onStickerSelected","onStickerDeselected","SelectionFrameStyle","SelectionHandleStyle","LassoMode","onGeometryChange","SnapToGrid","GridWidth","GridHeight","finishDraggingAndShaping","abortDraggingAndShaping","changeGeometriesTo","allowTextline","allowBoard","allowListSatisfying","ValueIsSticker","allowOneOf","allowOrdinal","allowFunction","allowText","allowBoolean","allowCardinal","selectedStickerSet","Set","selectStickers","SelectionA","SelectionB","newSelection","slice","forEach","indexOf","push","length","StickersToSelect","StickersToDeselect","deselectedSticker","selectedSticker","StickerIsSelected","GeometryOfLasso","x","x0","y","y0","x1","y1","Width","Height","dragLassoTo","additiveSelection","LassoX0","LassoY0","LassoWidth","LassoHeight","LassoX1","LassoY1","filter","isVisible","isLocked","isSelectable","Geometry","StickersCaughtByLasso","has","add","LassoRecognizer","DragClickRecognizerFor","onlyFrom","neverFrom","Threshold","onDragStarted","dx","dy","Event","left","top","shiftKey","metaKey","onDragContinued","onDragFinished","onDragCancelled","onClicked","GeometryList","changeGeometriesBy","initialGeometries","dX","dY","dW","dH","map","Math","max","xl","xr","yt","yb","xl_","round","xr_","yt_","yb_","min","onStickerClick","SelectionChanged","shift","StickerRecognizer","ShapeHandleRecognizer","DragRecognizerFor","handleShapeEvent","DragRecognizer","WeakMap","BoardStyle","CSSStyleOfVisual","html","selectable","selected","SNS_StickerView","Id","Recognizer","get","set","builtinDraggingFor","builtinSelectionFor","SNS_Cover","handleStickerEvent","SNS_ShapeHandle","CSSGeometryOfLasso","EdgeSet","CenterSet","ym","horizontalSet","horizontalList","horizontalGuides","xm","verticalSet","verticalList","verticalGuides","DialogList","Dialog","SNS_DialogView","_Sticker","builtinSelection","builtinDragging","allowInteger","CSSGeometry","Rendering","onPointerEvent","otherProps","_objectWithoutPropertiesLoose","DefaultGeometry","Number","MAX_SAFE_INTEGER","super","_DragRecognizer","_Geometry","_DragMode","_DragOffset","Visibility","Name","Title","isResizable","minWidth","maxWidth","minHeight","maxHeight","Renderer","onClose","window","innerWidth","innerHeight","handleDrag","moveDialog","resizeDialog","bringDialogToFront","positionDialogAt","newWidth","newHeight","sizeDialogTo","ClassList","target","classList","contains","_extends","Content","Signal","console","error","_ImageFolder","stopImmediatePropagation","preventDefault","closeDialog","Cursor","dispatchEvent","CustomEvent","detail"],"mappings":"wzBAME,MAAAA,EAAA,CAAA,UAAA,kBAAAC,EAAA,CAAA,OAAA,WAAA,kBAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAA,EAiBA,MAAMC,eAAEA,GAAmBC,EASrBC,EAAaC,SAASC,cAAc,SACxCF,EAAWG,aAAa,KAAK,kBAC7BH,EAAWI,UAAY,60HAyHzBH,SAASI,KAAKC,YAAYN,SAsBbO,UAAsBC,EAASC,WAAAA,IAAAC,GAAAA,SAAAA,GAClCC,KAAAA,mBACAC,MAA0B,UAASC,KAEnCC,aAA6B,GAC7BC,KAAAA,qBACAC,EAAAA,KAAAA,kBAAkC,QAClCC,gBAAyBC,SAAQL,KAEjCM,iBAAW,EAAAN,KACXO,eACAC,EAAAA,KAAAA,sBAAsC,GAEtCC,KAAAA,uBACAC,qBAAe,EAAAV,KACfW,wBAAkB,EAAAX,KAElBY,aAAsB,EACtBC,KAAAA,WAAsB,EACtBC,KAAAA,YAAsB,EAACd,KAEvBe,uBAAyB,QACzBC,2BAA6B,CAAA,EAC7BC,KAAAA,qBAAuB,CAAE,EAE1BC,KAAAA,MAAkB,CAAEC,MAAM,EAAG,CAI5BC,WAAAA,CAAaC,GACL,MAATA,GAA+C,MAA3BrB,KAAmBsB,OAC1CD,EAAa,MAAKrB,KAAmBsB,KACZ,MAArBD,EAAgB,UAClBA,EAAgB,YAGpBrB,KAAKF,OAASuB,CAChB,CAIQE,aAAAA,GACN,MAAMF,EAAQrB,KAAKF,OACN,MAATuB,IACFA,EAAa,WAAIG,EACU,MAAvBH,EAAkB,YACpBA,EAAkB,aAGxB,CAIOI,iBAAAA,GAA+BzB,KAAKoB,YAAYpB,KAAKF,OAAQ,CAC7D4B,oBAAAA,GAA+B1B,KAAKuB,eAAgB,CAIpDI,QAAAA,CAAUC,GAEd5B,KAAmB6B,SAAS,CAAEV,MAAOnB,KAAmBkB,MAAMC,MAAQ,GACzE,CAIOW,MAAAA,CAAQC,GACb,MAAMC,EAAKhC,KAEX,IAAIiC,IACFA,EAAGC,QACHA,EAAOb,MAAEA,EAAKc,YAAEA,EAAWC,YAAEA,EAAWC,KAAEA,EAAIC,eAC9CA,EAAcC,iBAAEA,EAAgBC,kBAChCA,EAAiBC,kBAAEA,EAAiBC,oBAAEA,EAAmBC,oBACzDA,EAAmBC,qBAAEA,EAAoBC,UACzCA,EAASC,iBAAEA,EAAgBC,WAC3BA,EAAUC,UAAEA,EAASC,WAAEA,GACrBlB,EASJ,SAASmB,IACPlB,EAAG9B,qBAAqBsB,EACxBQ,EAAGtB,qBAAqBc,EACxBQ,EAAGrB,wBAAqBa,CAC1B,CAIA,SAAS2B,IACmB,MAAtBnB,EAAGtB,iBACL0C,GAAmBpB,EAAGtB,gBAAgBsB,EAAGrB,oBAE3CuC,GACF,CApBIlD,KAAKF,SAAWuB,IAClBrB,KAAKuB,gBACLvB,KAAKoB,YAAYC,IAsBnBgC,EAAoB,wBAAwBnB,GAC5CoB,EAAoC,QAAQjC,GAC5CkC,EAA6B,eAAepB,EAAaqB,GACzDH,EAAyB,mBAAmBjB,GAC5CqB,EAA+B,aAAapB,EAAM,CAAC,OAAO,QAC1DqB,EAA0B,kBAAkBpB,GAC5CiB,EAAoB,4BAA4BhB,EAAkBiB,GAClEG,EAAgB,4BAA4BnB,GAC5CmB,EAAuB,qBAAqBlB,GAC5CkB,EAAqB,uBAAuBjB,GAC5CW,EAAgB,4BAA4BV,GAC5CiB,EAAe,6BAA6BhB,GAC5Ca,EAAqB,uBAAuBZ,EAAW,CAAC,QAAQ,YAChEc,EAAiB,2BAA2Bb,GAC5Ce,EAAwB,oBAAoBd,GAC5Ce,EAA+B,aAAad,GAC5Cc,EAA8B,cAAcb,GAIhB,MAAxBf,IAAgCA,EAAwB,IAChC,MAAxBE,IAAgCA,EAAwB,WAChC,MAAxBC,IAAgCA,EAAwB,OAChC,MAAxBC,IAAgCA,EAAwBjC,UAChC,MAAxBkC,IAAgCA,EAAwB,IAEhC,MAAxBK,IAAgCA,EAAwB,mDAChC,MAAxBC,IAAgCA,EAAwB,WAChC,MAAxBE,IAAgCA,GAAwB,GAChC,MAAxBC,IAAgCA,EAAwB,IAChC,MAAxBC,IAAgCA,EAAwB,IAI5D,MAAMc,GAAsC,IAAIC,IA6BhD,SAASC,GACPC,EAA0BC,EAA2B,IAErD,MAAMC,EAA6BF,EAAWG,QAC9CF,EAAWG,QAAS1C,IACdwC,EAAaG,QAAQ3C,GAAW,GAAKwC,EAAaI,KAAK5C,EAAS,GAGlEW,EAAiBkC,OAASzC,EAAG5B,kBAC/BgE,EAAaK,OAASzC,EAAG5B,iBAG3B,MAAMsE,EAAmC,GACnCC,EAAmC,GACvCP,EAAaE,QAAS1C,IAChBI,EAAG7B,kBAAkBoE,QAAQ3C,GAAW,GAC1C8C,EAAiBF,KAAK5C,EACxB,GAGFI,EAAG7B,kBAAkBmE,QAAS1C,IACxBwC,EAAaG,QAAQ3C,GAAW,GAClC+C,EAAmBH,KAAK5C,EAC1B,GAEJW,EAAmBP,EAAG7B,kBAAoBiE,GAErCM,EAAiBD,OAAS,GAAOE,EAAmBF,OAAS,KAChEtB,IAEyB,MAArBX,GACFA,EAAkBD,IAIjBoC,EAAmBF,OAAS,GAA8B,MAAvB/B,GACtCiC,EAAmBL,QAASM,IAC1BlC,EAAoBkC,EACtB,GAGGF,EAAiBD,OAAS,GAA4B,MAArBhC,GACpCiC,EAAiBJ,QAASO,IACxBpC,EAAkBoC,EACpB,EAEJ,CAEA,SAASC,GAAmBlD,GAC1B,OAAQI,EAAG7B,kBAAkBoE,QAAQ3C,IAAY,CACnD,CAIA,SAASmD,KACP,MAAQC,EAAEC,EAAGC,EAAEC,GAAOnD,EAAG1B,aACjB0E,EAAEI,EAAGF,EAAEG,GAAOrD,EAAGzB,WAAayB,EAAG1B,YAKzC,MAAO,CAAE0E,EAHKC,GAAMG,EAAKH,EAAKG,EAGZF,EAFJC,GAAME,EAAKF,EAAKE,EAEFC,MAH0BL,GAAMG,EAAKA,EAAGH,EAAKA,EAAGG,EAG/BG,OAFSJ,GAAME,EAAKA,EAAGF,EAAKA,EAAGE,EAG9E,CAuCA,SAASG,GACPR,EAAeE,EAAgBO,GAE/BzD,EAAGzB,UAAY,CAAEyE,IAAEE,KACnBjB,GACEwB,EAAoBzD,EAAGxB,sBAAwB,GArCnD,WACE,IAAMwE,EAAEU,EAAQR,EAAES,EAASL,MAAMM,EAAWL,OAAOM,GAAgBd,KAC/De,EAAUJ,EAAQE,EAClBG,EAAUJ,EAAQE,EAEtB,OACS7D,EAAG/B,aAAa+F,OADP,UAAdnD,EAC6BjB,IAC7B,IAAMA,EAAQqE,WAAarE,EAAQsE,SAAY,SAE/C,GAAkB,QAAblE,EAAGjC,QAAsB6B,EAAQuE,aAAgB,OAAO,EAE7D,MAAMnB,EAAEA,EAACE,EAACA,EAACI,MAAEA,EAAKC,OAACA,GAAW3D,EAAQwE,SACtC,OACGV,GAAWV,EAAEM,GAAYN,GAAKc,GAC9BH,GAAWT,EAAEK,GAAYL,GAAKa,GAIJnE,IAC7B,IAAMA,EAAQqE,WAAarE,EAAQsE,SAAY,OAAa,EAE5D,GAAkB,QAAblE,EAAGjC,QAAsB6B,EAAQuE,aAAgB,SAEtD,MAAMnB,EAAEA,EAACE,EAACA,EAACI,MAAEA,EAAKC,OAACA,GAAW3D,EAAQwE,SACtC,OACGV,GAAWV,GAAOA,EAAEM,GAAUQ,GAC9BH,GAAWT,GAAOA,EAAEK,GAAUQ,GAIvC,CAOuDM,GAEvD,CAxIE9D,EAAmBA,EAAiByD,OAAQnB,GAExCrB,EAAeqB,KACbd,GAAmBuC,IAAIzB,IAEzBd,GAAmBwC,IAAI1B,IAEzB,IACE1B,SAIFZ,EAAiBkC,OAASnC,GAC5B2B,GAAe1B,EAAiB8B,MAAM,EAAE/B,IAG3CN,EAAGjC,MAAQsC,EAEVL,EAAG/B,aAAoBkC,EACvBH,EAAG7B,kBAAoBoC,EACvBP,EAAG5B,gBAAoBkC,EAEvBN,EAAGpB,YAAcmC,EACjBf,EAAGnB,WAAcmC,EACjBhB,EAAGlB,YAAcmC,EAmIjB,MAAMuD,GAAkBC,EAAuBzE,EAAGf,qBAAsB,CACtEyF,SAAc,6CACdC,UAAc,oDACdC,UAAc,EACdC,cAAcA,CAAC7B,EAASE,EAAU4B,EAAUC,EAAWC,KACrDhF,EAAGxB,sBAAwBwB,EAAG7B,kBAAkBkE,UAG5C4C,KAAKjC,EAAEkC,IAAIhC,GAAMjG,EAAe,QAAQ,CAAEgI,KAAKjC,EAAEkC,IAAIhC,GAAKlD,EAAiBV,OAE/EU,EAAG1B,YAAc,CAAE0E,IAAEE,KACrBM,GAAYR,EAAEE,EAAG8B,EAAMG,UAAYH,EAAMI,SACzCpF,EAAGL,UAAQ,EAEb0F,gBAAgBA,CAACrC,EAASE,EAAU4B,EAAUC,EAAWC,KACvDxB,GAEExD,EAAG1B,YAAY0E,EAAE8B,EAAG9E,EAAG1B,YAAY4E,EAAE6B,EACrCC,EAAMG,UAAYH,EAAMI,SAE1BpF,EAAGL,UACL,EACA2F,eAAgBA,CAACtC,EAASE,EAAU4B,EAAUC,EAAWC,KACvDxB,GAEExD,EAAG1B,YAAY0E,EAAE8B,EAAG9E,EAAG1B,YAAY4E,EAAE6B,EACrCC,EAAMG,UAAYH,EAAMI,SA1C5BpF,EAAG1B,YAAc0B,EAAGzB,eAAYiB,EAChCQ,EAAGxB,sBAAwB,GA4CzBwB,EAAGL,UAAQ,EAEb4F,gBAAgBA,CAACvC,EAASE,EAAU4B,EAAUC,KA1C9C/E,EAAG1B,YAAc0B,EAAGzB,eAAYiB,EAChCyC,GAAejC,EAAGxB,uBAClBwB,EAAGxB,sBAAwB,GA0CzBwB,EAAGL,UAAQ,EAEb6F,UAvCF,WACEvD,GAAe,GACjB,IA0CA,SAASb,GACPjB,EAA2BsF,GAEH,MAApB3E,IACFA,EAAiBX,EAAYsF,GAC7BzF,EAAGL,WAEP,CAEA,SAAS+F,GACPvF,EAA2BE,EAAayE,EAAUC,EAClDY,GAEA,GAAwB,MAApB7E,EAA4B,OAEhC,IAAI8E,EAAY,EAAGC,EAAY,EAAGC,EAAY,EAAGC,EAAY,EAC7D,OAAQ1F,GACN,IAAK,KAAMuF,EAAKd,EAAIgB,GAAMhB,EAAIe,EAAKd,EAAIgB,GAAMhB,EAAI,MACjD,IAAK,IAAyBc,EAAKd,EAAIgB,GAAMhB,EAAI,MACjD,IAAK,KAAee,EAAKhB,EAAKe,EAAKd,EAAIgB,GAAMhB,EAAI,MACjD,IAAK,IAAee,EAAKhB,EAAwB,MACjD,IAAK,KAAegB,EAAKhB,EAAciB,EAAKhB,EAAK,MACjD,IAAK,IAAkCgB,EAAKhB,EAAK,MACjD,IAAK,KAAMa,EAAKd,EAAIgB,GAAMhB,EAAaiB,EAAKhB,EAAK,MACjD,IAAK,IAAMa,EAAKd,EAAIgB,GAAMhB,EAAuB,MACjD,IAAK,IAAMc,EAAKd,EAAce,EAAKd,EAGZ,MAArBY,IACFA,EAAoB3F,EAAGrB,oBAiCzByC,GAAmBjB,EA9BEwF,EAAkBK,IACpC5B,IACC,IAAId,EAAgB2C,KAAKC,IAAI,EAAE9B,EAASd,MAAMwC,GAC1CvC,EAAgB0C,KAAKC,IAAI,EAAE9B,EAASb,OAAOwC,GAE3CI,EAAY/B,EAASpB,EAAE4C,EAAIQ,EAAKD,EAAK7C,EACrC+C,EAAYjC,EAASlB,EAAE2C,EAAIS,EAAKD,EAAK9C,EAEzC,GAAIvD,EAAGpB,YAAa,CAClB,IAAI2H,EAAMvG,EAAGnB,WAAWoH,KAAKO,MAAML,EAAGnG,EAAGnB,YACrC4H,EAAMzG,EAAGnB,WAAWoH,KAAKO,MAAMJ,EAAGpG,EAAGnB,YACrC6H,EAAM1G,EAAGlB,YAAYmH,KAAKO,MAAMH,EAAGrG,EAAGlB,aACtC6H,EAAM3G,EAAGlB,YAAYmH,KAAKO,MAAMF,EAAGtG,EAAGlB,aAE1C,OAAQuB,GACN,IAAK,KAAM8F,EAAKF,KAAKW,IAAIL,EAAIH,GAAKC,EAAKJ,KAAKW,IAAIF,EAAIJ,GAAK,MACzD,IAAK,IAA6BD,EAAKJ,KAAKW,IAAIF,EAAIJ,GAAK,MACzD,IAAK,KAAMF,EAAKH,KAAKC,IAAIC,EAAGM,GAAMJ,EAAKJ,KAAKW,IAAIF,EAAIJ,GAAK,MACzD,IAAK,IAAMF,EAAKH,KAAKC,IAAIC,EAAGM,GAA6B,MACzD,IAAK,KAAML,EAAKH,KAAKC,IAAIC,EAAGM,GAAMH,EAAKL,KAAKC,IAAIG,EAAGM,GAAM,MACzD,IAAK,IAA6BL,EAAKL,KAAKC,IAAIG,EAAGM,GAAM,MACzD,IAAK,KAAMR,EAAKF,KAAKW,IAAIL,EAAIH,GAAKE,EAAKL,KAAKC,IAAIG,EAAGM,GAAM,MACzD,IAAK,IAAMR,EAAKF,KAAKW,IAAIL,EAAIH,GAA4B,MACzD,IAAK,IAAMD,EAAKI,EAAKH,EAAKD,EAAG7C,EAAO+C,EAAKK,EAAKJ,EAAKD,EAAG9C,EAE1D,CACA,MAAO,CAAEP,EAAEmD,EAAGjD,EAAEmD,EAAI/C,MAAM8C,EAAGD,EAAG5C,OAAO+C,EAAGD,EAAE,GAKlD,CAIA,MAAMQ,GAAiBA,CAAC7D,EAASE,EAAU8B,KACzC,GAAuB,IAAnB1E,EAAwB,OAE5B,MAAMV,EAAUI,EAAG9B,gBAEnB,IACIwE,EAAgCC,EADhCmE,GAA2B,EAE3B9B,EAAMG,UAAYH,EAAMI,SAC1B0B,GAAmB,EACfhE,GAAkBlD,IACpB+C,EAAqB,CAAC/C,GACtBW,EAAqBA,EAAiByD,OACnCnB,GAAiCA,IAAoBjD,KAGpDW,EAAiBkC,SAAWnC,IAC9BqC,EAAqB,CAACpC,EAAiBwG,UAEzCrE,EAAmB,CAAC9C,GACpBW,EAAiBiC,KAAK5C,MAGxB+C,EAAqBpC,EAAiByD,OACnCnB,GAAiCA,IAAoBjD,GAExDkH,GAAqBhE,GAAkBlD,GACvC8C,EAAqBoE,EAAmB,CAAClH,GAAW,GACpDW,EAAoB,CAACX,IAGnBkH,GAA0C,MAArBtG,GACvBA,EAAkBD,GAIO,MAAtBoC,GAAuD,MAAvBjC,GACnCiC,EAAmBL,QAASM,IAC1BlC,EAAoBkC,EACtB,GAIuB,MAApBF,GAAmD,MAArBjC,GACjCiC,EAAiBJ,QAASO,IACxBpC,EAAkBoC,KAIlBiE,GAAoB9G,EAAGL,UAAW,EAKlCqH,GAAoBvC,EAAuBzE,EAAGjB,uBAAwB,CAC1E2F,SAAc,aACdE,UAAc,EACdC,cAAcA,CAAC7B,EAASE,EAAU4B,EAAUC,EAAWC,KAC/ClC,GAAkB9C,EAAG9B,mBACrB8G,EAAMG,UAAYH,EAAMI,QAC1BnD,GAAe,CAACjC,EAAG9B,iBAAgC8B,EAAG7B,mBAEtD8D,GAAe,CAACjC,EAAG9B,mBAIvB8B,EAAGtB,gBAAqBsB,EAAG7B,kBAC3B6B,EAAGrB,mBAAqBqB,EAAG7B,kBAAkB6H,IAC1CpG,GAAwBA,EAAQwE,UAEnCsB,GAAmB1F,EAAGtB,gBAAgB,IAAKoG,EAAGC,EAChD,EACAM,gBAAgBA,CAACrC,EAASE,EAAU4B,EAAUC,KAClB,MAAtB/E,EAAGtB,iBACPgH,GAAmB1F,EAAGtB,gBAAgB,IAAKoG,EAAGC,EAAE,EAElDO,eAAgBA,CAACtC,EAASE,EAAU4B,EAAUC,KAClB,MAAtB/E,EAAGtB,kBAEPgH,GAAmB1F,EAAGtB,gBAAgB,IAAKoG,EAAGC,GAC9C7D,IACF,EACAqE,gBAAgBA,CAACvC,EAASE,EAAU4B,EAAUC,KAC5C5D,GAAuB,EAEzBqE,UAAUqB,KAaNI,GAAwBC,EAAkBlH,EAAGhB,2BAA4B,CAC7E0F,SAAc,mBACdE,UAAc,EACdC,cAAcA,CAAC7B,EAASE,EAAU4B,EAAUC,KAC1C/E,EAAGtB,gBAAqBsB,EAAG7B,kBAC3B6B,EAAGrB,mBAAqBqB,EAAG7B,kBAAkB6H,IAC1CpG,GAAwBA,EAAQwE,UAEnCsB,GAAmB1F,EAAGtB,gBAAiBsB,EAAGvB,WAAsBqG,EAAGC,EAAE,EAEvEM,gBAAgBA,CAACrC,EAASE,EAAU4B,EAAUC,KAClB,MAAtB/E,EAAGtB,iBACPgH,GAAmB1F,EAAGtB,gBAAiBsB,EAAGvB,WAAsBqG,EAAGC,EAAE,EAEvEO,eAAgBA,CAACtC,EAASE,EAAU4B,EAAUC,KAClB,MAAtB/E,EAAGtB,kBAEPgH,GAAmB1F,EAAGtB,gBAAiBsB,EAAGvB,WAAsBqG,EAAGC,GACnE7D,IACF,EACAqE,gBAAgBA,CAACvC,EAASE,EAAU4B,EAAUC,KAC5C5D,OAIJ,SAASgG,GAAkBnC,EAAoB3E,GAC7CL,EAAGvB,WAAa4B,EAChB4G,GAAsBjC,EACxB,CAaA,MAAMoC,GAA+C,IAAIC,QAoInDC,GAAuB,MAATjI,OAAgBG,EAAY+H,EAAiBlI,GAEjE,OAAOmI,EAAIvL,IAAAA,EAAAc,CAAA,6BAAA,YAAA;wBAAA,mBAAA;sBAAA,qBAAA;;UAAA;;UAAA;;UAAA;UAAA;UAAA;UAAA;UAAA;eAA6BmD,EAAkBoH,GACxC9C,GAAiCA,GACnCA,GAAmCA,GAEtC,MAATnF,EACEmI,EAAItL,IAAAA,EAAAa,CAAA,qEACW,MAAfoD,EACEqH,EAAIrL,IAAAA,EAAAY,CAAA,wEACJoD,EAAY6F,IAAKpG,IACf,IAAMA,EAAQqE,UAAa,MAAO,GAElC,MAAMG,EAAaxE,EAAQwE,SAErBqD,EAAa7H,EAAQuE,aACrBuD,EAAa5E,GAAkBlD,GAErC,OAAO4H,EAAIpL,IAAAA,EAAAW,CAAA,IAAA,aAAA,SAAA;6BAAA;wCAAA;6BAAA;+BAAA;oCAAA;qCAAA;qBAAI4K,EAA2B/H,EAAeA,EAAQgI,GACpDF,GAAsB,QAATrH,EACFM,EACXyD,EACEqD,EACKA,GAzJ9B,SAA6B7H,GAC3B,IAAIiI,EAAaT,GAAeU,IAAIlI,GAyCpC,OAxCkB,MAAdiI,GACFT,GAAeW,IAAInI,EAASiI,EAAapD,EAAuB7E,EAAS,CACvE8E,SAAc,oBACdC,UAAc,uBACdC,UAAc,EACdC,cAAcA,CAAC7B,EAASE,EAAU4B,EAAUC,EAAWC,KACrDhF,EAAG9B,gBAAkB0B,EACfkD,GAAkB9C,EAAG9B,mBACrB8G,EAAMG,UAAYH,EAAMI,QAC1BnD,GAAe,CAACjC,EAAG9B,iBAAgC8B,EAAG7B,mBAEtD8D,GAAe,CAACjC,EAAG9B,mBAIvB8B,EAAGtB,gBAAqBsB,EAAG7B,kBAC3B6B,EAAGrB,mBAAqBqB,EAAG7B,kBAAkB6H,IAC1CpG,GAAwBA,EAAQwE,UAEnCsB,GAAmB1F,EAAGtB,gBAAgB,IAAKoG,EAAGC,EAAE,EAElDM,gBAAgBA,CAACrC,EAASE,EAAU4B,EAAUC,KAClB,MAAtB/E,EAAGtB,iBACPgH,GAAmB1F,EAAGtB,gBAAgB,IAAKoG,EAAGC,EAAE,EAElDO,eAAgBA,CAACtC,EAASE,EAAU4B,EAAUC,KAClB,MAAtB/E,EAAGtB,kBAEPgH,GAAmB1F,EAAGtB,gBAAgB,IAAKoG,EAAGC,GAC9C7D,IACF,EACAqE,gBAAgBA,CAACvC,EAASE,EAAU4B,EAAUC,KAC5C5D,GAAuB,EAEzBqE,UAAUA,CAACxC,EAASE,EAAU8B,KAC5BhF,EAAG9B,gBAAkB0B,EACrBiH,GAAe,EAAE,EAAG7B,EAAK,KAIxB6C,CACT,CA8G4CG,CAAmBpI,GAChC6H,GArK/B,SAA8B7H,GAC5B,OAAO,SAAUoF,GACfhF,EAAG9B,gBAAkB0B,EACrBiH,GAAe,EAAE,EAAG7B,EACtB,CACF,CAgK4CiD,CAAoBrI,GAAQ,GAKpD,MAAfO,GAAkC,SAATE,EACxBF,EAAY6F,IAAKpG,IACf,IAAMA,EAAQqE,UAAa,MAAO,GAElC,MAAMyD,EAAW5E,GAAkBlD,GAEnC,OAAO4H,EAAInL,IAAAA,EAAAU,CAAA;mBAAA,aAAA,SAAA;6BAAA;mCAAA;;iBACNmL,EAAqBtI,EAAeA,EAAQgI,GAAG,IACrCF,EACO1C,GA3N9B,SAA6BA,EAAoBpF,GAC/CI,EAAGvB,WAAkB,IACrBuB,EAAG9B,gBAAkB0B,EACrBoH,GAAkBhC,EACpB,CAuNqDmD,CAAmBnD,EAAMpF,GAAQ,GAIhF,GAGDW,EAAiBkC,OAAS,EACzBlC,EAAiByD,OACdpE,GAAwBA,EAAQqE,WACjC+B,IAAKpG,IACL,MAAMgI,EAAWhI,EAAQgI,GACnBxD,EAAWxE,EAAQwE,SACzB,OAAOoD,EAAIlL,IAAAA,EAAAS,CAAA;mBAAA,SAAA,wBAAA;mCAAA;mBAAA,SAAA,yBAAA;mCAAA;mBAAA,SAAA,wBAAA;mCAAA;mBAAA,SAAA,yBAAA;mCAAA;mBAAA,SAAA,wBAAA;mCAAA;mBAAA,SAAA,yBAAA;mCAAA;mBAAA,SAAA,wBAAA;mCAAA;mBAAA,SAAA,yBAAA;mCAAA;iBACNqL,EAAuBR,EAAG,KAA2BxD,EACpCY,GAAuBmC,GAAiBnC,EAAM,MAC/DoD,EAAuBR,EAAG,IAA2BxD,EACpCY,GAAuBmC,GAAiBnC,EAAM,KAC/DoD,EAAuBR,EAAG,KAA2BxD,EACpCY,GAAuBmC,GAAiBnC,EAAM,MAC/DoD,EAAuBR,EAAG,IAA2BxD,EACpCY,GAAuBmC,GAAiBnC,EAAM,KAC/DoD,EAAuBR,EAAG,KAA2BxD,EACpCY,GAAuBmC,GAAiBnC,EAAM,MAC/DoD,EAAuBR,EAAG,IAA2BxD,EACpCY,GAAuBmC,GAAiBnC,EAAM,KAC/DoD,EAAuBR,EAAG,KAA2BxD,EACpCY,GAAuBmC,GAAiBnC,EAAM,MAC/DoD,EAAuBR,EAAG,IAA2BxD,EACpCY,GAAuBmC,GAAiBnC,EAAM,KAAI,GAG1E,GAEkB,MAApBhH,KAAKM,YACH,GACAkJ,EAAIjL,IAAAA,EAAAQ,CAAA,gCAAA,SAlgBV,WACE,MAAMiG,EAAEA,EAACE,EAACA,EAACI,MAAEA,EAAKC,OAACA,GAAWR,KAC9B,MAAO,QAAQC,YAAYE,cAAcI,eAAmBC,KAC9D,CA+f0C8E,IA7J1C,WACE,GAA0B,MAAtBrI,EAAGtB,gBAA2B,MAAO,GAEzC,MAAM4J,EAAsB,GACtBC,EAAsB,CAAA,EAC5BvI,EAAG/B,aAAa+F,OACbpE,IAA0BkD,GAAkBlD,IAC7C0C,QAAS1C,IACT,MAAMsD,EAAEA,EAACK,OAACA,GAAW3D,EAAQwE,SACrBiC,EAAKJ,KAAKO,MAAMtD,GAChBsF,EAAKvC,KAAKO,MAAMtD,EAAEK,EAAO,GACzB+C,EAAKL,KAAKO,MAAMtD,EAAEK,GAC1B+E,EAAQjC,GAAMiC,EAAQhC,IAAM,EAC5BiC,EAAUC,IAAM,CAAA,GAGlB,MAAMC,EAA0B,CAAA,EAChCzI,EAAGtB,gBAAgB4D,QAAS1C,IAC1B,MAAMsD,EAAEA,EAACK,OAACA,GAAW3D,EAAQwE,SACrBiC,EAAKJ,KAAKO,MAAMtD,GAChBsF,EAAKvC,KAAKO,MAAMtD,EAAEK,EAAO,GACzB+C,EAAKL,KAAKO,MAAMtD,EAAEK,GACtB+E,EAAQjC,KAA2CoC,EAAcpC,GAAM,QACvEiC,EAAQE,IAAgC,SAAtBC,EAAcD,KAAmBC,EAAcD,GAAM,UACvEF,EAAQhC,KAA2CmC,EAAcnC,GAAM,QACvEiC,EAAUlC,IAA8B,SAAtBoC,EAAcpC,KAAmBoC,EAAcpC,GAAM,UACvEkC,EAAUC,IAA8B,SAAtBC,EAAcD,KAAmBC,EAAcD,GAAM,UACvED,EAAUjC,IAA8B,SAAtBmC,EAAcnC,KAAmBmC,EAAcnC,GAAM,SAAS,GAGtF,MAAMoC,EAA0B,GAC9B,IAAK,IAAIxF,KAAKuF,EACY,MAApBA,EAAcvF,IAAcwF,EAAelG,KAAKU,GAGxD,OAAOsE,EAAI3L,IAAAA,EAAAkB,CAAA,GAAA,KAAG2L,EAAe1C,IAAK9C,GAAasE,EAAI1L,IAAAA,EAAAiB,CAAA;4CAAA,iBAAA;WACf0L,EAAcvF,GAAkBA,IAEtE,CAyHIyF,GArHJ,WACE,GAA0B,MAAtB3I,EAAGtB,gBAA2B,MAAO,GAEzC,MAAM4J,EAAsB,GACtBC,EAAsB,CAAA,EAC5BvI,EAAG/B,aAAa+F,OACbpE,IAA0BkD,GAAkBlD,IAC7C0C,QAAS1C,IACT,MAAMoD,EAAEA,EAACM,MAACA,GAAU1D,EAAQwE,SACpB+B,EAAKF,KAAKO,MAAMxD,GAChB4F,EAAK3C,KAAKO,MAAMxD,EAAEM,EAAM,GACxB8C,EAAKH,KAAKO,MAAMxD,EAAEM,GAC1BgF,EAAQnC,GAAMmC,EAAQlC,IAAM,EAC5BmC,EAAUK,IAAM,CAClB,GAEA,MAAMC,EAAwB,CAAA,EAC9B7I,EAAGtB,gBAAgB4D,QAAS1C,IAC1B,MAAMoD,EAAEA,EAACM,MAACA,GAAU1D,EAAQwE,SACpB+B,EAAKF,KAAKO,MAAMxD,GAChB4F,EAAK3C,KAAKO,MAAMxD,EAAEM,EAAM,GACxB8C,EAAKH,KAAKO,MAAMxD,EAAEM,GACtBgF,EAAQnC,KAAyC0C,EAAY1C,GAAM,QACnEmC,EAAQM,IAA8B,SAApBC,EAAYD,KAAmBC,EAAYD,GAAM,UACnEN,EAAQlC,KAAyCyC,EAAYzC,GAAM,QACnEmC,EAAUpC,IAA4B,SAApB0C,EAAY1C,KAAmB0C,EAAY1C,GAAM,UACnEoC,EAAUK,IAA4B,SAApBC,EAAYD,KAAmBC,EAAYD,GAAM,UACnEL,EAAUnC,IAA4B,SAApByC,EAAYzC,KAAmByC,EAAYzC,GAAM,SAAS,GAGlF,MAAM0C,EAAwB,GAC5B,IAAK,IAAI9F,KAAK6F,EACU,MAAlBA,EAAY7F,IAAc8F,EAAatG,KAAKQ,GAEpD,OAAOwE,EAAIzL,IAAAA,EAAAgB,CAAA,QAAG+L,EAAa9C,IAAKhD,GAAawE,EAAIxL,IAAAA,EAAAe,CAAA;0CAAA,kBAAA;WACf8L,EAAY7F,GAAmBA,IAEnE,CAiFI+F,GACS,MAAT1J,EACE,GACAA,EAAM2J,WAAWhD,IAAKiD,GACpBzB,EAAIhL,IAAAA,EAAAO,CAAA,IAAImM,SAAAA,SAAAA,WAAAA,YAAAA,OAAAA,EAAsBD,EAAOrB,GAAU3H,EAAaZ,EAAgB4J,IAItF,EAOF,MAAMtB,UAAwBhK,EAASC,WAAAA,IAAAC,YAAAA,GAAAG,KAC7BmL,cAID1J,CAAAA,CAAAA,iBAAAA,GACL,MAAMG,EAAU5B,KAAKmL,SAErBvJ,EAAe,MAAK5B,KAAmBsB,KACZ,MAAvBM,EAAkB,UACpBA,EAAkB,UAEtB,CAIOF,oBAAAA,GACL,MAAME,EAAU5B,KAAKmL,SAErBvJ,EAAe,WAAIJ,EACU,MAAzBI,EAAoB,YACtBA,EAAoB,YAExB,CAIOE,MAAAA,CAAQC,GACb,IAAIH,QACFA,EAAO6H,WAAEA,EAAUC,SAAEA,EAAQ/G,oBAAEA,EAAmByD,SAClDA,EAAQgF,iBAAEA,EAAgBC,gBAAEA,GAC1BtJ,EAEJ/B,KAAKmL,SAAWvJ,EAEhB,IAAIoD,EAAEA,EAACE,EAACA,EAACI,MAAEA,EAAKC,OAACA,GAAWa,EAC1BkF,EAAa,qBAAqBtG,GAClCsG,EAAa,qBAAqBpG,GAClCxB,EAAkB,gBAAgB4B,GAClC5B,EAAiB,iBAAiB6B,GACpC,MAAMgG,EACE,MAALvG,GAAwB,MAATM,GAAwB,MAALJ,GAAyB,MAAVK,EAChD,QAAQP,YAAYE,cAAcI,eAAmBC,gCACrD,GAGJ,OAAOiE,EAAI/K,IAAAA,EAAAM,CAAA;sBAAA,KAAA;;UAAA;UAAA;UAAA;;UAAA;eACK0K,EAAa,aAAe,GAAMC,EAAW,WAAa,GAEtE6B,EACA7B,GAAoC,MAAvB/G,EAA+B,WAAWA,KAAyB,GAChF4G,EAAiB3H,IAAY,GAE7B6H,EACE7H,EAAQ4J,UAAU,CAAEJ,mBAAiBC,oBACrCzJ,EAAQ4J,YAGhB,EAKF,MAAMtB,UAAkBvK,EACfmC,MAAAA,CAAQC,GACb,IAAIH,QAAEA,EAAO6J,eAAEA,GAAkC1J,EAAf2J,EAAUC,EAAK5J,EAAOpE,IAEpDqH,EAAEA,EAACE,EAACA,EAACI,MAAEA,EAAKC,OAACA,GAAW3D,EAAQwE,SAEpC,MAAMmF,EACE,MAALvG,GAAwB,MAATM,GAAwB,MAALJ,GAAyB,MAAVK,EAChD,QAAQP,YAAYE,cAAcI,eAAmBC,gCACrD,GAGJ,OAAOiE,EAAI9K,IAAAA,EAAAK,CAAA;UAAA,KAAA;aAAA;wBAAA,mBAAA;sBAAA,qBAAA;WACPwM,EAAe3J,EAAQsE,SAAW,sBAAwB,GACvDwF,EACWD,EAAgCA,EAClCA,EAAkCA,EAEpD,EAOF,MAAMG,EAA+B,CACnC5G,GAAG6G,OAAOC,iBAAkBxG,MAAM,IAClCJ,GAAG2G,OAAOC,iBAAkBvG,OAAO,KAGrC,MAAM2F,UAAuBvL,EAASC,WAAAA,IAAAC,GAAAkM,SAAAlM,GAAAG,KAC5BgM,qBAAqCxK,EACrCyK,KAAAA,UAAyBL,OACzBM,eAAS,EAAAlM,KACTmM,YAA2BP,EAAe5L,KAE3CkB,MAAkB,CAAEC,MAAM,EAAG,CAE7BQ,QAAAA,GACJ3B,KAAmB6B,SAAS,CAAEV,MAAMnB,KAAKkB,MAAMC,MAAM,GACxD,CAEOW,MAAAA,CAAQC,GACb,MAAME,IAAEA,EAAGZ,MAAEA,EAAK4J,OAAEA,GAAWlJ,EAC/B,GAAyB,GAArBkJ,EAAOmB,WAAuB,MAAO,GAEzC,IAAIxC,GACFA,EAAEyC,KAAEA,EAAIC,MAAEA,EAAKC,YAAEA,EAAWvH,EAAEA,EAACE,EAAEA,EAACI,MAAEA,EAAKC,OAAEA,EAAMiH,SACjDA,EAAQC,SAAEA,EAAQC,UAAEA,EAASC,UAAEA,EAASC,SACxCA,EAAQC,QAAEA,GACR5B,EAEJ3F,EAAQ2C,KAAKC,IAAIsE,EAASlH,GACV,MAAZmH,IAAoBnH,EAAQ2C,KAAKW,IAAItD,EAAMmH,IAE/ClH,EAAS0C,KAAKC,IAAIwE,EAAUnH,GACX,MAAboH,IAAqBpH,EAAS0C,KAAKW,IAAIrD,EAAOoH,IAE9C3H,IAAM6G,OAAOC,mBAAoB9G,EAAIiD,KAAKC,IAAI,GAAG4E,OAAOC,WAAWzH,GAAO,IAC1EJ,IAAM2G,OAAOC,mBAAoB5G,EAAI+C,KAAKC,IAAI,GAAG4E,OAAOE,YAAYzH,GAAQ,IAEhFP,EAAIiD,KAAKW,IAAI5D,EAAE8H,OAAOC,WAAW,IACjC7H,EAAI+C,KAAKC,IAAI,EAAED,KAAKW,IAAI1D,EAAE4H,OAAOE,YAAY,KAE7C,MAAMhL,EAAKhC,KAAiBgC,EAAGiK,UAAY,CAAEjH,IAAEE,IAAGI,QAAMC,UAExD,MAAM0H,EAAaA,CAACjI,EAASE,EAAU4B,EAAUC,KAC1B,SAAjB/E,EAAGkK,UACLgB,EAAWpG,EAAGC,GAEdoG,EAAarG,EAAGC,GAElB1F,EAAM+L,mBAAmBnC,EAAOoB,MAChChL,EAAMM,UACR,EAEMuL,EAAaA,CAACpG,EAAUC,KAC5B1F,EAAMgM,iBACJpC,EAAOoB,KAAMrK,EAAGmK,YAAYnH,EAAI8B,EAAG9E,EAAGmK,YAAYjH,EAAI6B,EAE1D,EAEMoG,EAAeA,CAACrG,EAAUC,KAC9B,IAAIuG,EAAkBtL,EAAGmK,YAAY7G,MACrC,OAAQtD,EAAGkK,WACT,IAAK,YACHoB,EAAYrF,KAAKC,IAAIsE,EAASvE,KAAKW,IAAI5G,EAAGmK,YAAY7G,MAAMwB,EAAG2F,GAAYpM,WAE3EgB,EAAMgM,iBACJpC,EAAOoB,KAAMrK,EAAGmK,YAAYnH,GAF5B8B,EAAKwG,EAAStL,EAAGmK,YAAY7G,OAEItD,EAAGmK,YAAYjH,GAElDoI,EAAWtL,EAAGmK,YAAY7G,MAAMwB,EAChC,MACF,IAAK,YACHwG,EAAWrF,KAAKC,IAAIsE,EAASvE,KAAKW,IAAI5G,EAAGmK,YAAY7G,MAAMwB,EAAG2F,GAAYpM,WAE9E,IAAIkN,EAAYtF,KAAKC,IAAIwE,EAAUzE,KAAKW,IAAI5G,EAAGmK,YAAY5G,OAAOwB,EAAG4F,GAAatM,WAClFgB,EAAMmM,aAAavC,EAAOoB,KAAMiB,EAASC,EAAS,EAGpD,IAAInE,EAAiBpH,EAAGgK,gBACF,MAAlB5C,IACFA,EAAiBpH,EAAGgK,gBAAkB9C,EAtClBlJ,KAsCwC,CAC1D0G,SAAgB,sDAChBC,UAAgB,eAChBC,UAAgB,EAChBC,cAAgBA,CAAC7B,EAASE,EAAU4B,EAAUC,EAAWC,KACvD,IAAIyG,EAAazG,EAAM0G,OAAuBC,UAC9C,OADyD3L,EAAGkK,eAAY1K,GAChE,GACN,KAAKiM,EAAUG,SAAS,eAAkB5L,EAAGkK,UAAY,YAAa,MACtE,KAAKuB,EAAUG,SAAS,iBAAkB5L,EAAGkK,UAAY,WAAa,MACtE,KAAKuB,EAAUG,SAAS,gBAAkB5L,EAAGkK,UAAY,YAAa,MACtE,QAA0ClK,EAAGkK,UAAY,OAG3DlK,EAAGmK,YAAW0B,KAAQ7L,EAAGiK,WACzBgB,EAAWjI,EAAEE,EAAG4B,EAAGC,EAAE,EAEvBM,gBAAiB4F,EACjB3F,eAAiB2F,EACjB1F,gBAAiB0F,KAcrB,MAAM1B,EACJ,QAAQvG,YAAYE,cAAcI,eAAmBC,gCAGvD,IAAIuI,EACJ,IACEA,EAAUlB,GACZ,CAAE,MAAOmB,GACPC,QAAQC,MAAM,0BAA0BF,GACxCD,EAAUtE,EAAI7K,IAAAA,EAAAI,CAAA,wCAChB,CAEA,OAAOyK,EAAI5K,IAAAA,EAAAG,CAAA,mBAAA,eAAA;0BAAA;;mCAAA;;;0BAAA,iBAAA;0BAAA,qBAAA;;+BAAA;0CAAA;sBAAA;;;UAAA;YAAmBwN,EAAc,YAAc,GAAgB3C,EACtD2B,EAESuC,EAGT1E,EAA8BA,EAC9BA,EAAkCA,EAE7BkD,EACWrK,EAAIiM,aAhCxC,SAAuBlH,GACrBA,EAAMmH,2BACNnH,EAAMoH,iBAEN/M,EAAMgN,YAAYpD,EAAOoB,MACV,MAAXQ,GAAmBA,EAAQR,EACjC,EA8BIE,EAAc/C,EAAI3K,IAAAA,EAAAE,CAAA;;4BAAA,iBAAA;4BAAA,qBAAA;;;4BAAA,iBAAA;4BAAA,qBAAA;;;4BAAA,iBAAA;4BAAA,qBAAA;;WAEAqK,EAA8BA,EAC9BA,EAAkCA,EAGlCA,EAA8BA,EAC9BA,EAAkCA,EAGlCA,EAA8BA,EAC9BA,EAAkCA,GAEnD,GAEP,EAOF,MAAMgB,UAAwBzK,EACrBmC,MAAAA,CAAQC,GACb,IAAIM,KAAEA,EAAI+D,SAAEA,EAAQqF,eAAEA,GAAkC1J,EAAf2J,EAAUC,EAAK5J,EAAOnE,IAE3DoH,EAAEA,EAACE,EAACA,EAACI,MAAEA,EAAKC,OAACA,GAAWa,EAC5B,MAAM+B,EAAKnD,EAAE,EAAG4F,EAAK3C,KAAKO,MAAMxD,EAAEM,EAAM,GAAG,EAAI8C,EAAKpD,EAAEM,EAChD+C,EAAKnD,EAAE,EAAGsF,EAAKvC,KAAKO,MAAMtD,EAAEK,EAAO,GAAG,EAAG+C,EAAKpD,EAAEK,EAEtD,IAAIgG,EAAa+C,EACjB,OAAQjM,GACN,IAAK,KAAMkJ,EAAc,QAAQpD,YAAaE,OAASiG,EAAS,OAAQ,MACxE,IAAK,IAAM/C,EAAc,QAAQX,YAAavC,OAASiG,EAAS,KAAQ,MACxE,IAAK,KAAM/C,EAAc,QAAQnD,YAAaC,OAASiG,EAAS,OAAQ,MACxE,IAAK,IAAM/C,EAAc,QAAQnD,YAAaoC,OAAS8D,EAAS,KAAQ,MACxE,IAAK,KAAM/C,EAAc,QAAQnD,YAAaE,OAASgG,EAAS,OAAQ,MACxE,IAAK,IAAM/C,EAAc,QAAQX,YAAatC,OAASgG,EAAS,KAAQ,MACxE,IAAK,KAAM/C,EAAc,QAAQpD,YAAaG,OAASgG,EAAS,OAAQ,MACxE,IAAK,IAAM/C,EAAc,QAAQpD,YAAaqC,OAAS8D,EAAS,KAIlE,OAFAA,EAAS,UAAYA,EAAS,UAEvB9E,EAAI1K,IAAAA,EAAAC,CAAA,uCAAA,KAAA,SAAA;wBAAA,mBAAA;sBAAA,qBAAA;WAAuCwM,EAAe+C,EAAc5C,EAC7DD,EAAgCA,EAClCA,EAAkCA,EAEpD,EAIFqB,OAAOpN,cAAgBA,EAEvBN,SAASmP,cAEP,IAAIC,YAAY,gBAAgB,CAAEC,OAAO3B,OAAOpN"}